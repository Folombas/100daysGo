package main

import (
	"errors"
	"fmt"
	"time"
)

// Sentinel Errors - –Ω–∞—à–∏ "—Å—Ç–æ—Ä–æ–∂–µ–≤—ã–µ" –æ—à–∏–±–∫–∏ –¥–ª—è —Ç—Ä–∞–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
var (
	ErrNoOil          = errors.New("–º–∞—Å–ª–æ –≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å")
	ErrLowPressure    = errors.New("–¥–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∏–Ω–∞—Ö —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ")
	ErrBatteryDead    = errors.New("–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä —Ä–∞–∑—Ä—è–∂–µ–Ω")
	ErrFuelEmpty      = errors.New("—Ç–æ–ø–ª–∏–≤–Ω—ã–π –±–∞–∫ –ø—É—Å—Ç")
	ErrTransmission   = errors.New("–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ—Ä–æ–±–∫–æ–π –ø–µ—Ä–µ–¥–∞—á")
	ErrStarterFailure = errors.New("–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä—Ç–µ—Ä–∞")
)

// Tractor –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—à —Ç—Ä–∞–∫—Ç–æ—Ä
type Tractor struct {
	Model       string
	OilLevel    float64 // —É—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞ (0.0 - 1.0)
	TirePressure float64 // –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∏–Ω–∞—Ö (–±–∞—Ä)
	Battery     float64 // –∑–∞—Ä—è–¥ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (0.0 - 1.0)
	Fuel        float64 // —É—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ (0.0 - 1.0)
}

// NewTractor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–∞–∫—Ç–æ—Ä
func NewTractor(model string) *Tractor {
	return &Tractor{
		Model:       model,
		OilLevel:    0.8,
		TirePressure: 2.5,
		Battery:     0.9,
		Fuel:        0.7,
	}
}

// CheckEngine –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—å —Ç—Ä–∞–∫—Ç–æ—Ä–∞
func (t *Tractor) CheckEngine() error {
	fmt.Printf("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å %s...\n", t.Model)
	time.Sleep(1 * time.Second)

	if t.OilLevel < 0.1 {
		return ErrNoOil
	}

	if t.OilLevel < 0.3 {
		return fmt.Errorf("—É—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞ –Ω–∏–∑–∫–∏–π: %.1f%%, –Ω—É–∂–Ω–æ –¥–æ–ª–∏—Ç—å", t.OilLevel*100)
	}

	fmt.Println("‚úÖ –î–≤–∏–≥–∞—Ç–µ–ª—å –≤ –ø–æ—Ä—è–¥–∫–µ!")
	return nil
}

// CheckTires –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —à–∏–Ω—ã
func (t *Tractor) CheckTires() error {
	fmt.Printf("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∏–Ω—ã...\n")
	time.Sleep(1 * time.Second)

	if t.TirePressure < 1.5 {
		return ErrLowPressure
	}

	if t.TirePressure < 2.0 {
		return fmt.Errorf("–¥–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∏–Ω–∞—Ö –Ω–∏–∑–∫–æ–µ: %.1f –±–∞—Ä", t.TirePressure)
	}

	fmt.Println("‚úÖ –®–∏–Ω—ã –≤ –Ω–æ—Ä–º–µ!")
	return nil
}

// CheckElectrical –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
func (t *Tractor) CheckElectrical() error {
	fmt.Printf("‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–∫—Ç—Ä–∏–∫—É...\n")
	time.Sleep(1 * time.Second)

	if t.Battery < 0.1 {
		return ErrBatteryDead
	}

	if t.Battery < 0.5 {
		return fmt.Errorf("–∑–∞—Ä—è–¥ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –Ω–∏–∑–∫–∏–π: %.1f%%", t.Battery*100)
	}

	fmt.Println("‚úÖ –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ!")
	return nil
}

// CheckFuel –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ø–ª–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
func (t *Tractor) CheckFuel() error {
	fmt.Printf("‚õΩ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–ª–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É...\n")
	time.Sleep(1 * time.Second)

	if t.Fuel < 0.05 {
		return ErrFuelEmpty
	}

	if t.Fuel < 0.2 {
		return fmt.Errorf("—Ç–æ–ø–ª–∏–≤–∞ –º–∞–ª–æ: %.1f%%", t.Fuel*100)
	}

	fmt.Println("‚úÖ –¢–æ–ø–ª–∏–≤–æ –≤ –Ω–æ—Ä–º–µ!")
	return nil
}

// Start –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Å—Ç–∏ —Ç—Ä–∞–∫—Ç–æ—Ä
func (t *Tractor) Start() error {
	fmt.Printf("\nüöú –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Å—Ç–∏ —Ç—Ä–∞–∫—Ç–æ—Ä %s...\n", t.Model)
	time.Sleep(2 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
	if err := t.CheckFuel(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Å—Ç–∏: %w", err)
	}

	if err := t.CheckElectrical(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Å—Ç–∏: %w", err)
	}

	if err := t.CheckEngine(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Å—Ç–∏: %w", err)
	}

	fmt.Println("‚úÖ‚úÖ‚úÖ –¢–†–ê–ö–¢–û–† –ó–ê–í–ï–õ–°–Ø! –ú–æ–∂–Ω–æ –µ—Ö–∞—Ç—å –≤ –ø–æ–ª–µ!")
	return nil
}

// Diagnose –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
func (t *Tractor) Diagnose() {
	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println("üè• –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¢–†–ê–ö–¢–û–†–ê")
	fmt.Println(strings.Repeat("=", 50))

	checks := []func() error{
		t.CheckFuel,
		t.CheckElectrical,
		t.CheckEngine,
		t.CheckTires,
	}

	for _, check := range checks {
		if err := check(); err != nil {
			fmt.Printf("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: %v\n", err)
		}
	}
}

// RepairService —Å–µ—Ä–≤–∏—Å –ø–æ —Ä–µ–º–æ–Ω—Ç—É —Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
type RepairService struct {
	Name string
}

// NewRepairService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
func NewRepairService(name string) *RepairService {
	return &RepairService{Name: name}
}

// HandleError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Ç—Ä–∞–∫—Ç–æ—Ä–∞
func (rs *RepairService) HandleError(err error) {
	fmt.Printf("\nüîß –°–µ—Ä–≤–∏—Å '%s' –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É...\n", rs.Name)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º errors.Is –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ sentinel errors
	switch {
	case errors.Is(err, ErrNoOil):
		fmt.Println("üíß –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Ç –º–∞—Å–ª–∞. –†–µ—à–µ–Ω–∏–µ: –ó–∞–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–∞—Å–ª–æ!")

	case errors.Is(err, ErrLowPressure):
		fmt.Println("üéØ –ü—Ä–æ–±–ª–µ–º–∞: –ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –†–µ—à–µ–Ω–∏–µ: –ù–∞–∫–∞—á–∏–≤–∞–µ–º —à–∏–Ω—ã!")

	case errors.Is(err, ErrBatteryDead):
		fmt.Println("‚ö° –ü—Ä–æ–±–ª–µ–º–∞: –†–∞–∑—Ä—è–∂–µ–Ω –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä. –†–µ—à–µ–Ω–∏–µ: –ó–∞—Ä—è–∂–∞–µ–º –∏–ª–∏ –º–µ–Ω—è–µ–º!")

	case errors.Is(err, ErrFuelEmpty):
		fmt.Println("‚õΩ –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Ç —Ç–æ–ø–ª–∏–≤–∞. –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–∫—Ç–æ—Ä!")

	case errors.Is(err, ErrTransmission):
		fmt.Println("üî© –ü—Ä–æ–±–ª–µ–º–∞: –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á. –†–µ—à–µ–Ω–∏–µ: –í—ã–∑—ã–≤–∞–µ–º –ü–∞—Ö–æ–º—ã—á–∞!")

	case errors.Is(err, ErrStarterFailure):
		fmt.Println("üîÑ –ü—Ä–æ–±–ª–µ–º–∞: –°—Ç–∞—Ä—Ç–µ—Ä. –†–µ—à–µ–Ω–∏–µ: –†–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–ø—É—Å–∫–∞!")

	default:
		fmt.Printf("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: %v\n", err)
		fmt.Println("ü§î –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...")
	}
}

// DemonstrateSentinelErrors –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
func DemonstrateSentinelErrors() {
	fmt.Println("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø SENTINEL ERRORS")
	fmt.Println(strings.Repeat("=", 40))

	// –°—Ü–µ–Ω–∞—Ä–∏–π 1: –¢—Ä–∞–∫—Ç–æ—Ä –±–µ–∑ –º–∞—Å–ª–∞
	fmt.Println("\n1. –¢—Ä–∞–∫—Ç–æ—Ä '–£–¥–∞—Ä–Ω–∏–∫' - –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Å–ª–æ–º:")
	tractor1 := NewTractor("–£–¥–∞—Ä–Ω–∏–∫")
	tractor1.OilLevel = 0.05 // –û—á–µ–Ω—å –º–∞–ª–æ –º–∞—Å–ª–∞

	if err := tractor1.CheckEngine(); err != nil {
		fmt.Printf("   –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞: %v\n", err)
		if errors.Is(err, ErrNoOil) {
			fmt.Println("   ‚úÖ –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–∞ –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –æ–∂–∏–¥–∞–ª–∏!")
		}
	}

	// –°—Ü–µ–Ω–∞—Ä–∏–π 2: –¢—Ä–∞–∫—Ç–æ—Ä —Å —Ä–∞–∑—Ä—è–∂–µ–Ω–Ω—ã–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–º
	fmt.Println("\n2. –¢—Ä–∞–∫—Ç–æ—Ä '–ë—ã—Å—Ç—Ä—ã–π' - –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–º:")
	tractor2 := NewTractor("–ë—ã—Å—Ç—Ä—ã–π")
	tractor2.Battery = 0.05 // –ü–æ—á—Ç–∏ —Ä–∞–∑—Ä—è–∂–µ–Ω

	if err := tractor2.CheckElectrical(); err != nil {
		fmt.Printf("   –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞: %v\n", err)
		if errors.Is(err, ErrBatteryDead) {
			fmt.Println("   ‚úÖ –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä —Ç—Ä–µ–±—É–µ—Ç –∑–∞–º–µ–Ω—ã!")
		}
	}

	// –°—Ü–µ–Ω–∞—Ä–∏–π 3: –¶–µ–ø–æ—á–∫–∞ –æ—à–∏–±–æ–∫
	fmt.Println("\n3. –¢—Ä–∞–∫—Ç–æ—Ä '–°—Ç–∞—Ä—ã–π' - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
	tractor3 := NewTractor("–°—Ç–∞—Ä—ã–π")
	tractor3.Fuel = 0.0
	tractor3.OilLevel = 0.0

	if err := tractor3.Start(); err != nil {
		fmt.Printf("   –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: %v\n", err)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã
		if errors.Is(err, ErrFuelEmpty) {
			fmt.Println("   üí° –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –Ω–µ—Ç —Ç–æ–ø–ª–∏–≤–∞!")
		}
		if errors.Is(err, ErrNoOil) {
			fmt.Println("   üí° –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –Ω–µ—Ç –º–∞—Å–ª–∞!")
		}
	}
}

func main() {
	fmt.Println("üöú Day 75: Sentinel Errors - –†–µ–º–æ–Ω—Ç —Ç—Ä–∞–∫—Ç–æ—Ä–∞ —Å –ü–∞—Ö–æ–º—ã—á–µ–º!")
	fmt.Println(strings.Repeat("=", 60))

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π sentinel errors
	DemonstrateSentinelErrors()

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ä–µ–º–æ–Ω—Ç–∞
	service := NewRepairService("–ü–∞—Ö–æ–º—ã—á –∏ –ö–æ–º–ø–∞–Ω–∏—è")

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
	fmt.Println("\n" + strings.Repeat("üí•", 25))
	fmt.Println("–†–ï–ê–õ–¨–ù–´–ï –°–õ–£–ß–ê–ò –ò–ó –ñ–ò–ó–ù–ò:")
	fmt.Println(strings.Repeat("üí•", 25))

	testCases := []struct {
		name  string
		tractor *Tractor
	}{
		{"–¢—Ä–∞–∫—Ç–æ—Ä –±–µ–∑ —Ç–æ–ø–ª–∏–≤–∞", &Tractor{Model: "–ì–æ–ª–æ–¥–∞—Ä—å", Fuel: 0.0}},
		{"–¢—Ä–∞–∫—Ç–æ—Ä —Å —Å–µ–≤—à–∏–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–º", &Tractor{Model: "–¢–∏—Ö–æ–Ω—è", Battery: 0.0}},
		{"–¢—Ä–∞–∫—Ç–æ—Ä –±–µ–∑ –º–∞—Å–ª–∞", &Tractor{Model: "–°—É—Ö–∞—Ä—å", OilLevel: 0.0}},
		{"–¢—Ä–∞–∫—Ç–æ—Ä —Å–æ —Å–ø—É—â–µ–Ω–Ω—ã–º–∏ —à–∏–Ω–∞–º–∏", &Tractor{Model: "–ü—Ä–∏–∑—Ä–∞–∫", TirePressure: 1.0}},
	}

	for _, tc := range testCases {
		fmt.Printf("\nüìã –°–ª—É—á–∞–π: %s\n", tc.name)
		if err := tc.tractor.Start(); err != nil {
			service.HandleError(err)
		}
		time.Sleep(1 * time.Second)
	}

	// –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
	fmt.Println("\n" + strings.Repeat("üìä", 20))
	fmt.Println("–ò–¢–û–ì–ò –û–ë–£–ß–ï–ù–ò–Ø:")
	fmt.Println(strings.Repeat("üìä", 20))

	workingTractor := NewTractor("–ò–¥–µ–∞–ª—å–Ω—ã–π")
	workingTractor.Diagnose()

	fmt.Println("\nüéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Sentinel Errors:")
	fmt.Println("   ‚úÖ –Ø—Å–Ω–æ—Å—Ç—å - —Å—Ä–∞–∑—É –ø–æ–Ω—è—Ç–µ–Ω —Ç–∏–ø –æ—à–∏–±–∫–∏")
	fmt.Println("   ‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º errors.Is()")
	fmt.Println("   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - –æ—à–∏–±–∫–∏ –∫–∞–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã")
	fmt.Println("   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ª–µ–≥–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏")

	fmt.Println("\nüí™ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å Sentinel Errors!")
	fmt.Println("   –ü–æ–º–Ω–∏: –∫–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—É—á–∏—Ç—å—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É!")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è strings.Repeat
var strings = struct {
	Repeat func(string, int) string
}{
	Repeat: func(s string, count int) string {
		result := ""
		for i := 0; i < count; i++ {
			result += s
		}
		return result
	},
}

