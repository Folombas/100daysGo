package main

import (
	"errors"
	"fmt"
)

// FarmError –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
type FarmError struct {
	Operation string
	Err       error
	Condition string
}

func (e *FarmError) Error() string {
	return fmt.Sprintf("üöú –°–±–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: %s (—É—Å–ª–æ–≤–∏—è: %s) - %v", 
		e.Operation, e.Condition, e.Err)
}

func (e *FarmError) Unwrap() error {
	return e.Err
}

// –û—à–∏–±–∫–∏ –≤ –ø–æ–ª–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
var (
	ErrNoInternet = errors.New("–±–µ–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—Å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
	ErrLowBattery = errors.New("–Ω–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
	ErrBrightSun  = errors.New("—Å–æ–ª–Ω—Ü–µ —Å–ª–µ–ø–∏—Ç —ç–∫—Ä–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
	ErrDistracted = errors.New("–æ—Ç–≤–ª–µ–∫–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ —Å —Ñ–µ—Ä–º—ã")
)

// simulateCodingAttempt —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–ª–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
func simulateCodingAttempt(day int) error {
	if err := findShelter(); err != nil {
		return &FarmError{
			Operation: "–ø–æ–∏—Å–∫ —É–∫—Ä—ã—Ç–∏—è –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞",
			Err:       err,
			Condition: "–ø—Ä—è–º—ã–µ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ª—É—á–∏",
		}
	}

	if err := establishConnection(); err != nil {
		return fmt.Errorf("—Å–±–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %w", err)
	}

	if err := writeGoCode(day); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ Go –¥–ª—è –¥–Ω—è %d: %w", day, err)
	}

	fmt.Printf("‚úÖ –î–µ–Ω—å %d –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä—è–º–æ —Å —Å–µ–Ω–æ–≤–∞–ª–∞!\n", day)
	return nil
}

func findShelter() error {
	return ErrBrightSun // –í—Å–µ–≥–¥–∞ —Å–æ–ª–Ω—Ü–µ —Å–ª–µ–ø–∏—Ç!
}

func establishConnection() error {
	return ErrNoInternet // –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∞ —Ñ–µ—Ä–º–µ - —ç—Ç–æ —Ä–æ—Å–∫–æ—à—å
}

func writeGoCode(day int) error {
	if day > 70 {
		return ErrDistracted // –ü–æ—Å–ª–µ 70 –¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
	}
	return nil
}

// analyzeError –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–≤—ë—Ä—Ç–∫—É –æ—à–∏–±–æ–∫
func analyzeError(err error) {
	fmt.Println("\nüîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –æ—à–∏–±–æ–∫:")
	
	for err != nil {
		fmt.Printf("   ‚Üí %v\n", err)
		err = errors.Unwrap(err)
	}
}

func main() {
	fmt.Println("üéØ –î–µ–Ω—å 75: –û–±—ë—Ä—Ç–∫–∞ –∏ —Ä–∞–∑–≤—ë—Ä—Ç–∫–∞ –æ—à–∏–±–æ–∫")
	fmt.Println("=======================================")
	fmt.Println("üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –§–µ—Ä–º–µ—Ä—Å–∫–∏–π —Å–µ–Ω–æ–≤–∞–ª")
	fmt.Println("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: Honor 10x Lite + Termux")
	fmt.Println("üí™ –î—É—Ö: –ù–µ—Å–ª–æ–º–ª–µ–Ω–Ω—ã–π!")
	fmt.Println("")

	fmt.Println("üöÄ –ü—ã—Ç–∞—é—Å—å –ø–∏—Å–∞—Ç—å –∫–æ–¥ –≤ –ø–æ–ª–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö...")
	err := simulateCodingAttempt(75)
	
	if err != nil {
		fmt.Printf("\n‚ùå –°–µ—Å—Å–∏—è –∫–æ–¥–∏–Ω–≥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å: %v\n", err)
		analyzeError(err)
		
		// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è errors.Is
		fmt.Println("\nüîé –ò—Å–ø–æ–ª—å–∑—É–µ–º errors.Is –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫:")
		if errors.Is(err, ErrDistracted) {
			fmt.Println("   üêê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –û—Ç–≤–ª–µ–∫–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ —Å —Ñ–µ—Ä–º—ã!")
		}
		
		// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è errors.As
		fmt.Println("\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º errors.As –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è FarmError:")
		var farmErr *FarmError
		if errors.As(err, &farmErr) {
			fmt.Printf("   –î–µ—Ç–∞–ª–∏ —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–π –æ—à–∏–±–∫–∏: –û–ø–µ—Ä–∞—Ü–∏—è=%s, –£—Å–ª–æ–≤–∏—è=%s\n", 
				farmErr.Operation, farmErr.Condition)
		}
	}

	fmt.Println("\nüí™ –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤—Å–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, —á–µ–ª–ª–µ–Ω–¥–∂ #100DaysOfGo –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!")
	fmt.Println("üöú –ö–æ–¥ —Å —Ñ–µ—Ä–º—ã –Ω–∞ GitHub: –°–≤–µ–∂–∏–π —Å —Å–µ–Ω–æ–≤–∞–ª–∞!")
}
