package main

import (
	"fmt"
	"log"
	"net/http"

	//"path/filepath"
	"time"
)

func main() {
	// –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
	mux := http.NewServeMux()

	// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	fs := http.FileServer(http.Dir("static"))
	mux.Handle("/", http.StripPrefix("/", fs))

	// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–æ—Ñ–µ—Ä–∞
	mux.HandleFunc("GET /gopher", gopherHandler)

	// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	handler := loggingMiddleware(mux)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
	server := &http.Server{
		Addr:         ":8080",
		Handler:      handler,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	fmt.Println("üëâ –°—Ç–∞—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ: http://localhost:8080/")
	fmt.Println("üëâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≥–æ—Ñ–µ—Ä–æ–º: http://localhost:8080/gopher")

	log.Fatal(server.ListenAndServe())
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≥–æ—Ñ–µ—Ä–æ–º
func gopherHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	fmt.Fprintf(w, `
<!DOCTYPE html>
<html>
<head>
	<title>–ì–æ—Ñ–µ—Ä!</title>
	<link rel="stylesheet" href="/css/style.css">
</head>
<body>
	<div class="container">
		<h1>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –ì–æ—Ñ–µ—Ä!</h1>
		<div class="gopher-container">
			<pre class="gopher">
				<img src="/images/gopher.png" alt="gopher">
			</pre>
		</div>
		<p>–°–∏–º–≤–æ–ª —è–∑—ã–∫–∞ Go - –º–∏–ª—ã–π –≥–æ—Ñ–µ—Ä!</p>
		<a href="/" class="btn">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
	</div>
</body>
</html>
	`)
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func loggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		next.ServeHTTP(w, r)
		log.Printf("%s %s %s %v", r.Method, r.URL.Path, r.RemoteAddr, time.Since(start))
	})
}
