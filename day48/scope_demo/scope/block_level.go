package scope

import "fmt"

// DemoBlockLevelScope –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–ª–æ–∫–æ–≤
func DemoBlockLevelScope() {
	// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É—Ä–æ–≤–Ω—è —Ñ—É–Ω–∫—Ü–∏–∏
	outerVar := "–Ø –≤–Ω–µ—à–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è"
	fmt.Println("üè† –í–Ω–µ—à–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:", outerVar)
	
	// –ë–ª–æ–∫ 1: if statement
	if condition := true; condition {
		innerVar := "–Ø –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∞ if"
		fmt.Println("   üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∞ if:", innerVar)
		fmt.Println("   üè† –î–æ—Å—Ç—É–ø –∫ –≤–Ω–µ—à–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ if:", outerVar)
		
		// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è condition –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ if
		fmt.Println("   üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è condition:", condition)
	}
	
	// –ë–ª–æ–∫ 2: for loop
	for i := 0; i < 2; i++ {
		loopVar := "–Ø –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–∏–∫–ª–∞"
		fmt.Printf("   üîÅ –ò—Ç–µ—Ä–∞—Ü–∏—è %d: %s\n", i, loopVar)
		fmt.Printf("   üè† –î–æ—Å—Ç—É–ø –∫ –≤–Ω–µ—à–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ —Ü–∏–∫–ª–∞: %s\n", outerVar)
		
		// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è i –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞
		fmt.Printf("   üîÅ –°—á–µ—Ç—á–∏–∫ —Ü–∏–∫–ª–∞ i: %d\n", i)
	}
	
	// –ë–ª–æ–∫ 3: switch statement
	switch value := 42; value {
	case 42:
		caseVar := "–Ø –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è case"
		fmt.Println("   üîÄ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è case:", caseVar)
		fmt.Println("   üè† –î–æ—Å—Ç—É–ø –∫ –≤–Ω–µ—à–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ case:", outerVar)
	default:
		fmt.Println("–î—Ä—É–≥–æ–π —Å–ª—É—á–∞–π")
	}
	
	// –û—à–∏–±–∫–∞! –í—Å–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω–µ —Å–≤–æ–∏—Ö –±–ª–æ–∫–æ–≤
	// fmt.Println(innerVar)  // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞
	// fmt.Println(loopVar)   // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞  
	// fmt.Println(caseVar)   // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞
	// fmt.Println(i)         // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞
	// fmt.Println(condition) // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞
	// fmt.Println(value)     // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞
}