package main

import "fmt"

func demoBasicMaps() {
	printSeparator()

	fmt.Println("üÜï –°–æ–∑–¥–∞–Ω–∏–µ Map —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:")

	// –°–ø–æ—Å–æ–± 1: make
	ages := make(map[string]int)
	ages["–ê–Ω–Ω–∞"] = 25
	ages["–ü–µ—Ç—Ä"] = 30
	fmt.Printf("üìä Map —á–µ—Ä–µ–∑ make: %v\n", ages)

	// –°–ø–æ—Å–æ–± 2: –ª–∏—Ç–µ—Ä–∞–ª
	capitals := map[string]string{
		"–†–æ—Å—Å–∏—è": "–ú–æ—Å–∫–≤–∞ üèõÔ∏è",
		"–§—Ä–∞–Ω—Ü–∏—è": "–ü–∞—Ä–∏–∂ üóº",
		"–Ø–ø–æ–Ω–∏—è": "–¢–æ–∫–∏–æ üóæ",
	}
	fmt.Printf("üåç Map —á–µ—Ä–µ–∑ –ª–∏—Ç–µ—Ä–∞–ª: %v\n", capitals)

	// –°–ø–æ—Å–æ–± 3: –ø—É—Å—Ç–∞—è Map
	emptyMap := map[string]bool{}
	fmt.Printf("üì¶ –ü—É—Å—Ç–∞—è Map: %v\n", emptyMap)

	fmt.Println("\nüîç –î–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º:")
	fmt.Printf("–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏: %s\n", capitals["–†–æ—Å—Å–∏—è"])
	fmt.Printf("–í–æ–∑—Ä–∞—Å—Ç –ê–Ω–Ω—ã: %d –ª–µ—Ç\n", ages["–ê–Ω–Ω–∞"])

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
	if capital, exists := capitals["–ì–µ—Ä–º–∞–Ω–∏—è"]; exists {
		fmt.Printf("–°—Ç–æ–ª–∏—Ü–∞ –ì–µ—Ä–º–∞–Ω–∏–∏: %s\n", capital)
	} else {
		fmt.Println("‚ùå –ì–µ—Ä–º–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—à–µ–π –º–∞–ø–µ")
	}
}
