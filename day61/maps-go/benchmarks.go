package main

import (
	"fmt"
	"time"
)

func demoMapBenchmarks() {
	printSeparator()

	fmt.Println("‚ö° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")

	// –¢–µ—Å—Ç 1: Map vs Slice –¥–ª—è –ø–æ–∏—Å–∫–∞
	size := 100000
	testMap := make(map[int]string, size)
	testSlice := make([]string, size)

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	for i := 0; i < size; i++ {
		value := fmt.Sprintf("value%d", i)
		testMap[i] = value
		testSlice[i] = value
	}

	// –ü–æ–∏—Å–∫ –≤ Map
	start := time.Now()
	for i := 0; i < 1000; i++ {
		_ = testMap[i%size]
	}
	mapTime := time.Since(start)

	// –ü–æ–∏—Å–∫ –≤ Slice (–ª–∏–Ω–µ–π–Ω—ã–π)
	start = time.Now()
	for i := 0; i < 1000; i++ {
		target := i % size
		for j := 0; j < size; j++ {
			if j == target {
				_ = testSlice[j]
				break
			}
		}
	}
	sliceTime := time.Since(start)

	fmt.Printf("üîç –ü–æ–∏—Å–∫ 1000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\n")
	fmt.Printf("  üó∫Ô∏è Map: %v (O(1) - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è)\n", mapTime)
	fmt.Printf("  üìã Slice: %v (O(n) - –ª–∏–Ω–µ–π–Ω–æ–µ –≤—Ä–µ–º—è)\n", sliceTime)
	fmt.Printf("  üìà Map –±—ã—Å—Ç—Ä–µ–µ –≤ %.0f —Ä–∞–∑!\n", float64(sliceTime)/float64(mapTime))

	// –¢–µ—Å—Ç 2: –ò—Ç–µ—Ä–∞—Ü–∏—è
	fmt.Println("\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º:")

	start = time.Now()
	for range testMap {
		// –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
	}
	mapIterTime := time.Since(start)

	start = time.Now()
	for range testSlice {
		// –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
	}
	sliceIterTime := time.Since(start)

	fmt.Printf("  üó∫Ô∏è Map –∏—Ç–µ—Ä–∞—Ü–∏—è: %v\n", mapIterTime)
	fmt.Printf("  üìã Slice –∏—Ç–µ—Ä–∞—Ü–∏—è: %v\n", sliceIterTime)
	fmt.Printf("  üí° Slice –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏!\n")

	fmt.Println("\nüéØ –í—ã–≤–æ–¥—ã:")
	fmt.Println("  ‚úÖ Map –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á—É")
	fmt.Println("  ‚úÖ Slice –ª—É—á—à–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
	fmt.Println("  üí° –í—ã–±–∏—Ä–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–¥–∞—á–µ!")
}
