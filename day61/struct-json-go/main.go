package main

import (
	"encoding/json"
	"fmt"
	"log"
	"reflect"
	"time"
)

// üè∑Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ç–µ–≥–∞–º–∏ –¥–ª—è JSON
type User struct {
	ID        int       `json:"id" db:"user_id" validate:"required"`
	Name      string    `json:"name" db:"user_name" validate:"min=3"`
	Email     string    `json:"email,omitempty" db:"email"`
	Password  string    `json:"-" db:"password_hash"`
	CreatedAt time.Time `json:"created_at" db:"created_at"`
	IsActive  bool      `json:"is_active" db:"is_active"`
	Metadata  Metadata  `json:"metadata" db:"metadata"`
}

// üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
type Metadata struct {
	Role      string   `json:"role" db:"role"`
	Tags      []string `json:"tags" db:"tags"`
	Settings  Settings `json:"settings" db:"settings"`
}

// ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–∞—Ä—à–∞–ª–ª–∏–∑–∞—Ü–∏–µ–π
type Settings struct {
	Theme    string `json:"theme" db:"theme"`
	Language string `json:"language" db:"language"`
}

// üéØ –ú–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è —Ç–µ–≥–æ–≤
func (u User) PrintTags() {
	val := reflect.ValueOf(u)
	typ := val.Type()

	fmt.Println("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ì–û–í –°–¢–†–£–ö–¢–£–†–´:")
	for i := 0; i < val.NumField(); i++ {
		field := typ.Field(i)
		fmt.Printf("üè∑Ô∏è  %s:\n", field.Name)
		fmt.Printf("   JSON: %s\n", field.Tag.Get("json"))
		fmt.Printf("   DB: %s\n", field.Tag.Get("db"))
		fmt.Printf("   Validate: %s\n", field.Tag.Get("validate"))
		fmt.Println("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
	}
}

func main() {
	fmt.Println("üéâ –î–ï–ú–û –°–¢–†–£–ö–¢–£–†–´, –¢–ï–ì–û–í –ò JSON –í GO!")
	fmt.Println("=========================================")

	// üìù –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user := User{
		ID:        1,
		Name:      "–ê–ª—ë—à–∞ –ì–æ—Ñ–µ—Ä–æ–≤",
		Email:     "alex@go.dev",
		Password:  "secret123",
		CreatedAt: time.Now(),
		IsActive:  true,
		Metadata: Metadata{
			Role: "developer",
			Tags: []string{"golang", "backend", "microservices"},
			Settings: Settings{
				Theme:    "dark",
				Language: "ru",
			},
		},
	}

	// üîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–≥–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	user.PrintTags()
	fmt.Println()

	// üì§ –ú–∞—Ä—à–∞–ª–∏–Ω–≥ –≤ JSON
	fmt.Println("üì§ –ú–ê–†–®–ê–õ–ò–ù–ì –í JSON:")
	jsonData, err := json.MarshalIndent(user, "", "  ")
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞:", err)
	}
	fmt.Println(string(jsonData))
	fmt.Println()

	// üì• –î–µ–º–∞—Ä—à–∞–ª–∏–Ω–≥ –∏–∑ JSON
	fmt.Println("üì• –î–ï–ú–ê–†–®–ê–õ–ò–ù–ì –ò–ó JSON:")
	var newUser User
	jsonStr := `{
		"id": 2,
		"name": "–ú–∞—Ä–∏—è –ö–æ–¥–µ—Ä–æ–≤–∞",
		"email": "maria@go.dev",
		"created_at": "2023-10-01T12:00:00Z",
		"is_active": true,
		"metadata": {
			"role": "team lead",
			"tags": ["leadership", "architecture"],
			"settings": {
				"theme": "light",
				"language": "en"
			}
		}
	}`

	if err := json.Unmarshal([]byte(jsonStr), &newUser); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–∞—Ä—à–∞–ª–∏–Ω–≥–∞:", err)
	}

	fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n")
	fmt.Printf("   ID: %d\n", newUser.ID)
	fmt.Printf("   –ò–º—è: %s\n", newUser.Name)
	fmt.Printf("   Email: %s\n", newUser.Email)
	fmt.Printf("   –ü–∞—Ä–æ–ª—å: %s\n", newUser.Password)
	fmt.Printf("   –†–æ–ª—å: %s\n", newUser.Metadata.Role)
	fmt.Println()

	// üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è omitempty –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
	fmt.Println("üé≠ –î–ï–ú–û OMTEMPTY –ò –ò–ì–ù–û–†–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–ï–ô:")
	userWithoutEmail := User{
		ID:       3,
		Name:    "–ü–µ—Ç—Ä –¢–µ—Å—Ç–µ—Ä–æ–≤",
		Password: "test123",
		CreatedAt: time.Now(),
		IsActive: false,
	}

	jsonData2, _ := json.MarshalIndent(userWithoutEmail, "", "  ")
	fmt.Println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ email (omitempty –≤ –¥–µ–π—Å—Ç–≤–∏–∏):")
	fmt.Println(string(jsonData2))
	fmt.Println()

	// üèÜ –ò—Ç–æ–≥–∏
	fmt.Println("üéØ –í–´–í–û–î–´:")
	fmt.Println("‚úÖ –¢–µ–≥–∏ struct —É–ø—Ä–∞–≤–ª—è—é—Ç JSON –º–∞—Ä—à–∞–ª–∏–Ω–≥–æ–º")
	fmt.Println("‚úÖ json:\"name\" - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è")
	fmt.Println("‚úÖ json:\"-\" - –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è")
	fmt.Println("‚úÖ json:\",omitempty\" - –ø—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
	fmt.Println("‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π")
}
