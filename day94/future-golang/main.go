package main

import (
	"fmt"
	"time"
)

type LanguagePet struct {
	Name        string
	Trend2025   string
	Salary      int
	Growth      float64
	FutureProof bool
}

func main() {
	fmt.Println("üîÆ –î–µ–Ω—å 94: –ë—É–¥—É—â–µ–µ Go –≤ 2025 - –ü–æ—á–µ–º—É –ì–æ—Ñ–µ—Ä —Ç–≤–æ–π –±–∏–ª–µ—Ç –≤ –∑–∞–≤—Ç—Ä–∞!")
	fmt.Println("==================================================")

	pets := []LanguagePet{
		{
			Name:        "üêç –ü–∏—Ç–æ–Ω Python",
			Trend2025:   "AI/ML –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –Ω–∞—Å—ã—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞",
			Salary:      120000,
			Growth:      8.5,
			FutureProof: true,
		},
		{
			Name:        "üêò –°–ª–æ–Ω–∏–∫ PHP",
			Trend2025:   "–õ–µ–≥–∞—Å–∏ –ø—Ä–æ–µ–∫—Ç—ã, –º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–ø–∞–¥",
			Salary:      80000,
			Growth:      2.1,
			FutureProof: false,
		},
		{
			Name:        "ü¶Ä –ö—Ä–∞–±–∏–∫ Rust",
			Trend2025:   "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, WebAssembly",
			Salary:      140000,
			Growth:      15.3,
			FutureProof: true,
		},
		{
			Name:        "üê´ –°—Ç–∞—Ä—ã–π –≤–µ—Ä–±–ª—é–¥ Perl",
			Trend2025:   "–ù–∏—à–µ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ legacy",
			Salary:      90000,
			Growth:      1.2,
			FutureProof: false,
		},
		{
			Name:        "üêπ –ì–æ—Ñ–µ—Ä Golang",
			Trend2025:   "CLOUD-NATIVE –õ–ò–î–ï–†, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã, DevOps",
			Salary:      150000,
			Growth:      22.7,
			FutureProof: true,
		},
	}

	fmt.Println("\nüè™ –í–æ–ª—à–µ–±–Ω—ã–π –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω —è–∑—ã–∫–æ–≤ 2025:")
	fmt.Println("==================================================")
	
	for i, pet := range pets {
		status := "‚ùå"
		if pet.FutureProof {
			status = "‚úÖ"
		}
		fmt.Printf("%s %d. %s\n", status, i+1, pet.Name)
		fmt.Printf("   üìà –¢—Ä–µ–Ω–¥ 2025: %s\n", pet.Trend2025)
		fmt.Printf("   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: %d —Ä—É–±.\n", pet.Salary)
		fmt.Printf("   üöÄ –†–æ—Å—Ç: %.1f%%\n", pet.Growth)
		fmt.Println()
		time.Sleep(500 * time.Millisecond)
	}

	// –§–æ–∫—É—Å –Ω–∞ Go
	gopher := pets[4]
	
	fmt.Println("üéØ –ü–û–ß–ï–ú–£ –ì–û–§–ï–† - –í–´–ë–û–† –ë–£–î–£–©–ï–ì–û –î–õ–Ø –ù–ê–°:")
	fmt.Println("==================================================")
	
	reasons := []struct {
		title   string
		details string
	}{
		{
			"‚òÅÔ∏è  Cloud-Native –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
			"Go —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–ª–∞–∫–æ–≤. Docker, Kubernetes, Terraform - –≤—Å—ë –Ω–∞ Go",
		},
		{
			"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å C++ —Å –ø—Ä–æ—Å—Ç–æ—Ç–æ–π Python",
			"–ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥, –Ω–æ —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤—ã–π —è–∑—ã–∫",
		},
		{
			"üîß –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏",
			"–ì–æ—Ä—É—Ç–∏–Ω—ã –∏ –∫–∞–Ω–∞–ª—ã - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏–∑ –∫–æ—Ä–æ–±–∫–∏",
		},
		{
			"üì¶ –û–¥–Ω–∞ –±–∏–Ω–∞—Ä–∫–∞ - –Ω—É–ª–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
			"–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏",
		},
		{
			"üè¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ IT-–≥–∏–≥–∞–Ω—Ç–æ–≤",
			"Google, Uber, Twitch, Dropbox - –≤—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –Ω–∞ Go",
		},
		{
			"üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ROI –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è",
			"–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ √ó –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã = –ª—É—á—à–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è",
		},
	}

	for i, reason := range reasons {
		fmt.Printf("%d. %s\n", i+1, reason.title)
		fmt.Printf("   %s\n", reason.details)
		time.Sleep(300 * time.Millisecond)
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Go
	fmt.Println("\nüöÄ –î–ï–ú–û-–ü–†–ò–ú–ï–†: –ü–æ—á–µ–º—É Go –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è 2025")
	fmt.Println("==================================================")
	
	// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
	fmt.Println("üîÑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ 3 —Å—Ç—Ä–æ—á–∫–∏ (–æ—Å–Ω–æ–≤–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ 2025):")
	
	ch := make(chan string, 3)
	
	go func() { ch <- "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –ê: –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å" }()
	go func() { ch <- "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å B: –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ" }()
	go func() { ch <- "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å C: —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤ –∫–µ—à" }()
	
	for i := 0; i < 3; i++ {
		fmt.Printf("   üì® %s\n", <-ch)
		time.Sleep(200 * time.Millisecond)
	}

	fmt.Println("\nüìä –í–´–í–û–î –î–õ–Ø –ì–û–°–¢–ò:")
	fmt.Printf("–í—ã–±—Ä–∞–≤ %s, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n", gopher.Name)
	fmt.Printf("‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ %d —Ä—É–±. –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ\n", gopher.Salary-100000)
	fmt.Printf("‚Ä¢ –†–æ—Å—Ç –∫–∞—Ä—å–µ—Ä—ã –Ω–∞ %.1f%% –±—ã—Å—Ç—Ä–µ–µ —Ä—ã–Ω–∫–∞\n", gopher.Growth)
	fmt.Printf("‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—é –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –¥–æ 2030+ –≥–æ–¥–∞\n")
	
	fmt.Println("\nüí° –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–°–¢–ò–ù–ê:")
	fmt.Println("–í 2025 –∑–Ω–∞–Ω–∏–µ Go = –ø—Ä–æ–ø—É—Å–∫ –≤ –º–∏—Ä high-load, cloud –∏ blockchain!")
	fmt.Println("–ù–µ –º–µ–Ω—è–π –ø–∏—Ç–æ–º—Ü–∞ - —Å—Ç–∞–Ω—å –ì—É—Ä—É –ì–æ—Ñ–µ—Ä–∞! üêπ‚ú®")
	
	fmt.Println("\nüéØ –¢–í–û–ô –ü–õ–ê–ù –ù–ê 2025:")
	plan := []string{
		"2025: –ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã Go"
		"2026: –û—Å–≤–æ–∏—Ç—å Go –¥–æ middle —É—Ä–æ–≤–Ω—è",
		"2027: –£—Å—Ç—Ä–æ–∏—Ç—å—Å—è Go-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ cloud-–∫–æ–º–ø–∞–Ω–∏—é", 
		"2028: –°—Ç–∞—Ç—å lead –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ",
		"2029: –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä cloud-—Ä–µ—à–µ–Ω–∏–π –Ω–∞ Go",
	}
	
	for _, step := range plan {
		fmt.Printf("   ‚úÖ %s\n", step)
		time.Sleep(400 * time.Millisecond)
	}
}
