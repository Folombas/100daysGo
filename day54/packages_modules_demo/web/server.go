// web/server.go
package web

import (
	"html/template"
	"log"
	"net/http"
	"os"

	"packages_modules_demo/calculator"
	"packages_modules_demo/formatter"
)

func StartServer() error {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	http.HandleFunc("/", homeHandler)

	log.Printf("üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:%s", port)
	return http.ListenAndServe(":"+port, nil)
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("web/templates/index.html")
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		log.Println("‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞:", err)
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
	a, b := 100.0, 25.5
	examples := []string{
		formatter.FormatWithLabel("–°–ª–æ–∂–µ–Ω–∏–µ", "+", a, b, calculator.Add(a, b)),
		formatter.FormatWithLabel("–í—ã—á–∏—Ç–∞–Ω–∏–µ", "-", a, b, calculator.Subtract(a, b)),
		formatter.FormatWithLabel("–£–º–Ω–æ–∂–µ–Ω–∏–µ", "√ó", a, b, calculator.Multiply(a, b)),
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ª–µ–Ω–∏—è
	if result, ok := calculator.Divide(a, b); ok {
		examples = append(examples, formatter.FormatWithLabel("–î–µ–ª–µ–Ω–∏–µ", "√∑", a, b, result))
	} else {
		examples = append(examples, "–î–µ–ª–µ–Ω–∏–µ: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å)")
	}

	data := struct {
		Title    string
		Examples []string
	}{
		Title:    "–ü–∞–∫–µ—Ç—ã, –º–æ–¥—É–ª–∏ –∏ –∏–º–ø–æ—Ä—Ç—ã –≤ Go ‚Äî –î–µ–º–æ Day 54",
		Examples: examples,
	}

	err = tmpl.Execute(w, data)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞", http.StatusInternalServerError)
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:", err)
	}
}
