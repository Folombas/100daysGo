package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// User –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type User struct {
	ID        int       `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /api/users
func usersHandler(w http.ResponseWriter, r *http.Request) {
	users := []User{
		{ID: 1, Name: "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤", Email: "alex@example.com", CreatedAt: time.Now()},
		{ID: 2, Name: "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", Email: "maria@example.com", CreatedAt: time.Now()},
		{ID: 3, Name: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", Email: "ivan@example.com", CreatedAt: time.Now()},
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(users)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /api/health
func healthHandler(w http.ResponseWriter, r *http.Request) {
	response := map[string]string{
		"status":    "ok",
		"timestamp": time.Now().Format(time.RFC3339),
		"runtime":   "Go",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// StartWebServer –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
func StartWebServer() {
	http.HandleFunc("/api/users", usersHandler)
	http.HandleFunc("/api/health", healthHandler)

	port := ":8080"
	fmt.Printf("üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s\n", port)
	fmt.Println("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
	fmt.Printf("   GET %s/api/users\n", port)
	fmt.Printf("   GET %s/api/health\n", port)
	
	if err := http.ListenAndServe(port, nil); err != nil {
		panic(err)
	}
}