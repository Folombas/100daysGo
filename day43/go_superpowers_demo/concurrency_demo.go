package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// Task –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
type Task struct {
	ID   int
	Data string
}

// Result –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
type Result struct {
	TaskID int
	Output string
	Time   time.Duration
}

// worker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
func worker(id int, tasks <-chan Task, results chan<- Result, wg *sync.WaitGroup) {
	defer wg.Done()
	
	for task := range tasks {
		start := time.Now()
		
		// –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
		processingTime := time.Duration(rand.Intn(500)) * time.Millisecond
		time.Sleep(processingTime)
		
		// "–û–±—Ä–∞–±–æ—Ç–∫–∞" –¥–∞–Ω–Ω—ã—Ö
		output := fmt.Sprintf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ—Ä–∫–µ—Ä–æ–º %d: %s", id, task.Data)
		
		results <- Result{
			TaskID: task.ID,
			Output: output,
			Time:   time.Since(start),
		}
	}
}

// StartWorkerPool –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω "Worker Pool"
func StartWorkerPool() {
	fmt.Println("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Worker Pool –≤ Go")
	
	var wg sync.WaitGroup
	numWorkers := 5
	numTasks := 15
	
	tasks := make(chan Task, numTasks)
	results := make(chan Result, numTasks)
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
	for i := 1; i <= numWorkers; i++ {
		wg.Add(1)
		go worker(i, tasks, results, &wg)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
	for i := 1; i <= numTasks; i++ {
		tasks <- Task{
			ID:   i,
			Data: fmt.Sprintf("–ó–∞–¥–∞—á–∞ %d", i),
		}
	}
	close(tasks)
	
	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è results –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
	go func() {
		wg.Wait()
		close(results)
	}()
	
	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	totalTime := time.Duration(0)
	for result := range results {
		fmt.Printf("‚úÖ %s (–≤—Ä–µ–º—è: %v)\n", result.Output, result.Time)
		totalTime += result.Time
	}
	
	fmt.Printf("üìä –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–±—â–µ–µ –≤—Ä–µ–º—è: %v\n", totalTime)
	fmt.Printf("‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: %v\n", totalTime/time.Duration(numTasks))
}