package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
)

// processText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
func processText(text string, operation string) string {
	switch operation {
	case "upper":
		return strings.ToUpper(text)
	case "lower":
		return strings.ToLower(text)
	case "title":
		return strings.Title(text)
	case "reverse":
		runes := []rune(text)
		for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
			runes[i], runes[j] = runes[j], runes[i]
		}
		return string(runes)
	default:
		return text
	}
}

// StartCLI –∑–∞–ø—É—Å–∫–∞–µ—Ç CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
func StartCLI() {
	textPtr := flag.String("text", "", "–¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
	opPtr := flag.String("op", "upper", "–û–ø–µ—Ä–∞—Ü–∏—è: upper, lower, title, reverse")
	helpPtr := flag.Bool("help", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")

	flag.Parse()

	if *helpPtr {
		fmt.Println("üêö GoCLI - –ü—Ä–æ—Å—Ç–æ–π CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ Go")
		fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: gocli --text=\"–≤–∞—à —Ç–µ–∫—Å—Ç\" --op=operation")
		fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: upper, lower, title, reverse")
		return
	}

	if *textPtr == "" {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
		fmt.Println("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
		os.Exit(1)
	}

	result := processText(*textPtr, *opPtr)
	fmt.Printf("üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: %s\n", result)
}