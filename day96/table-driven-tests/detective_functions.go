package main

import (
	"fmt"
	"regexp"
	"strings"
	"unicode"
)

// ValidatePassword –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func ValidatePassword(password string) error {
	if len(password) < 8 {
		return fmt.Errorf("–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
	}

	hasUpper := false
	hasLower := false
	hasDigit := false

	for _, char := range password {
		switch {
		case unicode.IsUpper(char):
			hasUpper = true
		case unicode.IsLower(char):
			hasLower = true
		case unicode.IsDigit(char):
			hasDigit = true
		}
	}

	if !hasUpper {
		return fmt.Errorf("–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É")
	}
	if !hasLower {
		return fmt.Errorf("–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É")
	}
	if !hasDigit {
		return fmt.Errorf("–ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É")
	}

	return nil
}

// PasswordStrength –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
func PasswordStrength(password string) string {
	length := len(password)

	var strength int
	if length >= 12 {
		strength++
	}
	if length >= 16 {
		strength++
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
	hasUpper := regexp.MustCompile(`[A-Z]`).MatchString(password)
	hasLower := regexp.MustCompile(`[a-z]`).MatchString(password)
	hasDigit := regexp.MustCompile(`[0-9]`).MatchString(password)
	hasSpecial := regexp.MustCompile(`[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]`).MatchString(password)

	if hasUpper && hasLower {
		strength++
	}
	if hasDigit {
		strength++
	}
	if hasSpecial {
		strength++
	}

	switch {
	case strength >= 5:
		return "–û–ß–ï–ù–¨_–°–ò–õ–¨–ù–´–ô"
	case strength >= 3:
		return "–°–ò–õ–¨–ù–´–ô"
	case strength >= 2:
		return "–°–†–ï–î–ù–ò–ô"
	default:
		return "–°–õ–ê–ë–´–ô"
	}
}

// GenerateSecurePassword –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
func GenerateSecurePassword(length int) (string, error) {
	if length < 8 {
		return "", fmt.Errorf("–¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")
	}

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø–∞—Ä–æ–ª—å
	return "SecurePass123!", nil
}

// ValidateEmail –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email –∞–¥—Ä–µ—Å–∞
func ValidateEmail(email string) error {
	pattern := `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$`
	matched, err := regexp.MatchString(pattern, email)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email: %v", err)
	}
	if !matched {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞")
	}
	return nil
}

// ValidateAge –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞
func ValidateAge(age int) error {
	if age < 0 {
		return fmt.Errorf("–≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
	}
	if age > 150 {
		return fmt.Errorf("–≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 –ª–µ—Ç")
	}
	if age < 18 {
		return fmt.Errorf("—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑—Ä–∞—Å—Ç 18+")
	}
	return nil
}

// PrintTestResults –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–º —Å—Ç–∏–ª–µ
func PrintTestResults(functionName string, passed, total int) {
	fmt.Printf("\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø %s:\n", strings.ToUpper(functionName))
	fmt.Printf("   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: %d/%d —Ç–µ—Å—Ç–æ–≤\n", passed, total)
	fmt.Printf("   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: %.1f%%\n", float64(passed)*100/float64(total))

	if passed == total {
		fmt.Println("   üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
	} else {
		fmt.Printf("   ‚ö†Ô∏è  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: %d —Ç–µ—Å—Ç–æ–≤\n", total-passed)
	}
}

