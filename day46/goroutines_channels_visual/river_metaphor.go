package main

import (
	"fmt"
	"time"
)

// RiverMetaphorDemo –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ—á–Ω—É—é –º–µ—Ç–∞—Ñ–æ—Ä—É
func RiverMetaphorDemo() {
	fmt.Println("\nüåä –†–µ—á–Ω–∞—è –º–µ—Ç–∞—Ñ–æ—Ä–∞: –ì–æ—Ä—É—Ç–∏–Ω—ã –∫–∞–∫ —Ä–µ–∫–∏, –ö–∞–Ω–∞–ª—ã –∫–∞–∫ –∫–æ—Ä–∞–±–ª–∏–∫–∏")
	fmt.Println("==========================================================")
	
	fmt.Println(`
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:
- –ì–æ—Ä—É—Ç–∏–Ω—ã - —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–µ —Ä–µ–∫–∏, —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
- –ö–∞–Ω–∞–ª—ã - —ç—Ç–æ –∫–æ—Ä–∞–±–ª–∏–∫–∏, –ø–µ—Ä–µ–≤–æ–∑—è—â–∏–µ –≥—Ä—É–∑—ã –º–µ–∂–¥—É —Ä–µ–∫–∞–º–∏
- –î–∞–Ω–Ω—ã–µ - —ç—Ç–æ –≥—Ä—É–∑—ã –Ω–∞ –∫–æ—Ä–∞–±–ª–∏–∫–∞—Ö
	`)
	
	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã-—Ä–µ–∫–∏
	nile := make(chan string)    // –†–µ–∫–∞ –ù–∏–ª
	amazon := make(chan string)  // –†–µ–∫–∞ –ê–º–∞–∑–æ–Ω–∫–∞
	volga := make(chan string)   // –†–µ–∫–∞ –í–æ–ª–≥–∞
	
	fmt.Println("üåç –°–æ–∑–¥–∞–Ω–æ 3 —Ä–µ–∫–∏-–≥–æ—Ä—É—Ç–∏–Ω—ã:")
	fmt.Println("   - –†–µ–∫–∞ –ù–∏–ª (–∫–∞–Ω–∞–ª nile)")
	fmt.Println("   - –†–µ–∫–∞ –ê–º–∞–∑–æ–Ω–∫–∞ (–∫–∞–Ω–∞–ª amazon)") 
	fmt.Println("   - –†–µ–∫–∞ –í–æ–ª–≥–∞ (–∫–∞–Ω–∞–ª volga)")
	fmt.Println()
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã-—Ä–µ–∫–∏
	go riverFlow("–ù–∏–ª", nile, 1000)
	go riverFlow("–ê–º–∞–∑–æ–Ω–∫–∞", amazon, 1500)
	go riverFlow("–í–æ–ª–≥–∞", volga, 1200)
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–∞–±–ª–∏–∫–∏ –ø–æ —Ä–µ–∫–∞–º
	go sailShip("–ì—Ä—É–∑–æ–≤–∏–∫ —Å –∫–Ω–∏–≥–∞–º–∏", nile, amazon, 3)
	go sailShip("–Ø—â–∏–∫ —Å —è–±–ª–æ–∫–∞–º–∏", amazon, volga, 2)
	go sailShip("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏", volga, nile, 4)
	
	// –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	time.Sleep(10 * time.Second)
	
	fmt.Println("\nüéØ –í—ã–≤–æ–¥: –ì–æ—Ä—É—Ç–∏–Ω—ã –∫–∞–∫ —Ä–µ–∫–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç '–ø—É—Ç—å' –¥–ª—è –¥–∞–Ω–Ω—ã—Ö,")
	fmt.Println("          –∞ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –∫–æ—Ä–∞–±–ª–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –ø—É—Ç—è–º–∏")
}

func riverFlow(name string, river chan string, speed time.Duration) {
	for {
		select {
		case cargo := <-river:
			fmt.Printf("üì¶ –†–µ–∫–∞ %s –ø—Ä–∏–Ω—è–ª–∞ –≥—Ä—É–∑: %s\n", name, cargo)
			time.Sleep(speed * time.Millisecond)
			fmt.Printf("üåä –†–µ–∫–∞ %s –¥–æ—Å—Ç–∞–≤–∏–ª–∞ –≥—Ä—É–∑: %s\n", name, cargo)
		default:
			// –†–µ–∫–∞ —Ç–µ—á–µ—Ç –¥–∞–∂–µ –±–µ–∑ –≥—Ä—É–∑–æ–≤
			time.Sleep(speed * 2 * time.Millisecond)
			fmt.Printf("~ –†–µ–∫–∞ %s —Ç–µ—á–µ—Ç...\n", name)
		}
	}
}

func sailShip(cargo string, from, to chan string, trips int) {
	for i := 0; i < trips; i++ {
		fmt.Printf("‚õµ –ö–æ—Ä–∞–±–ª–∏–∫ —Å %s –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø–ª–∞–≤–∞–Ω–∏–µ\n", cargo)
		from <- cargo
		time.Sleep(500 * time.Millisecond)
		received := <-to
		fmt.Printf("üèÅ –ö–æ—Ä–∞–±–ª–∏–∫ —Å %s –∑–∞–≤–µ—Ä—à–∏–ª –ø–ª–∞–≤–∞–Ω–∏–µ\n", received)
		time.Sleep(800 * time.Millisecond)
	}
}