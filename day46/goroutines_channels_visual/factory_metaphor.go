package main

import (
	"fmt"
	"sync"
	"time"
)

// FactoryMetaphorDemo –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–∞–±—Ä–∏—á–Ω—É—é –º–µ—Ç–∞—Ñ–æ—Ä—É
func FactoryMetaphorDemo() {
	fmt.Println("\nüè≠ –§–∞–±—Ä–∏—á–Ω–∞—è –º–µ—Ç–∞—Ñ–æ—Ä–∞: –ì–æ—Ä—É—Ç–∏–Ω—ã –∫–∞–∫ —Ä–∞–±–æ—á–∏–µ, –ö–∞–Ω–∞–ª—ã –∫–∞–∫ –∫–æ–Ω–≤–µ–π–µ—Ä—ã")
	fmt.Println("===============================================================")
	
	fmt.Println(`
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:
- –ì–æ—Ä—É—Ç–∏–Ω—ã - —ç—Ç–æ —Ä–∞–±–æ—á–∏–µ –Ω–∞ —Ñ–∞–±—Ä–∏–∫–µ
- –ö–∞–Ω–∞–ª—ã - —ç—Ç–æ –∫–æ–Ω–≤–µ–π–µ—Ä–Ω—ã–µ –ª–µ–Ω—Ç—ã –º–µ–∂–¥—É —Ä–∞–±–æ—á–∏–º–∏
- –î–∞–Ω–Ω—ã–µ - —ç—Ç–æ –¥–µ—Ç–∞–ª–∏, moving –ø–æ –∫–æ–Ω–≤–µ–π–µ—Ä—É
	`)
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä–Ω—ã–µ –ª–µ–Ω—Ç—ã
	rawMaterials := make(chan string)
	assemblyLine := make(chan string)
	qualityControl := make(chan string)
	finishedProducts := make(chan string)
	
	fmt.Println("üîß –°–æ–∑–¥–∞–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞ —Å –∫–æ–Ω–≤–µ–π–µ—Ä–∞–º–∏:")
	fmt.Println("   - –°—ã—Ä—å–µ–≤–∞—è –ª–µ–Ω—Ç–∞ (rawMaterials)")
	fmt.Println("   - –°–±–æ—Ä–æ—á–Ω–∞—è –ª–∏–Ω–∏—è (assemblyLine)")
	fmt.Println("   - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ (qualityControl)")
	fmt.Println("   - –ì–æ—Ç–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è (finishedProducts)")
	fmt.Println()
	
	var wg sync.WaitGroup
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏—Ö-–≥–æ—Ä—É—Ç–∏–Ω
	wg.Add(4)
	go worker("–°–±–æ—Ä—â–∏–∫", rawMaterials, assemblyLine, &wg, 1000)
	go worker("–ú–æ–Ω—Ç–∞–∂–Ω–∏–∫", assemblyLine, qualityControl, &wg, 1500)
	go worker("–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä", qualityControl, finishedProducts, &wg, 1200)
	go qualitySupervisor(finishedProducts, &wg)
	
	// –ü–æ—Å—Ç–∞–≤–∫–∞ —Å—ã—Ä—å—è
	go func() {
		parts := []string{"–î–µ—Ç–∞–ª—å A", "–î–µ—Ç–∞–ª—å B", "–î–µ—Ç–∞–ª—å C", "–î–µ—Ç–∞–ª—å D"}
		for _, part := range parts {
			fmt.Printf("üì¶ –ü–æ—Å—Ç–∞–≤–∫–∞ —Å—ã—Ä—å—è: %s\n", part)
			rawMaterials <- part
			time.Sleep(800 * time.Millisecond)
		}
		close(rawMaterials)
	}()
	
	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	wg.Wait()
	
	fmt.Println("\nüéØ –í—ã–≤–æ–¥: –ì–æ—Ä—É—Ç–∏–Ω—ã –∫–∞–∫ —Ä–∞–±–æ—á–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ,")
	fmt.Println("          –∞ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –∫–æ–Ω–≤–µ–π–µ—Ä—ã –ø–µ—Ä–µ–º–µ—â–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
}

func worker(name string, in <-chan string, out chan<- string, wg *sync.WaitGroup, speed time.Duration) {
	defer wg.Done()
	
	for part := range in {
		fmt.Printf("üîß %s –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: %s\n", name, part)
		time.Sleep(speed * time.Millisecond)
		processed := fmt.Sprintf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è %s", part)
		out <- processed
		fmt.Printf("‚úÖ %s –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É: %s\n", name, processed)
	}
	close(out)
}

func qualitySupervisor(in <-chan string, wg *sync.WaitGroup) {
	defer wg.Done()
	
	for product := range in {
		fmt.Printf("üîç –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç: %s\n", product)
		time.Sleep(1000 * time.Millisecond)
		fmt.Printf("üèÜ –ü—Ä–æ–¥—É–∫—Ç –ø—Ä–æ—à–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—å: %s\n", product)
	}
}