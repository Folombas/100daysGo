package main

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

func main() {
	fmt.Println("üì¶ GO MOD VENDOR - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–ï–ù–î–û–†–ò–ù–ì–ê")
	fmt.Println("==========================================")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	wd, _ := os.Getwd()
	fmt.Printf("üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s\n\n", wd)

	// 1. –ß—Ç–æ —Ç–∞–∫–æ–µ –≤–µ–Ω–¥–æ—Ä–∏–Ω–≥
	fmt.Println("üéØ –ß–¢–û –¢–ê–ö–û–ï VENDOR –í GO:")
	concepts := []string{
		"‚úÖ vendor/ - –ø–∞–ø–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
		"‚úÖ go mod vendor - —Å–æ–∑–¥–∞–µ—Ç vendor –ø–∞–ø–∫—É",
		"‚úÖ -mod=vendor - —Ñ–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è vendor",
		"‚úÖ –ò–∑–æ–ª—è—Ü–∏—è - –ø—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤",
		"‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å - –≥–∞—Ä–∞–Ω—Ç–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π",
	}

	for _, concept := range concepts {
		fmt.Println("   ", concept)
	}
	fmt.Println()

	// 2. –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
	fmt.Println("üîß –°–û–ó–î–ê–ï–ú –î–ï–ú–û-–ü–†–û–ï–ö–¢ –° –ó–ê–í–ò–°–ò–ú–û–°–¢–Ø–ú–ò:")
	setupDemoProject()

	// 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ –≤–µ–Ω–¥–æ—Ä–∏–Ω–≥–∞
	fmt.Println("üìä –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –î–û VENDOR:")
	showDependencies()

	// 4. –í—ã–ø–æ–ª–Ω—è–µ–º go mod vendor
	fmt.Println("\nüèóÔ∏è  –í–´–ü–û–õ–ù–Ø–ï–ú GO MOD VENDOR:")
	runGoModVendor()

	// 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É vendor
	fmt.Println("\nüìÅ –°–¢–†–£–ö–¢–£–†–ê VENDOR –ü–ê–ü–ö–ò:")
	showVendorStructure()

	// 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏ —Å vendor
	fmt.Println("\nüî® –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ë–û–†–ö–ò –° VENDOR:")
	demonstrateVendorBuild()

	// 7. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	fmt.Println("\nüí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò:")
	scenarios := []struct {
		scenario string
		benefit  string
	}{
		{"CI/CD –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", "–°–±–æ—Ä–∫–∞ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω–µ—à–Ω–∏–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º"},
		{"–ì–∞—Ä–∞–Ω—Ç–∏—è –≤–µ—Ä—Å–∏–π", "–ò—Å–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–∞–∫–µ—Ç–æ–≤"},
		{"–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –±–∏–ª–¥—ã", "–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö"},
		{"–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –∫–æ–¥–æ–º"},
		{"–û—Ñ—Ñ–ª–∞–π–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–†–∞–±–æ—Ç–∞ –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"},
	}

	for i, scenario := range scenarios {
		fmt.Printf("   %d. %s - %s\n", i+1, scenario.scenario, scenario.benefit)
	}

	fmt.Println("\nüéØ –í–´–í–û–î–´:")
	fmt.Println("‚úÖ vendor/ - –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
	fmt.Println("‚úÖ –û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è enterprise –∏ security-critical –ø—Ä–æ–µ–∫—Ç–æ–≤")
	fmt.Println("‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å —Å–±–æ—Ä–æ–∫")
	fmt.Println("‚úÖ –¢—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏")
	fmt.Println("‚úÖ -mod=vendor –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–ø–∏–π")
}

func setupDemoProject() {
	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	mainContent := `package main

import (
	"fmt"
	"strings"
	"time"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"github.com/pkg/errors"
)

func main() {
	fmt.Println("üì¶ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º golang.org/x/text
	caser := cases.Title(language.Russian)
	title := caser.String("–ø—Ä–∏–≤–µ—Ç –º–∏—Ä")
	fmt.Printf("–ó–∞–≥–æ–ª–æ–≤–æ–∫: %s\n", title)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º github.com/pkg/errors
	err := processData()
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
	}

	fmt.Println("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
}

func processData() error {
	// –°–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫—É —Å stack trace
	return errors.Wrap(
		fmt.Errorf("–¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã"),
		"processData failed",
	)
}
`

	err := os.WriteFile("main.go", []byte(mainContent), 0644)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è main.go: %v\n", err)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	fmt.Println("   üì• –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
	exec.Command("go", "get", "golang.org/x/text").Run()
	exec.Command("go", "get", "github.com/pkg/errors").Run()

	fmt.Println("‚úÖ –î–µ–º–æ-–ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏")
}

func showDependencies() {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º go.mod
	data, _ := os.ReadFile("go.mod")
	fmt.Printf("go.mod:\n%s\n", string(data))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	cmd := exec.Command("go", "mod", "graph")
	output, _ := cmd.Output()

	fmt.Println("–ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
	lines := strings.Split(string(output), "\n")
	for i, line := range lines {
		if i < 5 && line != "" { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
			fmt.Printf("   %s\n", line)
		}
	}
	if len(lines) > 5 {
		fmt.Printf("   ... –∏ –µ—â—ë %d –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n", len(lines)-5)
	}
}

func runGoModVendor() {
	// –í—ã–ø–æ–ª–Ω—è–µ–º go mod vendor
	cmd := exec.Command("go", "mod", "vendor")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	err := cmd.Run()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è go mod vendor: %v\n", err)
		return
	}

	fmt.Println("‚úÖ vendor/ –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	vendorPath := "vendor"
	if info, err := os.Stat(vendorPath); err == nil && info.IsDir() {
		size := getDirSize(vendorPath)
		fmt.Printf("üìä –†–∞–∑–º–µ—Ä vendor –ø–∞–ø–∫–∏: %.2f MB\n", float64(size)/(1024*1024))
	}
}

func showVendorStructure() {
	vendorPath := "vendor"

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ vendor
	cmd := exec.Command("find", vendorPath, "-type", "d", "-maxdepth", "2")
	output, err := cmd.Output()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ vendor: %v\n", err)
		return
	}

	lines := strings.Split(string(output), "\n")
	fmt.Println("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ vendor/:")
	for i, line := range lines {
		if i < 10 && line != "" { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
			fmt.Printf("   %s\n", line)
		}
	}
	if len(lines) > 10 {
		fmt.Printf("   ... –∏ –µ—â—ë %d –ø–∞–ø–æ–∫/—Ñ–∞–π–ª–æ–≤\n", len(lines)-10)
	}
}

func demonstrateVendorBuild() {
	fmt.Println("\n   üî® –°–±–æ—Ä–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º vendor...")

	// –°–±–æ—Ä–∫–∞ —Å -mod=vendor
	buildCmd := exec.Command("go", "build", "-mod=vendor", "-o", "demo-app", ".")
	buildCmd.Stdout = os.Stdout
	buildCmd.Stderr = os.Stderr

	err := buildCmd.Run()
	if err != nil {
		fmt.Printf("   ‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ —Å vendor: %v\n", err)
		return
	}

	fmt.Println("   ‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å -mod=vendor!")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏–Ω–∞—Ä–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
	if _, err := os.Stat("demo-app"); err == nil {
		fmt.Println("   üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
		runCmd := exec.Command("./demo-app")
		runCmd.Stdout = os.Stdout
		runCmd.Stderr = os.Stderr
		runCmd.Run()

		// –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
		os.Remove("demo-app")
	}
}

func getDirSize(path string) int64 {
	var size int64
	filepath.Walk(path, func(_ string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			size += info.Size()
		}
		return nil
	})
	return size
}
