package main

import (
	"context"
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// FamilyTechSupport –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–º–µ—à–∞–Ω–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é –ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã—Ö –∏ –§–∏–∫—Å–∏–∫–æ–≤
type FamilyTechSupport struct {
	barboskiny []string
	fixiki     []string
	problems   []string
}

func main() {
	fmt.Println("üè† –°–ú–ï–®–ê–ù–ù–ê–Ø –í–°–ï–õ–ï–ù–ù–ê–Ø: –ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã –≤—Å—Ç—Ä–µ—á–∞—é—Ç –§–∏–∫—Å–∏–∫–æ–≤!")
	fmt.Println("=====================================================")

	family := &FamilyTechSupport{
		barboskiny: []string{
			"–ì–µ–Ω–∞ (–ø–∞–ø–∞)", "–ú–∞—Ä–∏—è (–º–∞–º–∞)", "–õ–∏–∑–∞", "–†–æ–∑–∞", "–î—Ä—É–∂–æ–∫",
		},
		fixiki: []string{
			"–°–∏–º–∫–∞", "–ù–æ–ª–∏–∫", "–§–∞–π–µ—Ä", "–ò–≥—Ä–µ–∫", "–í–µ—Ä—Ç–∞",
		},
		problems: []string{
			"—Å–ª–æ–º–∞–ª—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä",
			"–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç Wi-Fi",
			"–∑–∞–≤–∏—Å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
			"–Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä",
			"—Å–µ–ª –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä —É –Ω–æ—É—Ç–±—É–∫–∞",
			"–≥–ª—é—á–∏—Ç –ø–ª–∞–Ω—à–µ—Ç",
			"–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞",
			"—Å–ª–æ–º–∞–ª—Å—è —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫",
		},
	}

	fmt.Println("üì± –°–ò–¢–£–ê–¶–ò–Ø: –£ –ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã—Ö —Å–ª–æ–º–∞–ª–∞—Å—å –í–°–Ø —Ç–µ—Ö–Ω–∏–∫–∞ –≤ –¥–æ–º–µ!")
	fmt.Println("üÜò –ü–†–û–ë–õ–ï–ú–ê: –û–¥–∏–Ω –§–∏–∫—Å–∏–∫ –Ω–µ —É—Å–ø–µ–µ—Ç –≤—Å—ë –ø–æ—á–∏–Ω–∏—Ç—å!")
	fmt.Println("üéØ –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Fan-out –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á!")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
	problemsChannel := family.generateProblems(ctx)

	// –ó–∞–ø—É—Å–∫–∞–µ–º Fan-out –ø–∞—Ç—Ç–µ—Ä–Ω
	fmt.Println("\nüîß –ó–ê–ü–£–°–ö FAN-OUT –ü–ê–¢–¢–ï–†–ù–ê...")
	fmt.Printf("üé™ –§–∏–∫—Å–∏–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Ä–∞–±–æ—Ç—É! –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º %d –ø—Ä–æ–±–ª–µ–º –º–µ–∂–¥—É %d —Ñ–∏–∫—Å–∏–∫–∞–º–∏\n",
		len(family.problems), len(family.fixiki))

	// –ó–∞–ø—É—Å–∫–∞–µ–º worker-–æ–≤ (—Ñ–∏–∫—Å–∏–∫–æ–≤)
	results := family.fanOutWorkers(ctx, problemsChannel, 3) // 3 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö worker-–∞

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	family.collectResults(results)

	fmt.Println("\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´! –¢–µ—Ö–Ω–∏–∫–∞ —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
	fmt.Println("üèÜ –ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã –∏ –§–∏–∫—Å–∏–∫–∏ –ø—Ä–∞–∑–¥–Ω—É—é—Ç —É—Å–ø–µ—Ö!")
}

// generateProblems –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –ø—Ä–æ–±–ª–µ–º –æ—Ç –ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã—Ö
func (f *FamilyTechSupport) generateProblems(ctx context.Context) <-chan string {
	out := make(chan string)

	go func() {
		defer close(out)

		for _, problem := range f.problems {
			select {
			case <-ctx.Done():
				return
			case out <- problem:
				// –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º
				time.Sleep(500 * time.Millisecond)
				fmt.Printf("   üö® %s —Å–æ–æ–±—â–∞–µ—Ç: '%s'\n",
					f.barboskiny[rand.Intn(len(f.barboskiny))], problem)
			}
		}
	}()

	return out
}

// fanOutWorkers —Ä–µ–∞–ª–∏–∑—É–µ—Ç Fan-out –ø–∞—Ç—Ç–µ—Ä–Ω: –æ–¥–∏–Ω –∫–∞–Ω–∞–ª -> –Ω–µ—Å–∫–æ–ª—å–∫–æ worker-–æ–≤
func (f *FamilyTechSupport) fanOutWorkers(ctx context.Context, in <-chan string, numWorkers int) <-chan string {
	var wg sync.WaitGroup
	out := make(chan string)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ worker-–æ–≤
	for i := 0; i < numWorkers; i++ {
		wg.Add(1)
		go f.worker(ctx, &wg, in, out, f.fixiki[i])
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞–Ω–∞–ª, –∫–æ–≥–¥–∞ –≤—Å–µ worker-—ã –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
	go func() {
		wg.Wait()
		close(out)
	}()

	return out
}

// worker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã (—è–¥—Ä–æ Fan-out –ø–∞—Ç—Ç–µ—Ä–Ω–∞)
func (f *FamilyTechSupport) worker(ctx context.Context, wg *sync.WaitGroup, in <-chan string, out chan<- string, fixikName string) {
	defer wg.Done()

	fmt.Printf("   üîß %s –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É...\n", fixikName)

	for {
		select {
		case <-ctx.Done():
			fmt.Printf("   ‚è∞ %s: –í—Ä–µ–º—è –≤—ã—à–ª–æ, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É!\n", fixikName)
			return
		case problem, ok := <-in:
			if !ok {
				fmt.Printf("   ‚úÖ %s: –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É!\n", fixikName)
				return
			}

			// –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ—á–∏–Ω–∫—É
			repairTime := time.Duration(500+rand.Intn(1000)) * time.Millisecond
			time.Sleep(repairTime)

			result := fmt.Sprintf("%s –ø–æ—á–∏–Ω–∏–ª: %s (–∑–∞—Ç—Ä–∞—Ç–∏–ª %v)", fixikName, problem, repairTime)
			out <- result
		}
	}
}

// collectResults —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
func (f *FamilyTechSupport) collectResults(results <-chan string) {
	fmt.Println("\nüìä –û–¢–ß–Å–¢ –û –†–ê–ë–û–¢–ï –§–ò–ö–°–ò–ö–û–í:")
	fmt.Println("==========================")

	count := 0
	for result := range results {
		count++
		fmt.Printf("   ‚úÖ %s\n", result)
	}

	// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º f.problems –≤–º–µ—Å—Ç–æ family.problems
	fmt.Printf("\nüìà –ò–¢–û–ì–û: –†–µ—à–µ–Ω–æ %d –ø—Ä–æ–±–ª–µ–º –∏–∑ %d\n", count, len(f.problems))
}
