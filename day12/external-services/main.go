package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON
type Post struct {
	ID     int    `json:"id"`
	Title  string `json:"title"`
	Body   string `json:"body"`
	UserID int    `json:"userId"`
}

func main() {
	// –°–æ–∑–¥–∞–µ–º HTTP-–∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	client := &http.Client{
		Timeout: 10 * time.Second,
	}

	// 1. GET-–∑–∞–ø—Ä–æ—Å –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É API
	fmt.Println("‚ñ∂Ô∏è GET-–∑–∞–ø—Ä–æ—Å –∫ JSONPlaceholder")
	getExample(client)

	// 2. POST-–∑–∞–ø—Ä–æ—Å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
	fmt.Println("\n‚ñ∂Ô∏è POST-–∑–∞–ø—Ä–æ—Å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–∞")
	postExample(client)
}

func getExample(client *http.Client) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
	resp, err := client.Get("https://jsonplaceholder.typicode.com/posts/1")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
	if resp.StatusCode != http.StatusOK {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %s", resp.Status)
	}

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
	var post Post
	if err := json.Unmarshal(body, &post); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç #%d:\n", post.ID)
	fmt.Printf("–ó–∞–≥–æ–ª–æ–≤–æ–∫: %s\n", post.Title)
	fmt.Printf("–¢–µ–∫—Å—Ç: %s\n", post.Body)
}

func postExample(client *http.Client) {
	// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	newPost := Post{
		Title:  "–ú–æ–π –ø–æ—Å—Ç",
		Body:   "–°–æ–∑–¥–∞–Ω–æ –≤ Day12 –º–∞—Ä–∞—Ñ–æ–Ω–∞ Go!",
		UserID: 1,
	}

	// –ö–æ–¥–∏—Ä—É–µ–º –≤ JSON
	jsonData, err := json.Marshal(newPost)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
	resp, err := client.Post(
		"https://jsonplaceholder.typicode.com/posts",
		"application/json",
		bytes.NewBuffer(jsonData),
	)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
	if resp.StatusCode != http.StatusCreated {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %s", resp.Status)
	}

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var createdPost Post
	if err := json.Unmarshal(body, &createdPost); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	fmt.Printf("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç!\n")
	fmt.Printf("ID: %d\n", createdPost.ID)
	fmt.Printf("–°—Ç–∞—Ç—É—Å: %s\n", resp.Status)
}