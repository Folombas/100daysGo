package main

import (
	"fmt"
	"reflect"
)

// Haystack –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–æ–≥ —Å–µ–Ω–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
type Haystack struct {
	Items map[string]interface{}
}

// NewHaystack —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–æ–≥ —Å–µ–Ω–∞
func NewHaystack() *Haystack {
	return &Haystack{
		Items: make(map[string]interface{}),
	}
}

// AddItem –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ —Å—Ç–æ–≥ —Å–µ–Ω–∞
func (h *Haystack) AddItem(name string, item interface{}) {
	h.Items[name] = item
}

// FindNeedle –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–≥–æ–ª–∫—É –≤ —Å—Ç–æ–≥–µ —Å–µ–Ω–∞ (Comma-Ok –≤ –¥–µ–π—Å—Ç–≤–∏–∏!)
func (h *Haystack) FindNeedle() (string, bool) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ map
	if needle, ok := h.Items["needle"]; ok {
		if str, ok := needle.(string); ok {
			return str, true
		}
	}
	return "", false
}

// CountHayTypes –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–µ–Ω–∞
func (h *Haystack) CountHayTypes() {
	fmt.Println("üåæ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–µ–Ω–∞ –≤ —Å—Ç–æ–≥–µ:")

	hayTypes := map[string]int{
		"timothy":   150,
		"clover":    75,
		"alfalfa":   200,
		"brome":     50,
	}

	// Comma-Ok –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ map
	if count, exists := hayTypes["timothy"]; exists {
		fmt.Printf("‚úì –¢–∏–º–æ—Ñ–µ–µ–≤–∫–∞: %d –∫–≥\n", count)
	}

	if count, exists := hayTypes["rye"]; exists {
		fmt.Printf("‚úì –†–æ–∂—å: %d –∫–≥\n", count)
	} else {
		fmt.Println("‚úó –†–æ–∂—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–æ–≥–µ")
	}

	// –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ map —Å Comma-Ok
	totalWeight := 0
	for hayType, weight := range hayTypes {
		if weight > 0 {
			fmt.Printf("  - %s: %d –∫–≥\n", hayType, weight)
			totalWeight += weight
		}
	}
	fmt.Printf("üìä –û–±—â–∏–π –≤–µ—Å —Å–µ–Ω–∞: %d –∫–≥\n\n", totalWeight)
}

// FarmTools –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ñ–µ—Ä–º–µ—Ä–∞
type FarmTools struct {
	Tools map[string]interface{}
}

// CheckToolSafety –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
func CheckToolSafety(tools map[string]interface{}) {
	fmt.Println("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")

	// Comma-Ok –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ type assertion
	for name, tool := range tools {
		if sharpness, ok := tool.(int); ok {
			if sharpness > 5 {
				fmt.Printf("‚ö†Ô∏è  %s: –æ—Å—Ç—Ä–æ—Ç–∞ %d/10 (–æ–ø–∞—Å–Ω–æ!)\n", name, sharpness)
			} else {
				fmt.Printf("‚úì %s: –æ—Å—Ç—Ä–æ—Ç–∞ %d/10 (–±–µ–∑–æ–ø–∞—Å–Ω–æ)\n", name, sharpness)
			}
		} else if isDangerous, ok := tool.(bool); ok {
			if isDangerous {
				fmt.Printf("‚ö†Ô∏è  %s: –æ–ø–∞—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n", name)
			} else {
				fmt.Printf("‚úì %s: –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n", name)
			}
		} else {
			fmt.Printf("? %s: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n", name)
		}
	}
	fmt.Println()
}

// AnimalCare –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
type Animal interface {
	MakeSound() string
}

type Cow struct{ Name string }
type Chicken struct{ Name string }

func (c Cow) MakeSound() string     { return "–ú—É—É—É—É!" }
func (c Chicken) MakeSound() string { return "–ö—É–¥-–∫—É–¥–∞!" }

func HandleAnimal(animal interface{}) {
	// Comma-Ok –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
	if cow, ok := animal.(Cow); ok {
		fmt.Printf("üêÑ %s –≥–æ–≤–æ—Ä–∏—Ç: %s\n", cow.Name, cow.MakeSound())
	} else if chicken, ok := animal.(Chicken); ok {
		fmt.Printf("üêî %s –≥–æ–≤–æ—Ä–∏—Ç: %s\n", chicken.Name, chicken.MakeSound())
	} else {
		fmt.Printf("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: %v\n", animal)
	}
}

// ChannelOperations –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç Comma-Ok —Å –∫–∞–Ω–∞–ª–∞–º–∏
func DemonstrateChannels() {
	fmt.Println("üì° –†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏ (—Å–µ–Ω–æ–∫–æ—Å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã):")

	hayReady := make(chan string, 2)
	hayReady <- "–ü–µ—Ä–≤–∞—è –ø–∞—Ä—Ç–∏—è —Å–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞!"
	hayReady <- "–í—Ç–æ—Ä–∞—è –ø–∞—Ä—Ç–∏—è —Å–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞!"
	close(hayReady)

	for {
		if message, ok := <-hayReady; ok {
			fmt.Printf("  üì¢ %s\n", message)
		} else {
			fmt.Println("  ‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–µ–Ω–µ –ø–æ–ª—É—á–µ–Ω—ã!")
			break
		}
	}
	fmt.Println()
}

// AdvancedTypeChecking –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤
func AdvancedTypeChecking() {
	fmt.Println("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å –ø–æ–º–æ—â—å—é reflect:")

	items := []interface{}{
		"–≤–∏–ª—ã",
		42,
		3.14,
		Cow{Name: "–ë—É—Ä—ë–Ω–∫–∞"},
		true,
		[]string{"—Å–µ–Ω–æ–≤–æ—Ä–æ—à–∏–ª–∫–∞", "–≥—Ä–∞–±–ª–∏"},
	}

	for i, item := range items {
		fmt.Printf("  %d. ", i+1)

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º reflect –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
		switch v := item.(type) {
		case string:
			fmt.Printf("–°—Ç—Ä–æ–∫–∞: %s\n", v)
		case int:
			fmt.Printf("–¶–µ–ª–æ–µ —á–∏—Å–ª–æ: %d\n", v)
		case float64:
			fmt.Printf("–î—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ: %.2f\n", v)
		case Cow:
			fmt.Printf("–ñ–∏–≤–æ—Ç–Ω–æ–µ: %s\n", v.Name)
		case bool:
			fmt.Printf("–ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ: %t\n", v)
		default:
			fmt.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: %v\n", reflect.TypeOf(v))
		}
	}
	fmt.Println()
}

func main() {
	fmt.Println("üöú Day 73: Comma-Ok Idiom –≤ —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö!")
	fmt.Println("================================================")

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–≥ —Å–µ–Ω–∞
	haystack := NewHaystack()
	haystack.AddItem("needle", "–∑–æ–ª–æ—Ç–∞—è –∏–≥–æ–ª–∫–∞")
	haystack.AddItem("hay", "—Å–≤–µ–∂–µ–µ —Å–µ–Ω–æ")
	haystack.AddItem("tools", map[string]int{"–≤–∏–ª—ã": 3, "–≥—Ä–∞–±–ª–∏": 2})

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ü–æ–∏—Å–∫ –≤ map
	fmt.Println("1. üîé –ò—â–µ–º –∏–≥–æ–ª–∫—É –≤ —Å—Ç–æ–≥–µ —Å–µ–Ω–∞:")
	if needle, found := haystack.FindNeedle(); found {
		fmt.Printf("   üéâ –ù–∞–π–¥–µ–Ω–∞: %s\n\n", needle)
	} else {
		fmt.Println("   üòû –ò–≥–æ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Å–µ–Ω–∞
	haystack.CountHayTypes()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	tools := map[string]interface{}{
		"–≤–∏–ª—ã":       7,
		"–≥—Ä–∞–±–ª–∏":     3,
		"—Ç—Ä–∞–∫—Ç–æ—Ä":    true,
		"—Å–µ–Ω–æ–∫–æ—Å–∏–ª–∫–∞": 9,
	}
	CheckToolSafety(tools)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –†–∞–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
	fmt.Println("4. üêÆ –†–∞–±–æ—Ç–∞ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
	animals := []interface{}{
		Cow{Name: "–ó–æ—Ä—å–∫–∞"},
		Chicken{Name: "–†—è–±–∞"},
		"–Ω–µ –∂–∏–≤–æ—Ç–Ω–æ–µ",
		42,
	}

	for _, animal := range animals {
		HandleAnimal(animal)
	}
	fmt.Println()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: –ö–∞–Ω–∞–ª—ã
	DemonstrateChannels()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 6: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
	AdvancedTypeChecking()

	// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –°–∏–º—É–ª—è—Ü–∏—è —Ñ–µ—Ä–º–µ—Ä—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã
	fmt.Println("üèÅ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è")
	SimulateWorkDay()
}

// SimulateWorkDay –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Comma-Ok
func SimulateWorkDay() {
	workLog := map[string]interface{}{
		"hours_worked": 8,
		"hay_bales":    150,
		"weather":      "sunny",
		"equipment_used": []string{"—Ç—Ä–∞–∫—Ç–æ—Ä", "—Å–µ–Ω–æ–≤–æ—Ä–æ—à–∏–ª–∫–∞", "–ø—Ä–µ—Å—Å-–ø–æ–¥–±–æ—Ä—â–∏–∫"},
		"animals_fed":  true,
	}

	fmt.Println("üìù –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ:")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ª–æ–≥–µ
	if hours, ok := workLog["hours_worked"].(int); ok {
		fmt.Printf("   ‚è∞ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤: %d\n", hours)
	}

	if bales, ok := workLog["hay_bales"].(int); ok {
		fmt.Printf("   üåæ –°–æ–±—Ä–∞–Ω–æ —Ç—é–∫–æ–≤ —Å–µ–Ω–∞: %d\n", bales)
	}

	if weather, ok := workLog["weather"].(string); ok {
		fmt.Printf("   üå§Ô∏è  –ü–æ–≥–æ–¥–∞: %s\n", weather)
	}

	if equipment, ok := workLog["equipment_used"].([]string); ok {
		fmt.Printf("   üõ†Ô∏è  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: %v\n", equipment)
	}

	if fed, ok := workLog["animals_fed"].(bool); ok && fed {
		fmt.Println("   üêÆ –ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞–∫–æ—Ä–º–ª–µ–Ω—ã: –¥–∞")
	}

	fmt.Println("\nüéâ –û—Ç–ª–∏—á–Ω–æ! Comma-Ok Idiom –æ—Å–≤–æ–µ–Ω –≤ –ø–æ–ª–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö!")
}
