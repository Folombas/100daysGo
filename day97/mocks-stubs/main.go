package main

import (
    "fmt"
    "log"
)

func main() {
    fmt.Println("üîÑ –°–ò–ú–£–õ–Ø–¢–û–† –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ò –° –ú–û–ö–ê–ú–ò –ò –°–¢–ê–ë–ê–ú–ò")
    fmt.Println("=============================================")
    fmt.Println()

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    fmt.Println("üéØ –î–ï–ú–û: –†–ê–ë–û–¢–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –°–ï–†–í–ò–°–ê–ú–ò")
    realPaymentService := NewRealPaymentService("real_api_key")
    realUserRepo := NewRealUserRepository()

    realService := NewOrderService(realPaymentService, realUserRepo)

    paymentID, err := realService.ProcessOrder("user_123", 100.0)
    if err != nil {
        log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: %v", err)
    } else {
        fmt.Printf("‚úÖ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. ID –ø–ª–∞—Ç–µ–∂–∞: %s\n", paymentID)
    }

    fmt.Println()

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞–±–∞–º–∏
    fmt.Println("üéØ –î–ï–ú–û: –†–ê–ë–û–¢–ê –°–û –°–¢–ê–ë–ê–ú–ò")
    paymentStub := &StubPaymentService{
        ProcessPaymentFunc: func(amount float64, currency string) (string, error) {
            return "stub_payment_456", nil
        },
    }

    userRepoStub := &StubUserRepository{
        FindByIDFunc: func(id string) (*User, error) {
            return &User{
                ID:      id,
                Name:    "–ì–æ—à–∞ (—Å—Ç–∞–±)",
                Email:   "gosha-stub@example.com",
                Balance: 500.0,
            }, nil
        },
    }

    stubService := NewOrderService(paymentStub, userRepoStub)

    stubPaymentID, err := stubService.ProcessOrder("user_456", 50.0)
    if err != nil {
        log.Printf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞–±): %v", err)
    } else {
        fmt.Printf("‚úÖ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ —Å—Ç–∞–±. ID –ø–ª–∞—Ç–µ–∂–∞: %s\n", stubPaymentID)
    }

    fmt.Println()
    fmt.Println("üí° –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í:")
    fmt.Println("go test -v")
    fmt.Println()
    fmt.Println("üìö –ß–¢–û –ò–ó–£–ß–ò–õ–ò:")
    fmt.Println("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏")
    fmt.Println("‚Ä¢ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫–æ–≤ —Å testify/mock")
    fmt.Println("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")
    fmt.Println("‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ unit-—Ç–µ—Å—Ç–æ–≤ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    fmt.Println("‚Ä¢ Table-driven tests —Å –º–æ–∫–∞–º–∏")
    fmt.Println()
    fmt.Println("üöÄ –ö–∞–∂–¥—ã–π –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –º–æ–∫–∞–º–∏ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É Go-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!")
}
