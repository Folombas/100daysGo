package main

import (
	"fmt"
	"time"
)

type LanguagePet struct {
	Name     string
	CareTime time.Duration
	Complexity int
	JobDemand  int
}

func main() {
	fmt.Println("üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!")
	fmt.Println("================================================")

	pets := []LanguagePet{
		{"üêç –ü–∏—Ç–æ–Ω Python", 4 * time.Hour, 8, 7},
		{"üêò –°–ª–æ–Ω–∏–∫ PHP", 3 * time.Hour, 6, 5},
		{"ü¶Ä –ö—Ä–∞–±–∏–∫ Rust", 5 * time.Hour, 9, 8},
		{"üê´ –°—Ç–∞—Ä—ã–π –≤–µ—Ä–±–ª—é–¥ Perl", 4 * time.Hour, 7, 3},
		{"üêπ –ì–æ—Ñ–µ—Ä Golang", 2 * time.Hour, 4, 9},
	}

	fmt.Println("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã-—è–∑—ã–∫–∏:")
	for i, pet := range pets {
		fmt.Printf("%d. %s\n", i+1, pet.Name)
	}

	fmt.Println("\nü§î –ü–æ—á–µ–º—É –ì–æ—à–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –ì–æ—Ñ–µ—Ä–∞?")
	fmt.Println("================================================")

	gopher := pets[4]
	
	reasons := []string{
		"üéØ **–§–æ–∫—É—Å –≤–º–µ—Å—Ç–æ –º–µ—Ç–∞–Ω–∏–π**: Go –∏–º–µ–µ—Ç —á—ë—Ç–∫—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –º–∏–Ω–∏–º—É–º —Å–ø–æ—Å–æ–±–æ–≤ —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ",
		"‚ö° **–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è**: –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –¥–æ—Å—Ç–∏—á—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
		"üèÉ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å",
		"üíº **–í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç—å**: –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞ —Å –¥–æ—Å—Ç–æ–π–Ω—ã–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏",
		"üß† **–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º—Ñ–æ—Ä—Ç**: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∏ —è–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–Ω–∏–∂–∞—é—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å",
	}

	for i, reason := range reasons {
		fmt.Printf("%d. %s\n", i+1, reason)
	}

	fmt.Println("\nüìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
	fmt.Println("–Ø–∑—ã–∫       | –í—Ä–µ–º—è —É—Ö–æ–¥–∞ | –°–ª–æ–∂–Ω–æ—Å—Ç—å | –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç—å")
	fmt.Println("-----------|-------------|-----------|-----------------")
	for _, pet := range pets {
		fmt.Printf("%-10s | %-11v | %-9d | %-15d\n", 
			pet.Name, pet.CareTime, pet.Complexity, pet.JobDemand)
	}

	fmt.Println("\nüéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ì–æ—à–∏:")
	fmt.Printf("–í—ã–±—Ä–∞–≤ %s, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å:\n", gopher.Name)
	fmt.Printf("- –í—Å–µ–≥–æ %v –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –≤–º–µ—Å—Ç–æ —Ä–∞—Å–ø—ã–ª–µ–Ω–∏—è\n", gopher.CareTime)
	fmt.Printf("- –°–ª–æ–∂–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ %d/10 –≤–º–µ—Å—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏\n", gopher.Complexity)
	fmt.Printf("- –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ—Å—Ç—å %d/10 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n", gopher.JobDemand)

	fmt.Println("\n‚ú® –ì–æ—à–∞, —Ç–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ñ–æ–∫—É—Å–∞ –Ω–∞ Go!")
	fmt.Println("–î–æ–≤–µ–¥–∏ —É—Ö–æ–¥ –∑–∞ –≥–æ—Ñ–µ—Ä–æ–º –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–º–∞ –∏ —Ä–∞–±–æ—Ç–∞ –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å!")
}
