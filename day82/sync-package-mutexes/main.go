package main

import (
	"fmt"
	"sync"
	"time"
)

// DiamondMine - —à–∞—Ö—Ç–∞ –∞–ª–º–∞–∑–æ–≤, –≥–¥–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≥–Ω–æ–º—ã
type DiamondMine struct {
	diamonds    int
	mutex       sync.Mutex
	gnomeNames  []string
}

// GnomeWorker - –≥–Ω–æ–º-—Ä–∞–±–æ—Ç–Ω–∏–∫
type GnomeWorker struct {
	name   string
	speed  time.Duration
	mine   *DiamondMine
	wg     *sync.WaitGroup
}

func main() {
	fmt.Println("üö™ –ú—ã —Å –ü–∞—Ö–æ–º—ã—á–µ–º –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª –∏ –æ–∫–∞–∑–∞–ª–∏—Å—å...")
	fmt.Println("üíé –í –ê–õ–ú–ê–ó–ù–û–ô –®–ê–•–¢–ï –°–ï–ú–ò –ì–ù–û–ú–û–í!")
	fmt.Println("================================================")

	// –°–æ–∑–¥–∞–µ–º –∞–ª–º–∞–∑–Ω—É—é —à–∞—Ö—Ç—É
	mine := &DiamondMine{
		diamonds: 0,
		gnomeNames: []string{
			"–£–º–Ω–∏–∫", "–í–æ—Ä—á—É–Ω", "–í–µ—Å–µ–ª—å—á–∞–∫", "–°–æ–Ω—è",
			"–°–∫—Ä–æ–º–Ω–∏–∫", "–ß–∏—Ö—É–Ω", "–ü—Ä–æ—Å—Ç–∞—á–æ–∫",
		},
	}

	var wg sync.WaitGroup

	fmt.Println("üë∑ –ì–Ω–æ–º—ã –Ω–∞—á–∏–Ω–∞—é—Ç —Ä–∞–±–æ—Ç—É –≤ —à–∞—Ö—Ç–µ...")
	fmt.Println("‚ö†Ô∏è  –ù–æ —á—Ç–æ —ç—Ç–æ? –ë–µ–∑ –º—å—é—Ç–µ–∫—Å–æ–≤ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ü–£–¢–ê–ù–ò–¶–ê!")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–Ω–æ–º–æ–≤ –ë–ï–ó —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã)
	startTime := time.Now()
	runWithoutMutex(mine, &wg)

	fmt.Printf("\nüí• –†–ï–ó–£–õ–¨–¢–ê–¢ –ë–ï–ó –ú–¨–Æ–¢–ï–ö–°–û–í: %d –∞–ª–º–∞–∑–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 70)\n", mine.diamonds)
	fmt.Printf("‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %v\n", time.Since(startTime))

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
	mine.diamonds = 0

	fmt.Println("\nüîß –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–¨–Æ–¢–ï–ö–°–´ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–Ω–æ–º–æ–≤ –° —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
	startTime = time.Now()
	runWithMutex(mine, &wg)

	fmt.Printf("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –° –ú–¨–Æ–¢–ï–ö–°–ê–ú–ò: %d –∞–ª–º–∞–∑–æ–≤ (–í–°–Å –í–ï–†–ù–û!)\n", mine.diamonds)
	fmt.Printf("‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %v\n", time.Since(startTime))

	fmt.Println("\nüéâ –õ–µ—à–∏–π –≤–ø–µ—á–∞—Ç–ª–µ–Ω! –û–Ω –≥–æ–≤–æ—Ä–∏—Ç:")
	fmt.Println("¬´–í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π –º–∞–≥–∏–µ–π - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π!¬ª")
	fmt.Println("üèÜ –¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ —Å–∏–ª—É sync.Mutex!")
}

// runWithoutMutex - –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã)
func runWithoutMutex(mine *DiamondMine, wg *sync.WaitGroup) {
	for i, name := range mine.gnomeNames {
		wg.Add(1)
		gnome := &GnomeWorker{
			name:  name,
			speed: time.Duration(100*(i+1)) * time.Millisecond,
			mine:  mine,
			wg:    wg,
		}
		go gnome.workWithoutMutex()
	}
	wg.Wait()
}

// runWithMutex - –∑–∞–ø—É—Å–∫ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
func runWithMutex(mine *DiamondMine, wg *sync.WaitGroup) {
	for i, name := range mine.gnomeNames {
		wg.Add(1)
		gnome := &GnomeWorker{
			name:  name,
			speed: time.Duration(100*(i+1)) * time.Millisecond,
			mine:  mine,
			wg:    wg,
		}
		go gnome.workWithMutex()
	}
	wg.Wait()
}

// workWithoutMutex - —Ä–∞–±–æ—Ç–∞ –≥–Ω–æ–º–∞ –ë–ï–ó —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
func (g *GnomeWorker) workWithoutMutex() {
	defer g.wg.Done()

	for i := 0; i < 10; i++ {
		// –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
		time.Sleep(g.speed)

		// ‚ùå –û–ü–ê–°–ù–û: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –∑–∞—â–∏—Ç—ã!
		current := g.mine.diamonds
		time.Sleep(10 * time.Millisecond) // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
		g.mine.diamonds = current + 1

		fmt.Printf("%s –¥–æ–±—ã–ª –∞–ª–º–∞–∑! –í—Å–µ–≥–æ: %d\n", g.name, g.mine.diamonds)
	}
}

// workWithMutex - —Ä–∞–±–æ—Ç–∞ –≥–Ω–æ–º–∞ –° —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
func (g *GnomeWorker) workWithMutex() {
	defer g.wg.Done()

	for i := 0; i < 10; i++ {
		// –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
		time.Sleep(g.speed)

		// ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–æ—Å—Ç—É–ø–∞
		g.mine.mutex.Lock()
		g.mine.diamonds++
		current := g.mine.diamonds
		g.mine.mutex.Unlock()

		fmt.Printf("%s –¥–æ–±—ã–ª –∞–ª–º–∞–∑! –í—Å–µ–≥–æ: %d\n", g.name, current)
	}
}
