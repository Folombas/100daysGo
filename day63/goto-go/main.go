package main

import (
	"fmt"
	"os"
)

// üö∑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ë–ê–ó–û–í–û–ì–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è goto
func demonstrateBasicGoto() {
	fmt.Println("\nüéØ 1. –ë–ê–ó–û–í–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï GOTO")
	fmt.Println("===============================")

	fmt.Println("üö¶ –ù–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏...")

	goto skipCode // üé™ –ü–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –±–ª–æ–∫ –∫–æ–¥–∞

	// –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω
	fmt.Println("‚ùå –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–≤–∏–¥–∏–º!")

skipCode:
	fmt.Println("‚úÖ –ü–µ—Ä–µ–ø—Ä—ã–≥–Ω—É–ª–∏ —Å –ø–æ–º–æ—â—å—é goto!")
}

// ‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ü–õ–û–•–û–ì–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è goto (—Å–ø–∞–≥–µ—Ç—Ç–∏-–∫–æ–¥)
func demonstrateSpaghettiGoto() {
	fmt.Println("\nüçù 2. –ü–õ–û–•–û–ô –ü–†–ò–ú–ï–†: SPAGHETTI-–ö–û–î –° GOTO")
	fmt.Println("========================================")

	i := 0

start:
	fmt.Printf("üîÅ –ò—Ç–µ—Ä–∞—Ü–∏—è %d\n", i)
	i++

	if i < 3 {
		goto middle
	}

	if i == 3 {
		goto end
	}

middle:
	fmt.Println("üîÑ –í —Å–µ—Ä–µ–¥–∏–Ω–µ...")
	goto start

end:
	fmt.Println("üèÅ –ö–æ–Ω–µ—Ü —Å–ø–∞–≥–µ—Ç—Ç–∏-–∫–æ–¥–∞!")
}

// ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è goto (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫)
func demonstrateGoodGoto() error {
	fmt.Println("\n‚úÖ 3. –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï: –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö")
	fmt.Println("==============================================")

	file1, err := os.Create("temp1.txt")
	if err != nil {
		return err
	}

	file2, err := os.Create("temp2.txt")
	if err != nil {
		file1.Close() // ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –æ—á–∏—Å—Ç–∫–∏
		return err
	}

	file3, err := os.Create("temp3.txt")
	if err != nil {
		file1.Close() // ‚ùå –ï—â—ë –±–æ–ª—å—à–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
		file2.Close()
		return err
	}

	// –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏...
	fmt.Println("üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

	// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
	file1.Close()
	file2.Close()
	file3.Close()

	return nil
}

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å goto –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
func demonstrateGoodGotoImproved() error {
	fmt.Println("\nüé™ 4. –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° GOTO")
	fmt.Println("==============================")

	var err error
	var file1, file2, file3 *os.File

	file1, err = os.Create("temp1.txt")
	if err != nil {
		return err
	}

	file2, err = os.Create("temp2.txt")
	if err != nil {
		goto cleanupFile1
	}

	file3, err = os.Create("temp3.txt")
	if err != nil {
		goto cleanupFiles
	}

	fmt.Println("üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

	file3.Close()
	file2.Close()
	file1.Close()
	return nil

cleanupFiles:
	if file2 != nil {
		file2.Close()
	}
cleanupFile1:
	if file1 != nil {
		file1.Close()
	}
	return err
}

// ‚úÖ –°–û–í–†–ï–ú–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å defer (–ª—É—á—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
func demonstrateModernApproach() error {
	fmt.Println("\nüåü 5. –°–û–í–†–ï–ú–ï–ù–ù–´–ô –ü–û–î–•–û–î –° DEFER")
	fmt.Println("===============================")

	file1, err := os.Create("temp1.txt")
	if err != nil {
		return err
	}
	defer file1.Close()

	file2, err := os.Create("temp2.txt")
	if err != nil {
		return err
	}
	defer file2.Close()

	file3, err := os.Create("temp3.txt")
	if err != nil {
		return err
	}
	defer file3.Close()

	fmt.Println("üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º defer!")
	return nil
}

// üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´ GOTO —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ Go
func demonstrateAlternatives() {
	fmt.Println("\nüîÑ 6. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´ GOTO –í –°–û–í–†–ï–ú–ï–ù–ù–û–ú GO")
	fmt.Println("=======================================")

	fmt.Println("üéØ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ defer")
	if err := demonstrateModernApproach(); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
	}

	fmt.Println("\nüéØ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 2: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏")
	if err := createAndProcessFiles(); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞:", err)
	} else {
		fmt.Println("‚úÖ –§–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
	}
}

func createAndProcessFiles() error {
	file1, err := os.Create("temp1.txt")
	if err != nil {
		return err
	}
	defer file1.Close()

	file2, err := os.Create("temp2.txt")
	if err != nil {
		return err
	}
	defer file2.Close()

	return nil
}

func main() {
	fmt.Println("üé™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø OPERATORA GOTO –í GO!")
	fmt.Println("====================================")

	demonstrateBasicGoto()
	demonstrateSpaghettiGoto()

	_ = demonstrateGoodGoto()
	_ = demonstrateGoodGotoImproved()
	_ = demonstrateModernApproach()

	demonstrateAlternatives()

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	cleanupTempFiles()

	fmt.Println("\nüéØ –í–´–í–û–î–´: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ defer –≤–º–µ—Å—Ç–æ goto –≤ 99% —Å–ª—É—á–∞–µ–≤!")
}

func cleanupTempFiles() {
	files := []string{"temp1.txt", "temp2.txt", "temp3.txt"}
	for _, file := range files {
		os.Remove(file)
	}
}
