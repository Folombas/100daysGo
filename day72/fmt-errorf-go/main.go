package main

import (
	"errors"
	"fmt"
	"os"
	"strings"
)

// FarmError –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
type FarmError struct {
	Operation string
	Cause     string
	FieldSize int
}

func (e *FarmError) Error() string {
	return fmt.Sprintf("–§–µ—Ä–º–µ—Ä—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s (–ø—Ä–∏—á–∏–Ω–∞: %s, —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è: %d–º¬≤)",
		e.Operation, e.Cause, e.FieldSize)
}

// –¢—Ä–∞–Ω—à–µ–π–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
func digTrench(length, depth int) error {
	if length <= 0 {
		return fmt.Errorf("–∫–æ–ø–∞–Ω–∏–µ —Ç—Ä–∞–Ω—à–µ–∏: –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ %d–º - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π", length)
	}
	if depth > 2 {
		return fmt.Errorf("–∫–æ–ø–∞–Ω–∏–µ —Ç—Ä–∞–Ω—à–µ–∏: –≥–ª—É–±–∏–Ω–∞ %d–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è - –º–∞–∫—Å–∏–º—É–º 2–º", depth)
	}
	return nil
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–∂–∞—è
func processPotatoes(area int) error {
	if area > 50 {
		return &FarmError{
			Operation: "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è",
			Cause:     "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –ø–ª–æ—â–∞–¥—å",
			FieldSize: area,
		}
	}

	if area < 10 {
		return fmt.Errorf("–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è: –ø–ª–æ—â–∞–¥—å %d–º¬≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã", area)
	}

	return nil
}

// –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ñ–µ—Ä–º–µ—Ä—Å–∫–∞—è –∑–∞–¥–∞—á–∞
func performFarmTasks() error {
	// –ó–∞–¥–∞—á–∞ 1: –ö–æ–ø–∞–Ω–∏–µ —Ç—Ä–∞–Ω—à–µ–∏
	if err := digTrench(-5, 1); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç—Ä–∞–Ω—à–µ–µ: %w", err)
	}

	// –ó–∞–¥–∞—á–∞ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è
	if err := processPotatoes(100); err != nil {
		return fmt.Errorf("–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π: %w", err)
	}

	return nil
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ fmt.Errorf
func demonstrateErrorFeatures() {
	fmt.Println("üöú –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fmt.Errorf –≤ —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö!")
	fmt.Println(strings.Repeat("=", 50))

	// –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fmt.Errorf
	err1 := fmt.Errorf("–ª–æ–ø–∞—Ç–∞ —Å–ª–æ–º–∞–ª–∞—Å—å –≤–æ –≤—Ä–µ–º—è –∫–æ–ø–∫–∏")
	fmt.Printf("1. –ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞: %v\n", err1)

	// –û—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	trenchLength := 150
	err2 := fmt.Errorf("—Ç—Ä–∞–Ω—à–µ—è –¥–ª–∏–Ω–æ–π %d–º –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É 100–º", trenchLength)
	fmt.Printf("2. –û—à–∏–±–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: %v\n", err2)

	// –û–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—à–∏–±–∫–∏
	originalErr := errors.New("–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–æ–ª—è—Ä–∫–∞ –≤ —Ç—Ä–∞–∫—Ç–æ—Ä–µ")
	wrappedErr := fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å–ø–∞—Ö–∞—Ç—å –ø–æ–ª–µ: %w", originalErr)
	fmt.Printf("3. –û–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: %v\n", wrappedErr)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–µ—Ä–Ω—É—Ç–æ–π –æ—à–∏–±–∫–∏
	if errors.Is(wrappedErr, originalErr) {
		fmt.Println("4. ‚úì –û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–µ—Ä–Ω—É—Ç–∞ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
	}

	// –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
	farmErr := &FarmError{
		Operation: "–ø–æ–ª–∏–≤ –≥—Ä—è–¥–æ–∫",
		Cause:     "—Å–ª–æ–º–∞–ª—Å—è —à–ª–∞–Ω–≥",
		FieldSize: 25,
	}
	fmt.Printf("5. –ö–∞—Å—Ç–æ–º–Ω–∞—è –æ—à–∏–±–∫–∞: %v\n", farmErr)

	fmt.Println(strings.Repeat("=", 50))
}

func main() {
	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π fmt.Errorf
	demonstrateErrorFeatures()

	// –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á
	fmt.Println("\nüèóÔ∏è –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á –Ω–∞ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–º –ø–æ–ª–µ:")

	if err := performFarmTasks(); err != nil {
		fmt.Printf("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n%v\n\n", err)

		// –†–∞–∑–±–æ—Ä —Ü–µ–ø–æ—á–∫–∏ –æ—à–∏–±–æ–∫
		fmt.Println("üîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–ø–æ—á–∫–∏ –æ—à–∏–±–æ–∫:")
		var farmErr *FarmError
		if errors.As(err, &farmErr) {
			fmt.Printf("–ù–∞–π–¥–µ–Ω–∞ —Ñ–µ—Ä–º–µ—Ä—Å–∫–∞—è –æ—à–∏–±–∫–∞: %v\n", farmErr)
		}

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
		fmt.Printf("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: %+v\n", err)
	} else {
		fmt.Println("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
	}

	// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä —Å —Ñ–∞–π–ª–∞–º–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
	fmt.Println("\nüíæ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä (—Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏):")
	if err := simulateFileOperation(); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: %v\n", err)
	}
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
func simulateFileOperation() error {
	// –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
	fileName := "–ø–ª–∞–Ω_–ø–æ—Å–∞–¥–∫–∏_–∫–∞—Ä—Ç–æ—Ñ–µ–ª—è.txt"

	// –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ "—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
	fileErr := fmt.Errorf("–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ %s: %w", fileName, os.ErrNotExist)

	return fmt.Errorf("—Ä–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π: %w", fileErr)
}
