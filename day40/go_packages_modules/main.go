package main

import (
	"fmt"

	"go_packages_modules/calculator"
	"go_packages_modules/greeter"
	"go_packages_modules/internal/tools"
	"go_packages_modules/quotes"
)

func main() {
	fmt.Println("üì¶ –î–µ–Ω—å 40: –ü–∞–∫–µ—Ç—ã –∏ –º–æ–¥—É–ª–∏ –≤ Go")
	fmt.Println("======================================")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ greeter
	tools.PrintInfo("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ greeter")
	greeting := greeter.Greet("–ì–æ—à–∞")
	fmt.Println(greeting)
	fmt.Println()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ calculator
	tools.PrintInfo("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ calculator")

	a, b := 15.0, 3.0
	fmt.Printf("%.2f + %.2f = %.2f\n", a, b, calculator.Add(a, b))
	fmt.Printf("%.2f - %.2f = %.2f\n", a, b, calculator.Subtract(a, b))
	fmt.Printf("%.2f * %.2f = %.2f\n", a, b, calculator.Multiply(a, b))

	result, err := calculator.Divide(a, b)
	if err != nil {
		tools.PrintError(err.Error())
	} else {
		fmt.Printf("%.2f / %.2f = %.2f\n", a, b, result)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
	tools.PrintInfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–µ–ª –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É")
	numbers := []int{2, 7, 10, 17, 25}
	for _, num := range numbers {
		if calculator.IsPrime(num) {
			fmt.Printf("%d - –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ\n", num)
		} else {
			fmt.Printf("%d - —Å–æ—Å—Ç–∞–≤–Ω–æ–µ —á–∏—Å–ª–æ\n", num)
		}
	}
	fmt.Println()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ quotes
	tools.PrintInfo("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ quotes")
	fmt.Println("–°–ª—É—á–∞–π–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞:")
	quote := quotes.GetRandomQuote()
	fmt.Println(quote.String())
	fmt.Println()

	// –ü–æ–∫–∞–∑–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
	tools.PrintInfo("–¶–∏—Ç–∞—Ç—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏")
	programmingQuotes := quotes.GetQuotesByCategory("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
	for i, q := range programmingQuotes {
		fmt.Printf("%d. %s\n‚Äî %s\n\n", i+1, q.Text, q.Author)
	}

	tools.PrintSuccess("–í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
	fmt.Println("\nüéâ –í—ã –æ—Å–≤–æ–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å –ø–∞–∫–µ—Ç–∞–º–∏ –∏ –º–æ–¥—É–ª—è–º–∏ –≤ Go!")
}
