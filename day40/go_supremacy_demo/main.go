package main

import (
	"fmt"
	"runtime"
	"time"
)

// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
func calculateFibonacci(n int, ch chan<- int) {
	a, b := 0, 1
	for i := 0; i < n; i++ {
		a, b = b, a+b
	}
	ch <- a
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
type Developer struct {
	Name     string
	Language string
	Score    int
}

// –ú–µ—Ç–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
func (d *Developer) Celebrate() string {
	return fmt.Sprintf("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ %s –ø—Ä–∞–∑–¥–Ω—É–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ %s!", d.Name, d.Language)
}

func main() {
	fmt.Println("üöÄ –î–µ–Ω—å 40: Go vs Python - –ü—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ –≤ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏")
	fmt.Println("================================================================================")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
	fmt.Println("\n1. üî• –°–¢–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø (–æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏)")
	
	// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É - –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è!
	// var pythonDev Developer = "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤"
	
	goDev := Developer{
		Name:     "–ì–æ—à–∞",
		Language: "Go",
		Score:    100,
	}
	fmt.Println(goDev.Celebrate())

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
	fmt.Println("\n2. ‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ò –ö–û–ù–ö–£–†–ï–ù–¢–ù–û–°–¢–¨")
	start := time.Now()
	
	ch := make(chan int)
	for i := 0; i < 1000; i++ {
		go calculateFibonacci(1000, ch)
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	for i := 0; i < 1000; i++ {
		<-ch
	}
	
	elapsed := time.Since(start)
	fmt.Printf("1000 –≥–æ—Ä—É—Ç–∏–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞: %v\n", elapsed)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
	fmt.Println("\n3. üåç –ö–†–û–°–°–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–û–°–¢–¨")
	fmt.Printf("–û–°: %s\n–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: %s\n", runtime.GOOS, runtime.GOARCH)
	fmt.Println("–û–¥–∏–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ ‚Üí –ª—é–±–æ–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª!")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤
	fmt.Println("\n4. üß™ –í–°–¢–†–û–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò –ë–ï–ù–ß–ú–ê–†–ö–ò")
	fmt.Println("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: go test -bench=. -benchmem")

	fmt.Println("\n5. üì¶ –ï–î–ò–ù–´–ô –ë–ò–ù–ê–†–ù–´–ô –§–ê–ô–õ")
	fmt.Println("–ù–∏–∫–∞–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –æ–¥–∏–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—ë!")
	fmt.Printf("–†–∞–∑–º–µ—Ä –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ~5-10MB vs Python + –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ + –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ~200-500MB\n")

	fmt.Println("\nüéâ –í—ã–≤–æ–¥: Go –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤,")
	fmt.Println("   –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∏—Å—Ç–∏–Ω–Ω—É—é –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å!")
}