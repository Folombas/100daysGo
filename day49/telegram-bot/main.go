package main

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// GameState —Ö—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type GameState struct {
	SecretNumber int
	Attempts     int
	MaxAttempts  int
	IsPlaying    bool
}

var (
	games = make(map[int64]*GameState) // chatID -> GameState
	mutex = &sync.Mutex{}
	bot   *tgbotapi.BotAPI
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := LoadConfig()

	var err error
	bot, err = tgbotapi.NewBotAPI(config.BotToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		text := update.Message.Text

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
		mutex.Lock()
		if games[chatID] == nil {
			games[chatID] = &GameState{MaxAttempts: 10}
		}
		game := games[chatID]
		mutex.Unlock()

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
		if text == "/start" {
			sendMessage(chatID, "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ'!\n\n–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –µ–≥–æ –∑–∞ 10 –ø–æ–ø—ã—Ç–æ–∫!\n\n–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
			newGame(game)
		} else if text == "/help" {
			sendMessage(chatID, "‚ùì –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n- –Ø –∑–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n- –£ —Ç–µ–±—è –µ—Å—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –µ–≥–æ\n- –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ —è —Å–∫–∞–∂—É, –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ\n- –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–ø–∏—à–∏ /start")
		} else {
			// –ü–æ–ø—ã—Ç–∫–∞ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ
			if guess, err := strconv.Atoi(text); err == nil {
				handleGuess(chatID, game, guess)
			} else if !game.IsPlaying {
				sendMessage(chatID, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É!")
			} else {
				sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
			}
		}
	}
}

func newGame(game *GameState) {
	rand.Seed(time.Now().UnixNano())
	game.SecretNumber = rand.Intn(100) + 1
	game.Attempts = 0
	game.IsPlaying = true
}

func handleGuess(chatID int64, game *GameState, guess int) {
	if !game.IsPlaying {
		sendMessage(chatID, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É!")
		return
	}

	if guess < 1 || guess > 100 {
		sendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")
		return
	}

	game.Attempts++

	if guess < game.SecretNumber {
		sendMessage(chatID, fmt.Sprintf("‚¨ÜÔ∏è –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ —á–µ–º %d\n\n–ü–æ–ø—ã—Ç–∫–∞ %d/%d", guess, game.Attempts, game.MaxAttempts))
	} else if guess > game.SecretNumber {
		sendMessage(chatID, fmt.Sprintf("‚¨áÔ∏è –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ —á–µ–º %d\n\n–ü–æ–ø—ã—Ç–∫–∞ %d/%d", guess, game.Attempts, game.MaxAttempts))
	} else {
		sendMessage(chatID, fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ %d –∑–∞ %d –ø–æ–ø—ã—Ç–æ–∫!\n\n–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑.", game.SecretNumber, game.Attempts))
		game.IsPlaying = false
		return
	}

	if game.Attempts >= game.MaxAttempts {
		sendMessage(chatID, fmt.Sprintf("üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: %d\n\n–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑.", game.SecretNumber))
		game.IsPlaying = false
	}
}

func sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}
