package main

import (
	"fmt"
	"time"
)

// Mushroom –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∏–±
type Mushroom struct {
	Type string
	Size int
}

// MushroomPicker –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∏–±–Ω–∏–∫–∞
type MushroomPicker struct {
	Name string
}

// NewMushroomPicker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –≥—Ä–∏–±–Ω–∏–∫–∞
func NewMushroomPicker(name string) *MushroomPicker {
	return &MushroomPicker{Name: name}
}

// DemonstrateUnbufferedChannels –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
func DemonstrateUnbufferedChannels() {
	fmt.Println("üéØ –ù–ï–ë–£–§–ï–†–ò–ó–û–í–ê–ù–ù–´–ï –ö–ê–ù–ê–õ–´ (—Ä—É—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞):")
	fmt.Println("============================================")

	unbufferedChan := make(chan Mushroom)
	picker := NewMushroomPicker("–í–∞—Å–∏–ª–∏–π")

	// –ì—Ä–∏–±–Ω–∏–∫ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≥—Ä–∏–±—ã
	go func() {
		mushrooms := []Mushroom{
			{"–±–µ–ª—ã–π", 15}, {"–ø–æ–¥–æ—Å–∏–Ω–æ–≤–∏–∫", 12}, {"–ª–∏—Å–∏—á–∫–∞", 8},
		}

		for _, mushroom := range mushrooms {
			fmt.Printf("   üçÑ %s –Ω–∞—à–µ–ª %s (%d—Å–º)\n", picker.Name, mushroom.Type, mushroom.Size)
			fmt.Printf("   ü§≤ –ü–µ—Ä–µ–¥–∞–µ—Ç %s... (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è)\n", mushroom.Type)
			unbufferedChan <- mushroom
			fmt.Printf("   ‚úÖ %s –ø–µ—Ä–µ–¥–∞–Ω!\n", mushroom.Type)
			time.Sleep(500 * time.Millisecond)
		}
		close(unbufferedChan)
	}()

	// –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥—Ä–∏–±—ã
	go func() {
		for mushroom := range unbufferedChan {
			fmt.Printf("   üì¶ –ü–æ–ª—É—á–µ–Ω %s (%d—Å–º)\n", mushroom.Type, mushroom.Size)
			time.Sleep(800 * time.Millisecond)
		}
	}()

	time.Sleep(5 * time.Second)
	fmt.Println("   üéâ –í—Å–µ –≥—Ä–∏–±—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–∑ —Ä—É–∫ –≤ —Ä—É–∫–∏!\n")
}

// DemonstrateBufferedChannels –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
func DemonstrateBufferedChannels() {
	fmt.Println("üöö –ë–£–§–ï–†–ò–ó–û–í–ê–ù–ù–´–ï –ö–ê–ù–ê–õ–´ (–≥—Ä—É–∑–æ–≤–∏–∫ —Å –∫—É–∑–æ–≤–æ–º):")
	fmt.Println("============================================")

	bufferedChan := make(chan Mushroom, 3)
	picker := NewMushroomPicker("–ü–µ—Ç—Ä")

	// –ì—Ä–∏–±–Ω–∏–∫ —Å–æ–±–∏—Ä–∞–µ—Ç –≥—Ä–∏–±—ã –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤ "–∫—É–∑–æ–≤"
	go func() {
		mushrooms := []Mushroom{
			{"–º–∞—Å–ª–µ–Ω–æ–∫", 10}, {"—Ä—ã–∂–∏–∫", 9}, {"–≤–æ–ª–Ω—É—à–∫–∞", 7}, {"–≥—Ä—É–∑–¥—å", 14}, {"—Å—ã—Ä–æ–µ–∂–∫–∞", 6},
		}

		for idx, mushroom := range mushrooms {
			fmt.Printf("   üçÑ %s –Ω–∞—à–µ–ª %s (%d—Å–º)\n", picker.Name, mushroom.Type, mushroom.Size)

			select {
			case bufferedChan <- mushroom:
				fmt.Printf("   üöö –ü–æ–ª–æ–∂–∏–ª %s –≤ –∫—É–∑–æ–≤ (–º–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ: %d/%d)\n",
					mushroom.Type, len(bufferedChan), cap(bufferedChan))
			default:
				fmt.Printf("   ‚ö†Ô∏è  –ö—É–∑–æ–≤ –ø–æ–ª–µ–Ω! –ù–µ –º–æ–≥—É –ø–æ–ª–æ–∂–∏—Ç—å %s\n", mushroom.Type)
			}

			time.Sleep(300 * time.Millisecond)

			// –†–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Ç–µ—Ä–∞—Ü–∏—è
			if idx == len(mushrooms)-1 {
				close(bufferedChan)
			}
		}
	}()

	// –†–∞–∑–≥—Ä—É–∑–∫–∞ "–∫—É–∑–æ–≤–∞"
	go func() {
		time.Sleep(2 * time.Second)
		fmt.Println("   üèÅ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥—Ä—É–∑–∫—É –∫—É–∑–æ–≤–∞...")

		for mushroom := range bufferedChan {
			fmt.Printf("   üì¶ –†–∞–∑–≥—Ä—É–∂–∞–µ–º %s (%d—Å–º) (–æ—Å—Ç–∞–ª–æ—Å—å: %d)\n",
				mushroom.Type, mushroom.Size, len(bufferedChan))
			time.Sleep(1 * time.Second)
		}
	}()

	time.Sleep(6 * time.Second)
	fmt.Println("   üéâ –ì—Ä—É–∑–æ–≤–∏–∫ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω!\n")
}

// ComparePerformance —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
func ComparePerformance() {
	fmt.Println("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
	fmt.Println("===============================")

	// –¢–µ—Å—Ç –Ω–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
	start := time.Now()
	unbuffered := make(chan int)

	go func() {
		for i := 0; i < 5; i++ {
			unbuffered <- i
		}
		close(unbuffered)
	}()

	go func() {
		for range unbuffered {
			// –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
		}
	}()

	time.Sleep(100 * time.Millisecond)
	unbufferedTime := time.Since(start)

	// –¢–µ—Å—Ç –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
	start = time.Now()
	buffered := make(chan int, 5)

	go func() {
		for i := 0; i < 5; i++ {
			buffered <- i
		}
		close(buffered)
	}()

	go func() {
		for range buffered {
			// –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
		}
	}()

	time.Sleep(100 * time.Millisecond)
	bufferedTime := time.Since(start)

	fmt.Printf("   ‚è±Ô∏è  –ù–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π: %v\n", unbufferedTime)
	fmt.Printf("   ‚è±Ô∏è  –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π: %v\n", bufferedTime)
	fmt.Printf("   üìà –†–∞–∑–Ω–∏—Ü–∞: %v\n\n", unbufferedTime-bufferedTime)
}

// RealWorldExample –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
func RealWorldExample() {
	fmt.Println("üåç –†–ï–ê–õ–¨–ù–´–ô –ü–†–ò–ú–ï–† (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∏–±–æ–≤):")
	fmt.Println("====================================")

	collected := make(chan Mushroom, 10)
	cleaned := make(chan Mushroom, 8)
	packaged := make(chan Mushroom, 5)

	// –°—Ç–∞–¥–∏—è 1: –°–±–æ—Ä –≥—Ä–∏–±–æ–≤
	go func() {
		types := []string{"–±–µ–ª—ã–π", "–ø–æ–¥–±–µ—Ä–µ–∑–æ–≤–∏–∫", "–ª–∏—Å–∏—á–∫–∞", "–æ–ø–µ–Ω–æ–∫"}
		for j := 0; j < 12; j++ {
			mushroom := Mushroom{
				Type: types[j%len(types)],
				Size: 8 + j%7,
			}
			collected <- mushroom
			fmt.Printf("   üçÑ –°–æ–±—Ä–∞–Ω: %s\n", mushroom.Type)
			time.Sleep(100 * time.Millisecond)
		}
		close(collected)
	}()

	// –°—Ç–∞–¥–∏—è 2: –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∏–±–æ–≤
	go func() {
		for mushroom := range collected {
			fmt.Printf("   üßπ –û—á–∏—â–∞–µ–º: %s\n", mushroom.Type)
			time.Sleep(200 * time.Millisecond)
			cleaned <- mushroom
		}
		close(cleaned)
	}()

	// –°—Ç–∞–¥–∏—è 3: –£–ø–∞–∫–æ–≤–∫–∞ –≥—Ä–∏–±–æ–≤
	go func() {
		for mushroom := range cleaned {
			fmt.Printf("   üì¶ –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º: %s\n", mushroom.Type)
			time.Sleep(150 * time.Millisecond)
			packaged <- mushroom
		}
		close(packaged)
	}()

	// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è: –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	count := 0
	for range packaged {
		count++
	}

	fmt.Printf("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä–∏–±–æ–≤: %d\n\n", count)
}

// DeadlockExample –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä deadlock
func DeadlockExample() {
	fmt.Println("üíÄ –ü–†–ò–ú–ï–† DEADLOCK (—á–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å):")
	fmt.Println("=================================")

	fmt.Println("   üí° –ú–æ—Ä–∞–ª—å: –≤—Å–µ–≥–¥–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
}

func main() {
	fmt.Println("üçÑ Day 80: Buffered vs Unbuffered Channels - –ì—Ä–∏–±–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞!")
	fmt.Println("============================================================")

	DemonstrateUnbufferedChannels()
	DemonstrateBufferedChannels()
	ComparePerformance()
	RealWorldExample()
	DeadlockExample()

	fmt.Println("üéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
	fmt.Println("   ‚Ä¢ –ù–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ: —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞—á–∞ –∏–∑ —Ä—É–∫ –≤ —Ä—É–∫–∏")
	fmt.Println("   ‚Ä¢ –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ, –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("   ‚Ä¢ –ë—É—Ñ–µ—Ä —É–º–µ–Ω—å—à–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏")
	fmt.Println("   ‚Ä¢ –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

	fmt.Println("\nüí™ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ –∫–∞–Ω–∞–ª–∞—Ö –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –≥—Ä–∏–±–Ω–∏–∫!")
}
