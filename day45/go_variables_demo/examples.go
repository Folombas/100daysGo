package main

import "fmt"

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 6 —Å–ø–æ—Å–æ–±–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ Go

// 1. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–∞–∫–µ—Ç–∞
var packageLevelVar string = "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–∞–∫–µ—Ç–∞"

// 2. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
var (
    globalName    string = "–ê–ª–µ–∫—Å–µ–π"
    globalAge     int    = 30
    globalIsAdmin bool   = true
)

// DemonstrateVarDeclaration –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
func DemonstrateVarDeclaration() {
    fmt.Println("üéØ 6 —Å–ø–æ—Å–æ–±–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ Go")
    fmt.Println("==========================================")

    // 1. –ü–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞
    var name string
    name = "–ò–≤–∞–Ω"
    fmt.Printf("1. –ü–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: var name string = %q\n", name)

    // 2. –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    var age int = 25
    fmt.Printf("2. –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π: var age int = %d\n", age)

    // 3. –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    country := "–†–æ—Å—Å–∏—è"
    fmt.Printf("3. –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: country := %q\n", country)

    // 4. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
    var x, y, z int
    x, y, z = 10, 20, 30
    fmt.Printf("4. –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: x=%d, y=%d, z=%d\n", x, y, z)

    // 5. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    var a, b, c = 1, 2.5, "—Ç—Ä–∏"
    fmt.Printf("5. –ù–µ—Å–∫–æ–ª—å–∫–æ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π: a=%d, b=%.1f, c=%q\n", a, b, c)

    // 6. –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    firstName, lastName := "–ê–Ω–Ω–∞", "–ü–µ—Ç—Ä–æ–≤–∞"
    fmt.Printf("6. –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö: %s %s\n", firstName, lastName)

    fmt.Println("\nüì¶ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    fmt.Printf("   packageLevelVar: %s\n", packageLevelVar)
    fmt.Printf("   globalName: %s, globalAge: %d, globalIsAdmin: %t\n", 
        globalName, globalAge, globalIsAdmin)
}

// DemonstrateZeroValues –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
func DemonstrateZeroValues() {
    fmt.Println("\nüîç –ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Go:")
    
    var i int
    var f float64
    var b bool
    var s string
    var arr [3]int
    var sl []string
    
    fmt.Printf("   int: %d\n", i)
    fmt.Printf("   float64: %.1f\n", f)
    fmt.Printf("   bool: %t\n", b)
    fmt.Printf("   string: %q\n", s)
    fmt.Printf("   array: %v\n", arr)
    fmt.Printf("   slice: %v (nil=%t)\n", sl, sl == nil)
}

// DemonstrateTypeInference –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
func DemonstrateTypeInference() {
    fmt.Println("\nüß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ (type inference):")
    
    // Go –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø
    value := 42          // int
    message := "–ü—Ä–∏–≤–µ—Ç"  // string
    ratio := 3.14        // float64
    enabled := true      // bool
    
    fmt.Printf("   value := 42        ‚Üí %T\n", value)
    fmt.Printf("   message := '–ü—Ä–∏–≤–µ—Ç' ‚Üí %T\n", message)
    fmt.Printf("   ratio := 3.14      ‚Üí %T\n", ratio)
    fmt.Printf("   enabled := true    ‚Üí %T\n", enabled)
}

// DemonstrateRedeclaration –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
func DemonstrateRedeclaration() {
    fmt.Println("\nüîÑ –ü–µ—Ä–µ–æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ —Ç–µ–Ω—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (shadowing):")
    
    x := 10
    fmt.Printf("   –í–Ω–µ –±–ª–æ–∫–∞: x = %d\n", x)
    
    {
        x := 20 // –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∑–∞—Ç–µ–Ω—è—é—â—É—é –≤–Ω–µ—à–Ω—é—é
        fmt.Printf("   –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞: x = %d\n", x)
    }
    
    fmt.Printf("   –°–Ω–æ–≤–∞ –≤–Ω–µ –±–ª–æ–∫–∞: x = %d\n", x)
    
    // –ü–µ—Ä–µ–ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ (–Ω–µ –ø–µ—Ä–µ–æ–±—ä—è–≤–ª–µ–Ω–∏–µ)
    x = 30
    fmt.Printf("   –ü–æ—Å–ª–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è: x = %d\n", x)
}