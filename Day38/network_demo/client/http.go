package client

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"
)

func StartHTTPClient() {
	fmt.Println("üåê –ó–∞–ø—É—Å–∫ HTTP –∫–ª–∏–µ–Ω—Ç–∞...")
	fmt.Println()

	// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
	testEndpoint("http://localhost:8080/api/health", "GET", nil)
	testEndpoint("http://localhost:8080/api/time", "GET", nil)
	testEndpoint("http://localhost:8080/api/users", "GET", nil)
	testEndpoint("http://localhost:8080/network/test", "GET", nil)

	// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
	fmt.Println("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:")
	testProtectedEndpoint("http://localhost:8080/admin")
	testProtectedEndpoint("http://localhost:8080/admin/dashboard")

	// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
	fmt.Println("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º:")
	testWithToken("http://localhost:8080/admin", "Bearer secret-token-123")
}

func testEndpoint(url, method string, body []byte) {
	fmt.Printf("üì§ –ó–∞–ø—Ä–æ—Å: %s %s\n", method, url)

	client := &http.Client{Timeout: 10 * time.Second}
	req, err := http.NewRequest(method, url, bytes.NewReader(body))
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return
	}

	start := time.Now()
	resp, err := client.Do(req)
	duration := time.Since(start)

	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return
	}
	defer resp.Body.Close()

	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v\n", err)
		return
	}

	fmt.Printf("üì• –û—Ç–≤–µ—Ç: %d (%s)\n", resp.StatusCode, duration)
	fmt.Printf("üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: %s\n\n", string(responseBody))
}

func testProtectedEndpoint(url string) {
	fmt.Printf("üì§ –ó–∞–ø—Ä–æ—Å –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É: %s\n", url)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Get(url)

	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return
	}
	defer resp.Body.Close()

	responseBody, _ := ioutil.ReadAll(resp.Body)
	fmt.Printf("üì• –û—Ç–≤–µ—Ç: %d\n", resp.StatusCode)
	fmt.Printf("üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: %s\n\n", string(responseBody))
}

func testWithToken(url, token string) {
	fmt.Printf("üì§ –ó–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º: %s\n", url)

	client := &http.Client{Timeout: 10 * time.Second}
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return
	}

	req.Header.Set("Authorization", token)

	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
		return
	}
	defer resp.Body.Close()

	responseBody, _ := ioutil.ReadAll(resp.Body)
	fmt.Printf("üì• –û—Ç–≤–µ—Ç: %d\n", resp.StatusCode)
	fmt.Printf("üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: %s\n\n", string(responseBody))
}