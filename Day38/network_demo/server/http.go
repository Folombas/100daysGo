package server

import (
	"fmt"
	"net/http"
	"network_demo/handlers"
	"network_demo/middleware"
	"time" // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç time
)

func StartHTTPServer() {
	mux := http.NewServeMux()

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	fs := http.FileServer(http.Dir("./static"))
	mux.Handle("/static/", http.StripPrefix("/static/", fs))

	// –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
	mux.HandleFunc("/", handlers.HomeHandler)
	mux.HandleFunc("/api/health", handlers.HealthHandler)
	mux.HandleFunc("/api/time", handlers.TimeHandler)
	mux.HandleFunc("/api/users", handlers.UsersHandler)
	mux.HandleFunc("/network/test", handlers.NetworkTestHandler)
	mux.HandleFunc("/network/stats", handlers.StatsHandler)

	// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
	mux.HandleFunc("/admin", middleware.AuthMiddleware(middleware.AdminHandler))
	mux.HandleFunc("/admin/dashboard", middleware.AuthMiddleware(middleware.AdminDashboardHandler))

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
	wrappedMux := middleware.LoggingMiddleware(mux.ServeHTTP)

	fmt.Println("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	fmt.Println("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
	fmt.Println("   /              - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
	fmt.Println("   /api/health    - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
	fmt.Println("   /api/time      - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
	fmt.Println("   /api/users     - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	fmt.Println("   /admin         - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)")

	server := &http.Server{
		Addr:         ":8080",
		Handler:      wrappedMux,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	if err := server.ListenAndServe(); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}
}