package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// Episode –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ø–∏–∑–æ–¥ –∏–∑ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞ "–ù—É, –ü–æ–≥–æ–¥–∏!"
type Episode struct {
	ID          int
	Description string
	Complexity  int // –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∏–º–∫–∏ –ó–∞–π—Ü–∞ (1-10)
}

// Worker –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –í–æ–ª–∫–∞-—Ä–∞–±–æ—Ç—è–≥—É
type Worker struct {
	ID     int
	Name   string
	Skills int // –ù–∞–≤—ã–∫–∏ –ø–æ–∏–º–∫–∏ (1-10)
}

// Result –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–π–º–∞—Ç—å –ó–∞–π—Ü–∞
type Result struct {
	WorkerID  int
	EpisodeID int
	Success   bool
	Message   string
}

func main() {
	fmt.Println("üé¨ –î–µ–Ω—å 81: Worker Pools - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ª–æ–≤—Ü—ã –ó–∞–π—Ü–µ–≤!")
	fmt.Println("üö™ –ú—ã –≤ 5D-–≤—Å–µ–ª–µ–Ω–Ω–æ–π '–ù—É, –ü–æ–≥–æ–¥–∏!' —Å –ü–∞—Ö–æ–º—ã—á–µ–º...")
	fmt.Println("üê∫ –í–æ–ª–∫ –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—á—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!")

	// –°–æ–∑–¥–∞–µ–º —ç–ø–∏–∑–æ–¥—ã (–∑–∞–¥–∞—á–∏)
	episodes := generateEpisodes(20)
	fmt.Printf("üì∫ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ %d —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n", len(episodes))

	// –°–æ–∑–¥–∞–µ–º –í–æ–ª–∫–æ–≤-—Ä–∞–±–æ—Ç—è–≥ (worker pool)
	workers := createWolfWorkers(4)
	fmt.Printf("üê∫ –°–æ–∑–¥–∞–Ω –ø—É–ª –∏–∑ %d –í–æ–ª–∫–æ–≤-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n\n", len(workers))

	// –ö–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã
	jobs := make(chan Episode, len(episodes))
	results := make(chan Result, len(episodes))

	// –ó–∞–ø—É—Å–∫–∞–µ–º worker pool
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
	for _, worker := range workers {
		wg.Add(1)
		go processEpisodes(worker, jobs, results, &wg)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–ø–∏–∑–æ–¥—ã –≤ —Ä–∞–±–æ—Ç—É
	go func() {
		for _, episode := range episodes {
			jobs <- episode
		}
		close(jobs)
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	go func() {
		wg.Wait()
		close(results)
	}()

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	analyzeResults(results, workers, episodes)
}

// generateEpisodes —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞
func generateEpisodes(count int) []Episode {
	descriptions := []string{
		"–ó–∞—è—Ü –Ω–∞ —Å—Ç—Ä–æ–π–∫–µ —Å –∫–∏—Ä–ø–∏—á–∞–º–∏",
		"–ó–∞—è—Ü –≤ –ª–∏—Ñ—Ç–µ —Å –º–æ—Ä–∫–æ–≤–∫–æ–π",
		"–ó–∞—è—Ü –Ω–∞ –ø–ª—è–∂–µ —Å –º—è—á–∏–∫–æ–º",
		"–ó–∞—è—Ü –≤ —É–Ω–∏–≤–µ—Ä–º–∞–≥–µ —Å —Ç–µ–ª–µ–∂–∫–æ–π",
		"–ó–∞—è—Ü –Ω–∞ –∫–∞—Ç–∫–µ —Å –∫–æ–Ω—å–∫–∞–º–∏",
		"–ó–∞—è—Ü –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ —Å –ø–æ–ø–∫–æ—Ä–Ω–æ–º",
		"–ó–∞—è—Ü –≤ –±–∞—Å—Å–µ–π–Ω–µ —Å –Ω–∞–¥—É–≤–Ω—ã–º –∫—Ä—É–≥–æ–º",
		"–ó–∞—è—Ü –Ω–∞ –¥–µ—Ç—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∫–µ —Å –∫–∞—á–µ–ª—è–º–∏",
		"–ó–∞—è—Ü –≤ —Ü–∏—Ä–∫–µ —Å –∫–ª–æ—É–Ω–∞–º–∏",
		"–ó–∞—è—Ü –≤ –ø–∞—Ä–∫–µ —Å –≥–æ–ª—É–±—è–º–∏",
	}

	episodes := make([]Episode, count)
	for i := 0; i < count; i++ {
		episodes[i] = Episode{
			ID:          i + 1,
			Description: descriptions[rand.Intn(len(descriptions))],
			Complexity:  rand.Intn(10) + 1,
		}
	}
	return episodes
}

// createWolfWorkers —Å–æ–∑–¥–∞–µ—Ç –ø—É–ª –í–æ–ª–∫–æ–≤-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
func createWolfWorkers(count int) []Worker {
	names := []string{"–í–æ–ª–∫-–ê–ª—å—Ñ–∞", "–í–æ–ª–∫-–ë–µ—Ç–∞", "–í–æ–ª–∫-–ì–∞–º–º–∞", "–í–æ–ª–∫-–î–µ–ª—å—Ç–∞", "–í–æ–ª–∫-–≠–ø—Å–∏–ª–æ–Ω"}
	workers := make([]Worker, count)
	for i := 0; i < count; i++ {
		workers[i] = Worker{
			ID:     i + 1,
			Name:   names[i],
			Skills: rand.Intn(8) + 3, // –ù–∞–≤—ã–∫–∏ –æ—Ç 3 –¥–æ 10
		}
	}
	return workers
}

// processEpisodes –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ø–∏–∑–æ–¥—ã (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ worker pool)
func processEpisodes(worker Worker, jobs <-chan Episode, results chan<- Result, wg *sync.WaitGroup) {
	defer wg.Done()

	for episode := range jobs {
		// –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
		processingTime := time.Duration(rand.Intn(500)+100) * time.Millisecond

		fmt.Printf("üê∫ %s –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç–ø–∏–∑–æ–¥ %d: %s\n",
			worker.Name, episode.ID, episode.Description)

		time.Sleep(processingTime)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö –ø–æ–∏–º–∫–∏
		success := worker.Skills >= episode.Complexity
		var message string

		if success {
			message = fmt.Sprintf("‚úÖ –£–°–ü–ï–•! %s –ø–æ–π–º–∞–ª –ó–∞–π—Ü–∞ –≤ '%s' –∑–∞ %v",
				worker.Name, episode.Description, processingTime)
		} else {
			message = fmt.Sprintf("‚ùå –ü–†–û–í–ê–õ! %s –Ω–µ —Å–º–æ–≥ –¥–æ–≥–Ω–∞—Ç—å –ó–∞–π—Ü–∞ –≤ '%s' (–Ω–∞–≤—ã–∫–∏: %d, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: %d)",
				worker.Name, episode.Description, worker.Skills, episode.Complexity)
		}

		results <- Result{
			WorkerID:  worker.ID,
			EpisodeID: episode.ID,
			Success:   success,
			Message:   message,
		}
	}
}

// analyzeResults –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏ —Ä–∞–±–æ—Ç—ã
func analyzeResults(results <-chan Result, workers []Worker, episodes []Episode) {
	fmt.Println("\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –†–ê–ë–û–¢–´ WOLF POOL:")
	fmt.Println("========================================")

	stats := struct {
		totalProcessed int
		successCount   int
		failureCount   int
		workerStats    map[int]int
	}{
		workerStats: make(map[int]int),
	}

	for result := range results {
		stats.totalProcessed++
		if result.Success {
			stats.successCount++
			stats.workerStats[result.WorkerID]++
		} else {
			stats.failureCount++
		}
		fmt.Println(result.Message)
	}

	// –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	fmt.Println("\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
	fmt.Printf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ø–∏–∑–æ–¥–æ–≤: %d\n", stats.totalProcessed)
	fmt.Printf("–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏–º–æ–∫: %d\n", stats.successCount)
	fmt.Printf("–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: %d\n", stats.failureCount)
	fmt.Printf("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %.1f%%\n", float64(stats.successCount)/float64(stats.totalProcessed)*100)

	fmt.Println("\nüèÜ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–û–õ–ö–û–í:")
	for _, worker := range workers {
		count := stats.workerStats[worker.ID]
		fmt.Printf("%s (–Ω–∞–≤—ã–∫–∏: %d) - –ø–æ–π–º–∞–ª –ó–∞–π—Ü–µ–≤: %d\n",
			worker.Name, worker.Skills, count)
	}

	fmt.Println("\nüéâ –ü–∞—Ö–æ–º—ã—á –¥–æ–≤–æ–ª–µ–Ω: '–í–æ—Ç —ç—Ç–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞! –¢–µ–ø–µ—Ä—å –∏ —è –ø–æ–Ω–∏–º–∞—é worker pools!'")
	fmt.Println("üö™ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª –≤ –Ω–∞—à—É –±—ã—Ç–æ–≤–∫—É...")
}
