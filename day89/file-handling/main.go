package main

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"time"
)

// Skill –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–≤—ã–∫ –ì–æ—Ñ–µ—Ä–∞
type Skill struct {
	Name        string  `json:"name"`
	Level       int     `json:"level"`
	XP          float64 `json:"xp"`
	Description string  `json:"description"`
}

// GopherProfile –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ì–æ—Ñ–µ—Ä–∞
type GopherProfile struct {
	Name       string    `json:"name"`
	Level      int       `json:"level"`
	TotalXP    float64   `json:"total_xp"`
	Skills     []Skill   `json:"skills"`
	LastUpdate time.Time `json:"last_update"`
}

func main() {
	fmt.Println("üéØ –î–µ–Ω—å 89: File Handling –≤ Go - –ü—Ä–æ–∫–∞—á–∫–∞ –ì–æ—Ñ–µ—Ä–∞!")
	fmt.Println("üêπ –¢—ã –≤—ã–±—Ä–∞–ª –ì–æ—Ñ–µ—Ä–∞! –î–∞–≤–∞–π –ø—Ä–æ–∫–∞—á–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ —Å–∏–ª—É —Ñ–∞–π–ª–æ–≤ I/O!")

	// –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ì–æ—Ñ–µ—Ä–∞
	gopher := createInitialGopher()
	fmt.Printf("üéâ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ì–æ—Ñ–µ—Ä: %s (–£—Ä–æ–≤–µ–Ω—å: %d)\n", gopher.Name, gopher.Level)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
	demonstrateFileOperations(gopher)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
	showFinalProgress()
}

func createInitialGopher() GopherProfile {
	skills := []Skill{
		{Name: "Concurrency", Level: 1, XP: 0, Description: "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"},
		{Name: "Channels", Level: 1, XP: 0, Description: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –º–µ–∂–¥—É –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏"},
		{Name: "Interfaces", Level: 1, XP: 0, Description: "–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –≤ Go"},
		{Name: "Error Handling", Level: 1, XP: 0, Description: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"},
		{Name: "File I/O", Level: 1, XP: 0, Description: "–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏"},
	}

	return GopherProfile{
		Name:       "SuperGopher89",
		Level:      1,
		TotalXP:    0,
		Skills:     skills,
		LastUpdate: time.Now(),
	}
}

func demonstrateFileOperations(gopher GopherProfile) {
	fmt.Println("\nüìÅ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–ï–†–ê–¶–ò–ô –° –§–ê–ô–õ–ê–ú–ò:")
	fmt.Println("====================================")

	// 1. –ó–∞–ø–∏—Å—å –≤ JSON —Ñ–∞–π–ª
	fmt.Println("\n1. üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ì–æ—Ñ–µ—Ä–∞ –≤ JSON...")
	saveGopherToJSON(gopher, "skills.json")

	// 2. –ß—Ç–µ–Ω–∏–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
	fmt.Println("\n2. üìñ –ß–∏—Ç–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ JSON...")
	loadedGopher := loadGopherFromJSON("skills.json")
	fmt.Printf("   –ó–∞–≥—Ä—É–∂–µ–Ω –ì–æ—Ñ–µ—Ä: %s (–£—Ä–æ–≤–µ–Ω—å: %d)\n", loadedGopher.Name, loadedGopher.Level)

	// 3. –ó–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
	fmt.Println("\n3. üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
	writeProgressToFile(loadedGopher, "progress.txt")

	// 4. –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
	fmt.Println("\n4. üëÄ –ß–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞...")
	readAndDisplayProgress("progress.txt")

	// 5. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è)
	fmt.Println("\n5. üóÇÔ∏è –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞–≤—ã–∫–æ–≤...")
	copyFile("skills.json", "backup_skills.json")
	fmt.Println("   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!")

	// 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
	fmt.Println("\n6. üìä –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö...")
	getFileInfo("skills.json")
	getFileInfo("progress.txt")

	// 7. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
	fmt.Println("\n7. ‚ö° –ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏ –ì–æ—Ñ–µ—Ä–∞...")
	updatedGopher := levelUpGopher(loadedGopher)
	saveGopherToJSON(updatedGopher, "skills.json")
	fmt.Println("   üéâ –ì–æ—Ñ–µ—Ä –ø—Ä–æ–∫–∞—á–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª skills.json")
}

func saveGopherToJSON(gopher GopherProfile, filename string) {
	file, err := os.Create(filename)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")

	if err := encoder.Encode(gopher); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v\n", err)
		return
	}
	fmt.Printf("   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ %s\n", filename)
}

func loadGopherFromJSON(filename string) GopherProfile {
	file, err := os.Open(filename)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return GopherProfile{}
	}
	defer file.Close()

	var gopher GopherProfile
	decoder := json.NewDecoder(file)
	if err := decoder.Decode(&gopher); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v\n", err)
		return GopherProfile{}
	}

	gopher.LastUpdate = time.Now()
	return gopher
}

func writeProgressToFile(gopher GopherProfile, filename string) {
	file, err := os.Create(filename)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}
	defer file.Close()

	content := fmt.Sprintf(`–ü–†–û–ì–†–ï–°–° –ì–û–§–ï–†–ê: %s
–£—Ä–æ–≤–µ–Ω—å: %d
–û–±—â–∏–π –æ–ø—ã—Ç: %.1f
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s

–ù–ê–í–´–ö–ò:
`, gopher.Name, gopher.Level, gopher.TotalXP, gopher.LastUpdate.Format("2006-01-02 15:04:05"))

	for _, skill := range gopher.Skills {
		content += fmt.Sprintf("- %s: –£—Ä–æ–≤–µ–Ω—å %d (–û–ø—ã—Ç: %.1f)\n  %s\n\n",
			skill.Name, skill.Level, skill.XP, skill.Description)
	}

	content += fmt.Sprintf("üéØ –°–î–í–ì-—Å—É–ø–µ—Ä—Å–∏–ª–∞: –§–æ–∫—É—Å –Ω–∞ –æ–¥–Ω–æ–º —è–∑—ã–∫–µ (%s) –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n", gopher.Name)

	if _, err := file.WriteString(content); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: %v\n", err)
		return
	}
	fmt.Printf("   ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–∞–Ω –≤ %s\n", filename)
}

func readAndDisplayProgress(filename string) {
	file, err := os.Open(filename)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}
	defer file.Close()

	content, err := io.ReadAll(file)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}

	fmt.Println("   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ progress.txt:")
	fmt.Println("   " + string(content))
}

func copyFile(src, dst string) {
	sourceFile, err := os.Open(src)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}
	defer sourceFile.Close()

	destFile, err := os.Create(dst)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: %v\n", err)
		return
	}
	defer destFile.Close()

	_, err = io.Copy(destFile, sourceFile)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}
}

func getFileInfo(filename string) {
	info, err := os.Stat(filename)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: %v\n", err)
		return
	}

	fmt.Printf("   üìã %s:\n", filename)
	fmt.Printf("     –†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", info.Size())
	fmt.Printf("     –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: %s\n", info.ModTime().Format("2006-01-02 15:04:05"))
	fmt.Printf("     –†–µ–∂–∏–º: %s\n", info.Mode())
}

func levelUpGopher(gopher GopherProfile) GopherProfile {
	// –ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏
	for i := range gopher.Skills {
		gopher.Skills[i].Level += 1
		gopher.Skills[i].XP += 100
	}

	gopher.Level += 1
	gopher.TotalXP += 500
	gopher.LastUpdate = time.Now()

	fmt.Printf("   üöÄ %s –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è %d!\n", gopher.Name, gopher.Level)
	fmt.Println("   üìà –í—Å–µ –Ω–∞–≤—ã–∫–∏ —É–ª—É—á—à–µ–Ω—ã!")

	return gopher
}

func showFinalProgress() {
	fmt.Println("\nüéä –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ì–†–ï–°–°:")
	fmt.Println("====================")
	fmt.Println("‚úÖ –°–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ì–æ—Ñ–µ—Ä–∞ –≤ JSON")
	fmt.Println("‚úÖ –ó–∞–ø–∏—Å–∞–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
	fmt.Println("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–∞–≤—ã–∫–æ–≤")
	fmt.Println("‚úÖ –û—Å–≤–æ–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ File I/O –≤ Go")
	fmt.Println("\nüéØ –°–î–í–ì-–ø–æ–±–µ–¥–∞: –¢—ã —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ Go –∏ –¥–æ—Å—Ç–∏–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
	fmt.Println("üêπ –¢–≤–æ–π –ì–æ—Ñ–µ—Ä —Ç–µ–ø–µ—Ä—å —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –°–ª–æ–Ω–∏–∫ PHP, –ü–∏—Ç–æ–Ω Python –∏ –ö—Ä–∞–±–∏–∫ Rust!")
	fmt.Println("\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –£—Ä–æ–≤–µ–Ω—å 100 —É–∂–µ –±–ª–∏–∑–∫–æ!")
}
