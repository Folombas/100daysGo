// web/server.go
package web

import (
	"html/template"
	"log"
	"net/http"
	"os"
	"runtime"
	"fmt"

	"go_ai/ai_simulator"
)

func StartServer() error {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	http.HandleFunc("/", homeHandler)

	log.Printf("üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:%s", port)
	return http.ListenAndServe(":"+port, nil)
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("web/templates/index.html")
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		log.Println("‚ùå –û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞:", err)
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–ò–ò-–æ—Ç–≤–µ—Ç" –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
	prompt := "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç Go, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É"
	aiResponse := ai_simulator.GenerateText(prompt)

	// –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	sysInfo := map[string]string{
		"OS":       runtime.GOOS,
		"Arch":     runtime.GOARCH,
		"CPUs":     fmt.Sprintf("%d", runtime.NumCPU()),
		"GoVer":    runtime.Version(),
		"MemHint":  "Go —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–∞–∂–µ –Ω–∞ 16 –ì–ë –û–ó–£!",
		"GPUHint":  "Go –Ω–µ —Ç—Ä–µ–±—É–µ—Ç GPU ‚Äî —É—á–∏—Å—å –≥–¥–µ —É–≥–æ–¥–Ω–æ!",
	}

	data := struct {
		Title     string
		AiText    string
		SysInfo   map[string]string
	}{
		Title:   "Go & –ò–ò ‚Äî –¢–≤–æ–π –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –∂–µ–ª–µ–∑—É",
		AiText:  aiResponse,
		SysInfo: sysInfo,
	}

	err = tmpl.Execute(w, data)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞", http.StatusInternalServerError)
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:", err)
	}
}
