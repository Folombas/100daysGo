package main

import (
	"fmt"
	"io/ioutil"
	"os-detector/utils"
	"runtime"
	"strings"
)

// RunOSDetector –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –û–°
func RunOSDetector() {
	osInfo := getOSInfo()
	message := fmt.Sprintf("–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Go, –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ %s", osInfo)
	utils.PrintCyrillic(message)
}

// getOSInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å –∏–∫–æ–Ω–∫–æ–π
func getOSInfo() string {
	os := runtime.GOOS

	switch os {
	case "windows":
		return "üíª " + getWindowsVersion()
	case "linux":
		return getLinuxDistroWithIcon()
	case "darwin":
		return "üçé macOS"
	default:
		return os
	}
}

// getWindowsVersion –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Å–∏—é Windows
func getWindowsVersion() string {
	// –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
	if runtime.GOOS == "windows" {
		return getWindowsDetails()
	}
	return "Windows"
}

func getLinuxDistroWithIcon() string {
	distro := getLinuxDistro()

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤
	distroLower := strings.ToLower(distro)
	switch {
	case strings.Contains(distroLower, "ubuntu"):
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é Ubuntu
		if strings.Contains(distroLower, "24.04") || strings.Contains(distroLower, "noble") {
			return "ü¶Å " + distro + " (Noble Numbat)"
		} else if strings.Contains(distroLower, "22.04") || strings.Contains(distroLower, "jammy") {
			return "ü¶Å " + distro + " (Jammy Jellyfish)"
		}
		return "ü¶Å " + distro
	case strings.Contains(distroLower, "debian"):
		return "üåÄ " + distro
	case strings.Contains(distroLower, "centos"):
		return "üî¥ " + distro
	case strings.Contains(distroLower, "fedora"):
		return "üîµ " + distro
	case strings.Contains(distroLower, "arch"):
		return "üí† " + distro
	case strings.Contains(distroLower, "mint"):
		return "üçÉ " + distro
	case strings.Contains(distroLower, "kali"):
		return "üêâ " + distro
	case strings.Contains(distroLower, "alpine"):
		return "üèîÔ∏è " + distro
	case strings.Contains(distroLower, "opensuse"):
		return "ü¶é " + distro
	}

	return "üêß " + distro // –ò–∫–æ–Ω–∫–∞ –ø–∏–Ω–≥–≤–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Linux
}

// getLinuxDistro –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ Linux
func getLinuxDistro() string {
	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ
	files := []string{
		"/etc/os-release",
		"/usr/lib/os-release",
		"/etc/lsb-release",
		"/etc/redhat-release",
		"/etc/debian_version",
	}

	for _, file := range files {
		content, err := ioutil.ReadFile(file)
		if err != nil {
			continue
		}

		// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
		lines := strings.Split(string(content), "\n")
		var name, version, prettyName, versionCodename string

		for _, line := range lines {
			if strings.HasPrefix(line, "NAME=") {
				name = strings.Trim(strings.TrimPrefix(line, "NAME="), "\"")
			}
			if strings.HasPrefix(line, "VERSION_ID=") {
				version = strings.Trim(strings.TrimPrefix(line, "VERSION_ID="), "\"")
			}
			if strings.HasPrefix(line, "PRETTY_NAME=") {
				prettyName = strings.Trim(strings.TrimPrefix(line, "PRETTY_NAME="), "\"")
			}
			if strings.HasPrefix(line, "VERSION_CODENAME=") {
				versionCodename = strings.Trim(strings.TrimPrefix(line, "VERSION_CODENAME="), "\"")
			}
			if strings.HasPrefix(line, "DISTRIB_DESCRIPTION=") {
				prettyName = strings.Trim(strings.TrimPrefix(line, "DISTRIB_DESCRIPTION="), "\"")
			}
		}

		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ PRETTY_NAME, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		if prettyName != "" {
			// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥–æ–≤–æ–µ –∏–º—è –¥–ª—è Ubuntu
			if versionCodename != "" && strings.Contains(strings.ToLower(prettyName), "ubuntu") {
				return fmt.Sprintf("%s (%s)", prettyName, strings.Title(versionCodename))
			}
			return prettyName
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
		if name != "" {
			if version != "" {
				return fmt.Sprintf("%s %s", name, version)
			}
			return name
		}

		// –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞
		contentStr := string(content)
		switch {
		case strings.Contains(contentStr, "Ubuntu"):
			return "Ubuntu"
		case strings.Contains(contentStr, "Debian"):
			return "Debian"
		case strings.Contains(contentStr, "CentOS"):
			return "CentOS"
		case strings.Contains(contentStr, "Fedora"):
			return "Fedora"
		case strings.Contains(contentStr, "Arch"):
			return "Arch Linux"
		}
	}

	return "Linux (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤)"
}
