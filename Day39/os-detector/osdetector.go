package main

import (
	"fmt"
	"io/ioutil"
	"os-detector/utils"
	"runtime"
	"strings"
)

// RunOSDetector –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –û–°
func RunOSDetector() {
	osInfo := getOSInfo()
	message := fmt.Sprintf("–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞, –Ω–∞–ø–∏—Å–∞–Ω–Ω–∞—è –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Go, –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ %s", osInfo)
	utils.PrintCyrillic(message)
}

// getOSInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å –∏–∫–æ–Ω–∫–æ–π
func getOSInfo() string {
	os := runtime.GOOS

	switch os {
	case "windows":
		return "üíª " + getWindowsVersion()
	case "linux":
		return getLinuxDistroWithIcon()
	case "darwin":
		return "üçé macOS"
	default:
		return os
	}
}

// getWindowsVersion –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω—É—é –≤–µ—Ä—Å–∏—é Windows
func getWindowsVersion() string {
	// –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
	version := runtime.GOOS
	if os := runtime.GOOS; os == "windows" {
		// –ü–æ–ª—É—á–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ Windows
		version = getWindowsDetails()
	}
	return version
}

// getLinuxDistroWithIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ Linux —Å –∏–∫–æ–Ω–∫–æ–π
func getLinuxDistroWithIcon() string {
	distro := getLinuxDistro()
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤
	if strings.Contains(strings.ToLower(distro), "ubuntu") {
		return "üêß " + distro
	} else if strings.Contains(strings.ToLower(distro), "debian") {
		return "üåÄ " + distro
	} else if strings.Contains(strings.ToLower(distro), "centos") {
		return "üî¥ " + distro
	} else if strings.Contains(strings.ToLower(distro), "fedora") {
		return "üîµ " + distro
	} else if strings.Contains(strings.ToLower(distro), "arch") {
		return "üí† " + distro
	} else if strings.Contains(strings.ToLower(distro), "mint") {
		return "üçÉ " + distro
	} else if strings.Contains(strings.ToLower(distro), "kali") {
		return "üêâ " + distro
	}
	
	return "üêß " + distro // –ò–∫–æ–Ω–∫–∞ –ø–∏–Ω–≥–≤–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Linux
}

// getLinuxDistro –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ Linux
func getLinuxDistro() string {
	// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ
	content, err := ioutil.ReadFile("/etc/os-release")
	if err != nil {
		return "Linux (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤)"
	}

	// –ü–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
	lines := strings.Split(string(content), "\n")
	var name, version string

	for _, line := range lines {
		if strings.HasPrefix(line, "NAME=") {
			name = strings.Trim(strings.TrimPrefix(line, "NAME="), "\"")
		}
		if strings.HasPrefix(line, "VERSION_ID=") {
			version = strings.Trim(strings.TrimPrefix(line, "VERSION_ID="), "\"")
		}
		if strings.HasPrefix(line, "PRETTY_NAME=") {
			// –ï—Å–ª–∏ –µ—Å—Ç—å PRETTY_NAME, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
			prettyName := strings.Trim(strings.TrimPrefix(line, "PRETTY_NAME="), "\"")
			return prettyName
		}
	}

	if name != "" && version != "" {
		return fmt.Sprintf("%s %s", name, version)
	} else if name != "" {
		return fmt.Sprintf("%s", name)
	}

	return "Linux (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤)"
}