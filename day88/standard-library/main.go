package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// PetStore –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
type PetStore struct {
	pets []*ProgrammingPet
}

type ProgrammingPet struct {
	Name     string    `json:"name"`
	Species  string    `json:"species"`
	Focus    bool      `json:"focus"`
	Progress int       `json:"progress"`
	LastFed  time.Time `json:"last_fed"`
}

type StudyPlan struct {
	Topics    []string  `json:"topics"`
	StartDate time.Time `json:"start_date"`
	Deadline  time.Time `json:"deadline"`
}

func main() {
	fmt.Println("üêπ –§–û–ö–£–° –ù–ê GO: –ò—Å—Ç–æ—Ä–∏—è –ì–æ—à–∏ –∏ –µ–≥–æ –≥–æ—Ñ–µ—Ä–∞!")
	fmt.Println("===========================================")

	store := &PetStore{
		pets: []*ProgrammingPet{
			{Name: "–ü–∏—Ç–æ—à–∞", Species: "Python", Focus: false},
			{Name: "–°–ª–æ–Ω–∏–∫", Species: "PHP", Focus: false},
			{Name: "–ö—Ä–∞–±–∏–∫", Species: "Rust", Focus: false},
			{Name: "–ì–æ—Ñ–µ—Ä", Species: "Golang", Focus: true},
			{Name: "–ü–µ—Ä–ª—É—à–∞", Species: "Perl", Focus: false},
		},
	}

	plan := &StudyPlan{
		Topics: []string{
			"–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ –æ—Å–Ω–æ–≤—ã", "–°—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã", "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å",
			"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "Web-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
		},
		StartDate: time.Now(),
		Deadline:  time.Now().Add(100 * 24 * time.Hour),
	}

	fmt.Println("üéØ –°–ò–¢–£–ê–¶–ò–Ø: –ì–æ—à–∞ —Å –°–î–í–ì –∏ –û–ö–† 5 –ª–µ—Ç –º–µ—Ç–∞–ª—Å—è –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏...")
	fmt.Println("üí° –†–ï–®–ï–ù–ò–ï: –í—ã–±—Ä–∞—Ç—å –û–î–ù–û–ì–û –ø–∏—Ç–æ–º—Ü–∞ - –ì–æ—Ñ–µ—Ä–∞ - –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è!")

	fmt.Println("\nüìö –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –ë–ò–ë–õ–ò–û–¢–ï–ö–ê GO –í –î–ï–ô–°–¢–í–ò–ò:")
	fmt.Println("=======================================")

	store.demoFileOperations()
	store.demoJSONOperations(plan)
	store.demoStringOperations()
	store.demoTimeOperations(plan)
	store.demoLogging()

	fmt.Println("\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –ì–æ—à–∞ –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–ª—Å—è –∏ –∏–∑—É—á–∞–µ—Ç Go!")
	fmt.Println("üèÜ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ - –µ–≥–æ –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —ç—Ç–æ–º –ø—É—Ç–∏!")
}

func (p *PetStore) demoFileOperations() {
	fmt.Println("\n1. üìÅ –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò (–ø–∞–∫–µ—Ç os):")

	dataDir := "study_data"
	if err := os.MkdirAll(dataDir, 0755); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v", err)
		return
	}

	filePath := filepath.Join(dataDir, "study_plan.txt")
	content := "–§–æ–∫—É—Å –Ω–∞ Go: –ò–∑—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –≥–æ—Ñ–µ—Ä–∞!\n"

	if err := os.WriteFile(filePath, []byte(content), 0644); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v", err)
		return
	}

	if data, err := os.ReadFile(filePath); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	} else {
		fmt.Printf("   ‚úÖ –°–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: %s\n", string(data))
	}
}

func (p *PetStore) demoJSONOperations(plan *StudyPlan) {
	fmt.Println("\n2. üìä –†–ê–ë–û–¢–ê –° JSON (–ø–∞–∫–µ—Ç encoding/json):")

	jsonData, err := json.MarshalIndent(plan, "", "  ")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ JSON: %v", err)
		return
	}

	jsonPath := filepath.Join("study_data", "plan.json")
	if err := os.WriteFile(jsonPath, jsonData, 0644); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON: %v", err)
	} else {
		fmt.Printf("   ‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s\n", jsonPath)
	}
}

func (p *PetStore) demoStringOperations() {
	fmt.Println("\n3. üî§ –†–ê–ë–û–¢–ê –°–û –°–¢–†–û–ö–ê–ú–ò (–ø–∞–∫–µ—Ç strings):")

	distractions := "Python,PHP,Rust,Perl,JavaScript,Java,C#,Ruby"
	focusPet := "Golang"

	languages := strings.Split(distractions, ",")
	cleaned := strings.ReplaceAll(distractions, "Python", "–ò–ì–ù–û–†")
	cleaned = strings.ReplaceAll(cleaned, "PHP", "–ò–ì–ù–û–†")

	fmt.Printf("   üéØ –§–æ–∫—É—Å-—è–∑—ã–∫: %s\n", focusPet)
	fmt.Printf("   üö´ –û—Ç–≤–ª–µ–∫–∞—é—â–∏–µ: %s\n", cleaned)
	fmt.Printf("   üìä –í—Å–µ–≥–æ —è–∑—ã–∫–æ–≤: %d\n", len(languages))
}

func (p *PetStore) demoTimeOperations(plan *StudyPlan) {
	fmt.Println("\n4. ‚è∞ –†–ê–ë–û–¢–ê –°–û –í–†–ï–ú–ï–ù–ï–ú (–ø–∞–∫–µ—Ç time):")

	now := time.Now()
	daysStudied := int(now.Sub(plan.StartDate).Hours() / 24)
	daysRemaining := int(plan.Deadline.Sub(now).Hours() / 24)

	fmt.Printf("   üóìÔ∏è  –ù–∞—á–∞–ª–æ: %s\n", plan.StartDate.Format("02.01.2006"))
	fmt.Printf("   üéØ –î–µ–¥–ª–∞–π–Ω: %s\n", plan.Deadline.Format("02.01.2006"))
	fmt.Printf("   üìÖ –î–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è: %d\n", daysStudied)
	fmt.Printf("   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: %d\n", daysRemaining)
}

func (p *PetStore) demoLogging() {
	fmt.Println("\n5. üìù –õ–û–ì–ò–†–û–í–ê–ù–ò–ï (–ø–∞–∫–µ—Ç log):")

	logFile, err := os.OpenFile("study_data/progress.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: %v", err)
		return
	}
	defer logFile.Close()

	multiWriter := io.MultiWriter(os.Stdout, logFile)
	logger := log.New(multiWriter, "GO-FOCUS: ", log.Ldate|log.Ltime)

	logger.Println("–°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ Go")
	logger.Println("–í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü: –ì–æ—Ñ–µ—Ä (Golang)")
	logger.Println("–§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!")

	fmt.Printf("   ‚úÖ –õ–æ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ study_data/progress.log\n")
}
