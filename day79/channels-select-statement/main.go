package main

import (
	"fmt"
	"math/rand"
	"time"
)

// Fisherman –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä—ã–±–∞–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É–¥–æ—á–∫–∞–º–∏
type Fisherman struct {
	Name string
}

// NewFisherman —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Ä—ã–±–∞–∫–∞
func NewFisherman(name string) *Fisherman {
	return &Fisherman{Name: name}
}

// Fish –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–π–º–∞–Ω–Ω—É—é —Ä—ã–±—É
type Fish struct {
	Type string
	Size int
}

// FishWithRod —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä—ã–±–∞–ª–∫—É —Å –æ–¥–Ω–æ–π —É–¥–æ—á–∫–æ–π
func (f *Fisherman) FishWithRod(rodNumber int, catch chan<- Fish, quit <-chan bool) {
	fmt.Printf("üé£ %s –∑–∞–∫–∏–Ω—É–ª —É–¥–æ—á–∫—É #%d\n", f.Name, rodNumber)

	for {
		select {
		case <-quit:
			fmt.Printf("   üõë %s —É–±—Ä–∞–ª —É–¥–æ—á–∫—É #%d\n", f.Name, rodNumber)
			return
		default:
			// –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∫–ª–µ–≤–∫–∏
			waitTime := time.Duration(rand.Intn(3000)+1000) * time.Millisecond
			time.Sleep(waitTime)

			// –ü–æ–π–º–∞–ª–∏ —Ä—ã–±—É!
			fishTypes := []string{"–∫–∞—Ä–ø", "—â—É–∫–∞", "–æ–∫—É–Ω—å", "–ª–µ—â", "—Å–æ–º"}
			fish := Fish{
				Type: fishTypes[rand.Intn(len(fishTypes))],
				Size: rand.Intn(50) + 10, // —Ä–∞–∑–º–µ—Ä –≤ —Å–º
			}

			fmt.Printf("   üêü –£–¥–æ—á–∫–∞ #%d: –ø–æ–π–º–∞–ª %s (%d—Å–º)\n", rodNumber, fish.Type, fish.Size)
			catch <- fish
		}
	}
}

// StartFishing –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä—ã–±–∞–ª–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É–¥–æ—á–∫–∞–º–∏
func (f *Fisherman) StartFishing(rods int, duration time.Duration) []Fish {
	fmt.Printf("\nüö§ %s –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä—ã–±–∞–ª–∫—É —Å %d —É–¥–æ—á–∫–∞–º–∏ –Ω–∞ %v\n", f.Name, rods, duration)

	catch := make(chan Fish, 10) // –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É–ª–æ–≤–∞
	quit := make(chan bool)      // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	var caught []Fish

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —É–¥–æ—á–∫–∏
	for i := 1; i <= rods; i++ {
		go f.FishWithRod(i, catch, quit)
	}

	// –¢–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ–π —Ä—ã–±–∞–ª–∫–∏
	timer := time.NewTimer(duration)

	// –°–æ–±–∏—Ä–∞–µ–º —É–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é select
FishingLoop:
	for {
		select {
		case fish := <-catch:
			caught = append(caught, fish)
			fmt.Printf("   üì¶ –î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–µ–¥—Ä–æ: %s\n", fish.Type)

		case <-timer.C:
			fmt.Printf("\n‚è∞ –í—Ä–µ–º—è —Ä—ã–±–∞–ª–∫–∏ –≤—ã—à–ª–æ! %s –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç.\n", f.Name)
			break FishingLoop
		}
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —É–¥–æ—á–∫–∏
	for i := 0; i < rods; i++ {
		quit <- true
	}

	time.Sleep(500 * time.Millisecond) // –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –≥–æ—Ä—É—Ç–∏–Ω–∞–º
	return caught
}

// CookUha –≥–æ—Ç–æ–≤–∏—Ç —É—Ö—É –∏–∑ –ø–æ–π–º–∞–Ω–Ω–æ–π —Ä—ã–±—ã
func CookUha(fishes []Fish, done chan<- string) {
	fmt.Printf("\nüç≤ –ù–∞—á–∏–Ω–∞–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å —É—Ö—É –∏–∑ %d —Ä—ã–±...\n", len(fishes))

	// –°–∏–º—É–ª—è—Ü–∏—è –≥–æ—Ç–æ–≤–∫–∏
	stages := []string{"—á–∏—Å—Ç–∫–∞ —Ä—ã–±—ã", "–≤–∞—Ä–∫–∞ –±—É–ª—å–æ–Ω–∞", "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–≤–æ—â–µ–π", "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∏–±–æ–≤", "—Ç–æ–º–ª–µ–Ω–∏–µ"}

	for _, stage := range stages {
		time.Sleep(1 * time.Second)
		fmt.Printf("   üë®‚Äçüç≥ %s...\n", stage)
	}

	time.Sleep(2 * time.Second)
	done <- fmt.Sprintf("üçú –£—Ö–∞ –≥–æ—Ç–æ–≤–∞! –ò–∑ —Ä—ã–±: %d", len(fishes))
}

// SelectWithTimeout –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç select —Å —Ç–∞–π–º–∞—É—Ç–æ–º
func SelectWithTimeout() {
	fmt.Println("\n‚è∞ SELECT –° –¢–ê–ô–ú–ê–£–¢–û–ú:")
	fmt.Println("====================")

	workChan := make(chan string)
	timeout := time.After(3 * time.Second)

	go func() {
		time.Sleep(5 * time.Second) // –†–∞–±–æ—Ç–∞ –¥–æ–ª—å—à–µ —Ç–∞–π–º–∞—É—Ç–∞
		workChan <- "—Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
	}()

	select {
	case result := <-workChan:
		fmt.Printf("   ‚úÖ %s\n", result)
	case <-timeout:
		fmt.Printf("   ‚ùå –¢–∞–π–º–∞—É—Ç! –†–∞–±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–æ–≤—Ä–µ–º—è\n")
	}
}

// SelectWithDefault –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç select —Å default
func SelectWithDefault() {
	fmt.Println("\n‚ö° SELECT –° DEFAULT:")
	fmt.Println("===================")

	tick := time.Tick(500 * time.Millisecond)
	boom := time.After(3 * time.Second)

	fmt.Println("   –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")

	for {
		select {
		case <-tick:
			fmt.Printf("   üí• —Ç–∏–∫\n")
		case <-boom:
			fmt.Printf("   üí£ –ë–£–ú! –í—Ä–µ–º—è –≤—ã—à–ª–æ!\n")
			return
		default:
			// –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã –Ω–µ –≥–æ—Ç–æ–≤—ã
			fmt.Printf("   üò¥ —Å–ø–∏–º...\n")
			time.Sleep(200 * time.Millisecond)
		}
	}
}

// MultipleChannelsSelect –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
func MultipleChannelsSelect() {
	fmt.Println("\nüéØ SELECT –° –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –ö–ê–ù–ê–õ–ê–ú–ò:")
	fmt.Println("================================")

	channel1 := make(chan string)
	channel2 := make(chan string)
	channel3 := make(chan string)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –≤ —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
	go func() {
		time.Sleep(1 * time.Second)
		channel1 <- "—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ 1"
	}()

	go func() {
		time.Sleep(2 * time.Second)
		channel2 <- "—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ 2"
	}()

	go func() {
		time.Sleep(3 * time.Second)
		channel3 <- "—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ 3"
	}()

	// –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
	for i := 0; i < 3; i++ {
		select {
		case msg1 := <-channel1:
			fmt.Printf("   üì® %s\n", msg1)
		case msg2 := <-channel2:
			fmt.Printf("   üì® %s\n", msg2)
		case msg3 := <-channel3:
			fmt.Printf("   üì® %s\n", msg3)
		}
	}
}

func main() {
	rand.Seed(time.Now().UnixNano())

	fmt.Println("üé£ Day 79: Select Statement - –†—ã–±–∞–ª–∫–∞ –≤ –º–∏—Ä–µ –∫–∞–Ω–∞–ª–æ–≤!")
	fmt.Println("====================================================")

	// –û—Å–Ω–æ–≤–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞
	fisherman := NewFisherman("–°–µ–º—ë–Ω")
	caughtFish := fisherman.StartFishing(3, 8*time.Second)

	// –ì–æ—Ç–æ–≤–∏–º —É—Ö—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	uhaDone := make(chan string)

	fmt.Printf("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–õ–û–í–ê:\n")
	fmt.Printf("   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–π–º–∞–Ω–æ: %d —Ä—ã–±\n", len(caughtFish))

	fishCount := make(map[string]int)
	for _, fish := range caughtFish {
		fishCount[fish.Type]++
	}

	for fishType, count := range fishCount {
		fmt.Printf("   ‚Ä¢ %s: %d —à—Ç\n", fishType, count)
	}

	// –ì–æ—Ç–æ–≤–∏–º —É—Ö—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go CookUha(caughtFish, uhaDone)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ select
	SelectWithTimeout()
	SelectWithDefault()
	MultipleChannelsSelect()

	// –ñ–¥–µ–º, –ø–æ–∫–∞ —É—Ö–∞ —Å–≤–∞—Ä–∏—Ç—Å—è
	select {
	case result := <-uhaDone:
		fmt.Printf("\n%s\n", result)
	case <-time.After(10 * time.Second):
		fmt.Printf("\n‚è∞ –£—Ö–∞ –Ω–µ —Å–≤–∞—Ä–∏–ª–∞—Å—å –≤–æ–≤—Ä–µ–º—è!\n")
	}

	// –ò—Ç–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è
	fmt.Println("\nüéØ –ß–¢–û –ú–´ –ò–ó–£–ß–ò–õ–ò:")
	fmt.Println("   ‚Ä¢ Select - –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
	fmt.Println("   ‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã —Å time.After()")
	fmt.Println("   ‚Ä¢ –¢–∏–∫–µ—Ä—ã —Å time.Tick()")
	fmt.Println("   ‚Ä¢ Default case –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
	fmt.Println("   ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–º–µ–Ω—ã —Å quit-–∫–∞–Ω–∞–ª–∞–º–∏")
	fmt.Println("   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ü–∏–∫–ª–µ")

	fmt.Println("\nüí™ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π select –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Ä—ã–±–∞–∫!")
}

