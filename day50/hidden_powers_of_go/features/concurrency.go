package features

import (
    "fmt"
    "sync"
    "time"
)

func DemoConcurrency() {
    fmt.Println("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ Go")
    fmt.Println("----------------------------------")

    // WaitGroup –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω
    var wg sync.WaitGroup
    results := make(chan string, 5)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä—É—Ç–∏–Ω —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
    for i := 1; i <= 5; i++ {
        wg.Add(1)
        go func(id int) {
            defer wg.Done()
            time.Sleep(time.Duration(id*100) * time.Millisecond)
            results <- fmt.Sprintf("–ì–æ—Ä—É—Ç–∏–Ω–∞ %d –∑–∞–≤–µ—Ä—à–µ–Ω–∞", id)
        }(i)
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
    go func() {
        wg.Wait()
        close(results)
    }()

    // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    fmt.Println("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω:")
    for result := range results {
        fmt.Println("  -", result)
    }

    // –ú—å—é—Ç–µ–∫—Å—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–∏–º –¥–∞–Ω–Ω—ã–º
    var counter int
    var mu sync.Mutex

    for i := 0; i < 10; i++ {
        wg.Add(1)
        go func() {
            defer wg.Done()
            mu.Lock()
            counter++
            mu.Unlock()
        }()
    }

    wg.Wait()
    fmt.Printf("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫: %d\n\n", counter)
}
