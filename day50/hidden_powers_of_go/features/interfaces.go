package features

import (
    "fmt"
    "math"
)

// –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type Shape interface {
    Area() float64
    Perimeter() float64
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
type Circle struct {
    Radius float64
}

func (c Circle) Area() float64 {
    return math.Pi * c.Radius * c.Radius
}

func (c Circle) Perimeter() float64 {
    return 2 * math.Pi * c.Radius
}

type Rectangle struct {
    Width, Height float64
}

func (r Rectangle) Area() float64 {
    return r.Width * r.Height
}

func (r Rectangle) Perimeter() float64 {
    return 2 * (r.Width + r.Height)
}

func DemoInterfaces() {
    fmt.Println("üéØ –ú–æ—â—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤ Go")
    fmt.Println("------------------------")

    shapes := []Shape{
        Circle{Radius: 5},
        Rectangle{Width: 3, Height: 4},
    }

    for _, shape := range shapes {
        fmt.Printf("–§–∏–≥—É—Ä–∞: %T\n", shape)
        fmt.Printf("  –ü–ª–æ—â–∞–¥—å: %.2f\n", shape.Area())
        fmt.Printf("  –ü–µ—Ä–∏–º–µ—Ç—Ä: %.2f\n", shape.Perimeter())
    }

    // –ü—É—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ type assertion
    var anything interface{} = "–ü—Ä–∏–≤–µ—Ç, Go!"
    fmt.Printf("\n–ü—É—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: %v\n", anything)

    if str, ok := anything.(string); ok {
        fmt.Printf("–≠—Ç–æ —Å—Ç—Ä–æ–∫–∞: %s\n", str)
    }

    // Type switch
    switch v := anything.(type) {
    case string:
        fmt.Printf("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–∞ string: %s\n", v)
    case int:
        fmt.Printf("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–∞ int: %d\n", v)
    default:
        fmt.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: %T\n", v)
    }

    fmt.Println()
}
