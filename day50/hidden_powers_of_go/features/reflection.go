package features

import (
    "fmt"
    "reflect"
)

type Person struct {
    Name    string `json:"name" tagExample:"value"`
    Age     int    `json:"age"`
    Address string `json:"address,omitempty"`
}

func DemoReflection() {
    fmt.Println("üîç –†–∞–±–æ—Ç–∞ —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –≤ Go")
    fmt.Println("---------------------------")

    p := Person{Name: "–ê–Ω–Ω–∞", Age: 30, Address: "–ú–æ—Å–∫–≤–∞"}

    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    t := reflect.TypeOf(p)
    v := reflect.ValueOf(p)

    fmt.Printf("–¢–∏–ø: %s\n", t.Name())
    fmt.Printf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: %d\n", t.NumField())

    // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    for i := 0; i < t.NumField(); i++ {
        field := t.Field(i)
        value := v.Field(i)

        fmt.Printf("  –ü–æ–ª–µ: %s\n", field.Name)
        fmt.Printf("    –¢–∏–ø: %s\n", field.Type)
        fmt.Printf("    –ó–Ω–∞—á–µ–Ω–∏–µ: %v\n", value.Interface())
        fmt.Printf("    –¢–µ–≥ json: %s\n", field.Tag.Get("json"))
        fmt.Printf("    –¢–µ–≥ example: %s\n", field.Tag.Get("tagExample"))
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
    p2 := &Person{Name: "–ò–≤–∞–Ω", Age: 25}
    v2 := reflect.ValueOf(p2).Elem()

    if v2.CanSet() {
        nameField := v2.FieldByName("Name")
        if nameField.IsValid() && nameField.CanSet() {
            nameField.SetString("–ü–µ—Ç—Ä")
        }
    }

    fmt.Printf("–ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∏–º—è: %s\n\n", p2.Name)
}
