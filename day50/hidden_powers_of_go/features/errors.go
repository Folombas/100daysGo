package features

import (
    "errors"
    "fmt"
    "time"
)

// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏
type MyError struct {
    When time.Time
    What string
}

func (e MyError) Error() string {
    return fmt.Sprintf("%v: %s", e.When.Format("2006-01-02 15:04:05"), e.What)
}

// –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É
func riskyOperation() error {
    return MyError{
        When: time.Now(),
        What: "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
    }
}

func DemoErrorHandling() {
    fmt.Println("üö® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ Go")
    fmt.Println("-----------------------------------")

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if err := riskyOperation(); err != nil {
        fmt.Printf("–û—à–∏–±–∫–∞: %s\n", err)

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        var myErr MyError
        if errors.As(err, &myErr) {
            fmt.Printf("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: –≤—Ä–µ–º—è=%v, —Å–æ–æ–±—â–µ–Ω–∏–µ=%s\n",
                myErr.When.Format("15:04:05"), myErr.What)
        }
    }

    // –û–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    originalErr := errors.New("–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞")
    wrappedErr := fmt.Errorf("–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: %w", originalErr)

    fmt.Printf("–û–±–µ—Ä–Ω—É—Ç–∞—è –æ—à–∏–±–∫–∞: %s\n", wrappedErr)

    // –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –æ—à–∏–±–æ–∫
    if unwrapped := errors.Unwrap(wrappedErr); unwrapped != nil {
        fmt.Printf("–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s\n", unwrapped)
    }

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    errs := []error{
        errors.New("–ø–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞"),
        errors.New("–≤—Ç–æ—Ä–∞—è –æ—à–∏–±–∫–∞"),
        nil, // –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å nil
    }

    fmt.Println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫:")
    for i, err := range errs {
        if err != nil {
            fmt.Printf("  –û—à–∏–±–∫–∞ %d: %s\n", i+1, err)
        }
    }

    fmt.Println()
}
