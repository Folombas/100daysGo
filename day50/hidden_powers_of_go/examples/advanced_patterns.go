package examples

import (
    "fmt"
    "sync"
    "time"
)

// –§–∞–±—Ä–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
func createMultiplier(factor int) func(int) int {
    return func(x int) int {
        return x * factor
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
func deferredExecution() {
    fmt.Println("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
    defer fmt.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)")

    fmt.Println("–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞...")
}

// –†–∞–±–æ—Ç–∞ —Å –∑–∞–º—ã–∫–∞–Ω–∏—è–º–∏
func closureExample() func() int {
    count := 0
    return func() int {
        count++
        return count
    }
}

func DemoAdvancedPatterns() {
    fmt.Println("üé© –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ Go")
    fmt.Println("---------------------------")

    // –§–∞–±—Ä–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
    double := createMultiplier(2)
    triple := createMultiplier(3)

    fmt.Printf("–£–¥–≤–æ–µ–Ω–∏–µ 5: %d\n", double(5))
    fmt.Printf("–£—Ç—Ä–æ–µ–Ω–∏–µ 5: %d\n", triple(5))

    // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    deferredExecution()

    // –ó–∞–º—ã–∫–∞–Ω–∏—è
    counter := closureExample()
    fmt.Println("–°—á–µ—Ç—á–∏–∫ –∑–∞–º—ã–∫–∞–Ω–∏–π:")
    for i := 0; i < 3; i++ {
        fmt.Printf("  %d\n", counter())
    }

    // –°–∏–Ω–≥–ª—Ç–æ–Ω —Å once
    var once sync.Once
    var instance *string

    getInstance := func() *string {
        once.Do(func() {
            s := "–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä"
            instance = &s
            fmt.Println("–°–æ–∑–¥–∞–Ω —Å–∏–Ω–≥–ª—Ç–æ–Ω")
        })
        return instance
    }

    for i := 0; i < 3; i++ {
        go func() {
            inst := getInstance()
            fmt.Printf("–ü–æ–ª—É—á–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä: %s\n", *inst)
        }()
    }

    time.Sleep(100 * time.Millisecond)
    fmt.Println()
}
