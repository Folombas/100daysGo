package main

import (
	"fmt"
	"log"
	"net/http"
	"time"
)

func main() {
	// –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
	mux := http.NewServeMux()
	
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	mux.HandleFunc("GET /search", searchHandler)
	mux.HandleFunc("GET /user/{id}", userHandler)
	mux.HandleFunc("POST /register", registerHandler)
	mux.HandleFunc("POST /json", jsonHandler)
	
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
	handler := addHeadersMiddleware(mux)
	handler = loggingMiddleware(handler)
	
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
	server := &http.Server{
		Addr:         ":8080",
		Handler:      handler,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
		IdleTimeout:  60 * time.Second,
	}
	
	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	fmt.Println("üëâ –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
	fmt.Println("   GET  /search?q=...&category=...")
	fmt.Println("   GET  /user/{id}")
	fmt.Println("   POST /register (form-data)")
	fmt.Println("   POST /json (application/json)")
	
	log.Fatal(server.ListenAndServe())
}

// Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
func addHeadersMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		next.ServeHTTP(w, r)
	})
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func loggingMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		next.ServeHTTP(w, r)
		log.Printf("%s %s %s %v", r.Method, r.URL.Path, r.RemoteAddr, time.Since(start))
	})
}