package main

import (
	"context"
	"encoding/json"
	"fmt"
	"html/template"
	"io"
	"log"
	"math/rand"
	"net/http"
	_ "net/http/pprof"
	"os"
	"runtime"
	"runtime/trace"
	"sync"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
type TracingConfig struct {
	Duration    time.Duration
	Workers     int
	MaxTasks    int
	TraceFile   string
	Description string
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
type TraceResult struct {
	Status      string
	TraceFile   string
	GoVersion   string
	Duration    time.Duration
	Workers     int
	Tasks       int
	Description string
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	tracingActive bool
	tracingMutex  sync.Mutex
	traceFile     string
)

// worker –∏–º–∏—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
func worker(ctx context.Context, id int, wg *sync.WaitGroup, taskCh <-chan int) {
	defer wg.Done()
	defer trace.StartRegion(ctx, "worker_lifecycle").End()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ taskID
	for range taskCh {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
		region := trace.StartRegion(ctx, "process_task")

		// –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
		switch rand.Intn(4) {
		case 0: // CPU-bound –∑–∞–¥–∞—á–∞
			trace.Log(ctx, "task_type", "cpu_bound")
			doCPUWork(10000000)
		case 1: // I/O-bound –∑–∞–¥–∞—á–∞
			trace.Log(ctx, "task_type", "io_bound")
			time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
		case 2: // –°–µ—Ç–µ–≤–∞—è –∑–∞–¥–∞—á–∞
			trace.Log(ctx, "task_type", "network")
			time.Sleep(time.Duration(rand.Intn(150)) * time.Millisecond)
		case 3: // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
			trace.Log(ctx, "task_type", "waiting")
			time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)
		}

		region.End()
	}
}

// CPU-intensive –∑–∞–¥–∞—á–∞
func doCPUWork(n int) {
	total := 0
	for i := 0; i < n; i++ {
		total += i * i
	}
	_ = total
}

// –ó–∞–ø—É—Å–∫ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
func startTracing(config TracingConfig) error {
	tracingMutex.Lock()
	defer tracingMutex.Unlock()

	if tracingActive {
		return fmt.Errorf("—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
	f, err := os.Create(config.TraceFile)
	if err != nil {
		return err
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
	if err := trace.Start(f); err != nil {
		f.Close()
		return err
	}

	tracingActive = true
	traceFile = config.TraceFile

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
	go func() {
		time.Sleep(config.Duration)
		stopTracing()
	}()

	return nil
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
func stopTracing() {
	tracingMutex.Lock()
	defer tracingMutex.Unlock()

	if tracingActive {
		trace.Stop()
		tracingActive = false
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
func startTraceHandler(w http.ResponseWriter, r *http.Request) {
	var config TracingConfig
	if err := json.NewDecoder(r.Body).Decode(&config); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: "+err.Error(), http.StatusBadRequest)
		return
	}

	if config.Duration == 0 {
		config.Duration = 5 * time.Second
	}
	if config.Workers == 0 {
		config.Workers = 10
	}
	if config.MaxTasks == 0 {
		config.MaxTasks = 50
	}
	if config.TraceFile == "" {
		config.TraceFile = "trace.out"
	}

	if err := startTracing(config); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
	ctx := context.Background()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–¥–∞—á
	taskCh := make(chan int, config.MaxTasks)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
	var wg sync.WaitGroup
	wg.Add(config.Workers)

	for i := 0; i < config.Workers; i++ {
		go worker(ctx, i, &wg, taskCh)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
	go func() {
		for i := 0; i < config.MaxTasks; i++ {
			taskCh <- 1 // –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤–º–µ—Å—Ç–æ ID
		}
		close(taskCh)
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ —Ñ–æ–Ω–µ
	go func() {
		wg.Wait()
	}()

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{
		"status":   "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
		"file":     config.TraceFile,
		"duration": config.Duration.String(),
		"workers":  fmt.Sprintf("%d", config.Workers),
		"tasks":    fmt.Sprintf("%d", config.MaxTasks),
	})
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
func stopTraceHandler(w http.ResponseWriter, r *http.Request) {
	stopTracing()
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{
		"status": "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
		"file":   traceFile,
	})
}

// –°—Ç–∞—Ç—É—Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
func traceStatusHandler(w http.ResponseWriter, r *http.Request) {
	status := "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
	if tracingActive {
		status = "–∞–∫—Ç–∏–≤–Ω–∞"
	}

	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{
		"status":    status,
		"file":      traceFile,
		"goVersion": runtime.Version(),
	})
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
func homeHandler(w http.ResponseWriter, r *http.Request) {
	tmpl := template.Must(template.ParseFiles("templates/index.html"))

	data := struct {
		Title     string
		GoVersion string
	}{
		Title:     "–î–µ–Ω—å 17: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞",
		GoVersion: runtime.Version(),
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	if err := tmpl.Execute(w, data); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞: "+err.Error(), http.StatusInternalServerError)
	}
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
func downloadHandler(w http.ResponseWriter, r *http.Request) {
	if traceFile == "" {
		http.Error(w, "–§–∞–π–ª —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", http.StatusNotFound)
		return
	}

	file, err := os.Open(traceFile)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: "+err.Error(), http.StatusInternalServerError)
		return
	}
	defer file.Close()

	w.Header().Set("Content-Disposition", "attachment; filename="+traceFile)
	w.Header().Set("Content-Type", "application/octet-stream")

	if _, err := io.Copy(w, file); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: "+err.Error(), http.StatusInternalServerError)
	}
}

func main() {
	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
	http.HandleFunc("/", homeHandler)
	http.HandleFunc("/api/start-trace", startTraceHandler)
	http.HandleFunc("/api/stop-trace", stopTraceHandler)
	http.HandleFunc("/api/trace-status", traceStatusHandler)
	http.HandleFunc("/download", downloadHandler)

	port := ":8080"
	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", port)
	log.Println("üîç –î–ª—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
	log.Printf("   http://localhost%s", port)

	log.Fatal(http.ListenAndServe(port, nil))
}
