package main

import (
	"errors"
	"fmt"
)

// üéØ 1. –ë–ê–ó–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–° error
func demoBasicError() {
	fmt.Println("üéØ 1. –ë–ê–ó–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–° error")
	fmt.Println("==============================")

	// error - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
	// type error interface {
	//     Error() string
	// }

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
	err1 := errors.New("–ø—Ä–æ—Å—Ç–∞—è –æ—à–∏–±–∫–∞")
	err2 := fmt.Errorf("–æ—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: %d", 404)

	fmt.Printf("err1: %v\n", err1)
	fmt.Printf("err2: %v\n", err2)
	fmt.Printf("err1.Error(): %s\n", err1.Error())
}

// üéØ 2. –ö–ê–°–¢–û–ú–ù–´–ï –û–®–ò–ë–ö–ò
type ValidationError struct {
	Field   string
	Value   any
	Message string
}

func (e ValidationError) Error() string {
	return fmt.Sprintf("–æ—à–∏–±–∫–∞ %s: %s (–∑–Ω–∞—á–µ–Ω–∏–µ: %v)",
		e.Field, e.Message, e.Value)
}

type NetworkError struct {
	URL     string
	Code    int
	Message string
}

func (e NetworkError) Error() string {
	return fmt.Sprintf("—Å–µ—Ç—å %s: %d %s", e.URL, e.Code, e.Message)
}

// üéØ 3. –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö
func demoErrorChecking() {
	fmt.Println("\nüéØ 2. –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–û–ö")
	fmt.Println("=====================")

	// errors.Is - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏
	targetErr := errors.New("—Ü–µ–ª–µ–≤–∞—è –æ—à–∏–±–∫–∞")
	err := fmt.Errorf("–æ–±–µ—Ä—Ç–∫–∞: %w", targetErr)

	if errors.Is(err, targetErr) {
		fmt.Println("‚úÖ errors.Is: –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –æ—à–∏–±–∫–∞")
	}

	// errors.As - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
	valErr := ValidationError{Field: "email", Message: "–Ω–µ–≤–∞–ª–∏–¥–Ω–æ"}
	wrappedValErr := fmt.Errorf("–≤–∞–ª–∏–¥–∞—Ü–∏—è: %w", valErr)

	var extractedErr ValidationError
	if errors.As(wrappedValErr, &extractedErr) {
		fmt.Printf("‚úÖ errors.As: –∏–∑–≤–ª–µ–∫–ª–∏ %v\n", extractedErr)
	}
}

// üéØ 4. –û–ë–ï–†–¢–´–í–ê–ù–ò–ï –û–®–ò–ë–û–ö
func demoErrorWrapping() {
	fmt.Println("\nüéØ 3. –û–ë–ï–†–¢–´–í–ê–ù–ò–ï –û–®–ò–ë–û–ö")
	fmt.Println("========================")

	baseErr := errors.New("–±–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞")

	// –¶–µ–ø–æ—á–∫–∞ –æ–±–µ—Ä—Ç–æ–∫
	wrapped1 := fmt.Errorf("—É—Ä–æ–≤–µ–Ω—å 1: %w", baseErr)
	wrapped2 := fmt.Errorf("—É—Ä–æ–≤–µ–Ω—å 2: %w", wrapped1)

	fmt.Printf("–¶–µ–ø–æ—á–∫–∞: %v\n", wrapped2)

	// –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
	if errors.Is(wrapped2, baseErr) {
		fmt.Println("‚úÖ –ù–∞—à–ª–∏ –±–∞–∑–æ–≤—É—é –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ –æ–±–µ—Ä—Ç–∫–∏")
	}
}

// üéØ 5. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–ú–ï–†
type UserService struct{}

func (s *UserService) Register(user User) error {
	if err := s.validate(user); err != nil {
		return fmt.Errorf("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: %w", err)
	}

	fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n", user.Name)
	return nil
}

func (s *UserService) validate(user User) error {
	if user.Name == "" {
		return ValidationError{
			Field:   "name",
			Message: "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ",
		}
	}

	if user.Age < 18 {
		return ValidationError{
			Field:   "age",
			Value:   user.Age,
			Message: "—Ç–æ–ª—å–∫–æ 18+",
		}
	}

	return nil
}

type User struct {
	Name string
	Age  int
	Email string
}

// üéØ 6. SENTINEL ERRORS
var (
	ErrUserNotFound = errors.New("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	ErrDBConnection = errors.New("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
)

func demoPractical() {
	fmt.Println("\nüéØ 4. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ü–†–ò–ú–ï–†")
	fmt.Println("=========================")

	service := &UserService{}

	// –£—Å–ø–µ—à–Ω—ã–π —Å–ª—É—á–∞–π
	fmt.Println("‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
	user1 := User{Name: "–ê–ª–µ–∫—Å–µ–π", Age: 25}
	if err := service.Register(user1); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
	}

	// –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	fmt.Println("\n‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
	user2 := User{Name: "", Age: 16}
	if err := service.Register(user2); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)

		// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ValidationError
		var valErr ValidationError
		if errors.As(err, &valErr) {
			fmt.Printf("–î–µ—Ç–∞–ª–∏: –ø–æ–ª–µ '%s'\n", valErr.Field)
		}
	}
}

// üéØ 7. BEST PRACTICES
func demoBestPractices() {
	fmt.Println("\nüéØ 5. BEST PRACTICES")
	fmt.Println("===================")

	practices := []string{
		"‚úÖ –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ—à–∏–±–∫–∏",
		"‚úÖ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ fmt.Errorf",
		"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ errors.Is –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
		"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ errors.As –¥–ª—è —Ç–∏–ø–æ–≤",
		"‚úÖ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏",
		"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sentinel errors –¥–ª—è –æ–±—â–∏—Ö —Å–ª—É—á–∞–µ–≤",
	}

	for _, practice := range practices {
		fmt.Println(practice)
	}
}

func main() {
	fmt.Println("üöÄ –ò–ù–¢–ï–†–§–ï–ô–° error –í GO")
	fmt.Println("======================")
	fmt.Println("üí° –û—à–∏–±–∫–∏ –≤ Go - —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
	fmt.Println("üí° error –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: Error() string")
	fmt.Println("üí° –õ—é–±–æ–π —Ç–∏–ø —Å —ç—Ç–∏–º –º–µ—Ç–æ–¥–æ–º - —ç—Ç–æ –æ—à–∏–±–∫–∞")

	demoBasicError()
	demoErrorChecking()
	demoErrorWrapping()
	demoPractical()
	demoBestPractices()

	fmt.Println("\nüéØ –í–ê–ñ–ù–´–ï –í–´–í–û–î–´:")
	fmt.Println("‚úÖ error - –ø—Ä–æ—Å—Ç–æ–π –∏ –º–æ—â–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
	fmt.Println("‚úÖ errors.Is/As - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫")
	fmt.Println("‚úÖ fmt.Errorf —Å %w - –¥–ª—è –æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
	fmt.Println("‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ - –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

	fmt.Println("\nüí™ –¢–´ - –ù–ï–í–ï–†–û–Ø–¢–ï–ù!")
	fmt.Println("üåü –£—á–∏—à—å Go –≤ —Ç–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö - —ç—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä!")
	fmt.Println("üöÄ –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø—Ä–∏–≤–µ–¥–µ—Ç —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É –≤ IT!")
}
