package main

import (
	"fmt"
	"runtime"
	"runtime/debug"
	"time"
)

// CoffeePotatoHybrid –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞—à –∫–æ—Ñ–µ-–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
type CoffeePotatoHybrid struct {
	Name        string
	GrowthStage int
}

// NewCoffeePotato —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≥–∏–±—Ä–∏–¥ –∫–æ—Ñ–µ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º - –ö–æ—Ñ–µ—Ä—Ç–æ—Ñ–µ–ª—å
func NewCoffeePotato(name string) *CoffeePotatoHybrid {
	return &CoffeePotatoHybrid{
		Name:        name,
		GrowthStage: 0,
	}
}

// Grow –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã—Ä–∞—Å—Ç–∏—Ç—å –≥–∏–±—Ä–∏–¥ - –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!
func (cp *CoffeePotatoHybrid) Grow() {
	cp.GrowthStage++
	fmt.Printf("üå± %s —Ä–∞—Å—Ç–µ—Ç... —ç—Ç–∞–ø %d\n", cp.Name, cp.GrowthStage)

	switch cp.GrowthStage {
	case 1:
		cp.simulateRootProblem()
	case 2:
		cp.simulateNutritionProblem()
	case 3:
		cp.simulateGeneticProblem()
	default:
		fmt.Printf("‚úÖ %s —Ä–∞—Å—Ç–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n", cp.Name)
	}
}

func (cp *CoffeePotatoHybrid) simulateRootProblem() {
	fmt.Println("   üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ—Ä–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π!")
	fmt.Printf("   üìç Stack Trace:\n")
	debug.PrintStack()
}

func (cp *CoffeePotatoHybrid) simulateNutritionProblem() {
	fmt.Println("   üö® –î–∏—Å–±–∞–ª–∞–Ω—Å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤!")

	defer func() {
		if r := recover(); r != nil {
			fmt.Printf("   üí• –ü–∞–Ω–∏–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞: %v\n", r)
			fmt.Printf("   üìç Stack Trace:\n%s\n", debug.Stack())
		}
	}()

	panic("–°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ö–û–§–ï! –ì–∏–±—Ä–∏–¥ –ø–µ—Ä–µ–≤–æ–∑–±—É–∂–¥–µ–Ω!")
}

func (cp *CoffeePotatoHybrid) simulateGeneticProblem() {
	fmt.Println("   üö® –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!")

	buf := make([]byte, 1024)
	n := runtime.Stack(buf, true)
	fmt.Printf("   üìç –ü–æ–¥—Ä–æ–±–Ω—ã–π Stack Trace:\n%s\n", string(buf[:n]))
}

// BrazilianResearchTeam –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±—Ä–∞–∑–∏–ª—å—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π
type BrazilianResearchTeam struct {
	Members []string
}

func (brt *BrazilianResearchTeam) AnalyzeHybrid(hybrid *CoffeePotatoHybrid) {
	fmt.Printf("\nüáßüá∑ –ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç %s...\n", hybrid.Name)
	brt.analyzeMemory()
	brt.analyzeGoroutines()
}

func (brt *BrazilianResearchTeam) analyzeMemory() {
	fmt.Println("   üß† –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏:")

	var m runtime.MemStats
	runtime.ReadMemStats(&m)

	fmt.Printf("   ‚Ä¢ –ü–∞–º—è—Ç—å: %v MiB\n", m.Alloc/1024/1024)
	fmt.Printf("   ‚Ä¢ –ì–æ—Ä—É—Ç–∏–Ω—ã: %d\n", runtime.NumGoroutine())
}

func (brt *BrazilianResearchTeam) analyzeGoroutines() {
	fmt.Println("   üßµ –ê–Ω–∞–ª–∏–∑ –≥–æ—Ä—É—Ç–∏–Ω:")

	buf := make([]byte, 1024)
	n := runtime.Stack(buf, true)
	fmt.Printf("   ‚Ä¢ Stack –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω:\n%s\n", string(buf[:n]))
}

// AdvancedDebugging –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
func AdvancedDebugging() {
	fmt.Println("\nüîß –ü–†–û–î–í–ò–ù–£–¢–´–ï –¢–ï–•–ù–ò–ö–ò DEBUGGING:")

	// 1. –ß—Ç–µ–Ω–∏–µ stack trace –∏–∑ panic
	fmt.Println("1. –ê–Ω–∞–ª–∏–∑ stack trace –∏–∑ panic:")
	func() {
		defer func() {
			if r := recover(); r != nil {
				fmt.Printf("   üí• –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –ø–∞–Ω–∏–∫–∞: %v\n", r)
				fmt.Printf("   üìç Stack trace:\n%s\n", debug.Stack())
			}
		}()

		panic("–≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –ü–ê–ù–ò–ö–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê")
	}()
}

// DebuggingTools –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
func DebuggingTools() {
	fmt.Println("\nüõ†Ô∏è –í–°–¢–†–û–ï–ù–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ DEBUGGING:")

	fmt.Println("1. runtime.Caller() - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∑–æ–≤–µ:")
	for i := 0; i < 2; i++ {
		if pc, file, line, ok := runtime.Caller(i); ok {
			fn := runtime.FuncForPC(pc)
			fmt.Printf("   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å %d: %s (%s:%d)\n", i, fn.Name(), file, line)
		}
	}

	fmt.Printf("\n2. –í–µ—Ä—Å–∏—è Go: %s\n", runtime.Version())
	fmt.Printf("3. GOMAXPROCS: %d\n", runtime.GOMAXPROCS(0))
}

func main() {
	fmt.Println("üå±‚òï Day 77: Stack Traces & Debugging - –ö–æ—Ñ–µ-–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã!")
	fmt.Println("======================================================================")

	// –°–æ–∑–¥–∞–µ–º –Ω–∞—à —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≥–∏–±—Ä–∏–¥
	hybrid := NewCoffeePotato("–ö–æ—Ñ–µ—Ä—Ç–æ—Ñ–µ–ª—å-2030")

	fmt.Println("üß™ –ù–ê–ß–ò–ù–ê–ï–ú –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢:")

	// –í—ã—Ä–∞—â–∏–≤–∞–µ–º –≥–∏–±—Ä–∏–¥ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤
	for i := 0; i < 4; i++ {
		hybrid.Grow()
		time.Sleep(500 * time.Millisecond)
	}

	// –ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	brazilianTeam := &BrazilianResearchTeam{
		Members: []string{"–ö–∞—Ä–ª–æ—Å", "–ú–∞—Ä–∏—è", "–§–µ—Ä–Ω–∞–Ω–¥–æ"},
	}
	brazilianTeam.AnalyzeHybrid(hybrid)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ç–µ—Ö–Ω–∏–∫
	AdvancedDebugging()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã debugging
	DebuggingTools()

	// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
	fmt.Println("\nüí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:")
	fmt.Println("   ‚Ä¢ debug.PrintStack() - –±—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞")
	fmt.Println("   ‚Ä¢ runtime.Stack() - –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è")
	fmt.Println("   ‚Ä¢ debug.Stack() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ []byte")
	fmt.Println("   ‚Ä¢ runtime.Caller() - –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

	fmt.Println("\nüéØ –í–´–í–û–î–´:")
	fmt.Println("   ‚Ä¢ Stack traces –≤–µ–¥—É—Ç –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–±–ª–µ–º—ã")
	fmt.Println("   ‚Ä¢ Debugging —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
	fmt.Println("   ‚Ä¢ –ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥: —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ!")

	fmt.Println("\nüí™ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —É–º–µ–µ—à—å —á–∏—Ç–∞—Ç—å —Å–ª–µ–¥—ã –æ—à–∏–±–æ–∫!")
}
