package main

import (
	"bufio"
	"fmt"
	"net"
	"strings"
	"time"
)

func handleRequest(conn net.Conn) {
	defer conn.Close()
	
	clientAddr := conn.RemoteAddr().String()
	fmt.Printf("‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: %s\n", clientAddr)
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	conn.Write([]byte("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ TCP-—Å–µ—Ä–≤–µ—Ä!\n"))
	conn.Write([]byte("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"))
	conn.Write([]byte("  time   - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"))
	conn.Write([]byte("  echo   - —ç—Ö–æ-–æ—Ç–≤–µ—Ç\n"))
	conn.Write([]byte("  upper  - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä\n"))
	conn.Write([]byte("  quit   - –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è\n\n"))
	
	scanner := bufio.NewScanner(conn)
	for scanner.Scan() {
		input := strings.TrimSpace(scanner.Text())
		
		switch strings.ToLower(input) {
		case "quit":
			conn.Write([]byte("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n"))
			fmt.Printf("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: %s\n", clientAddr)
			return
			
		case "time":
			currentTime := time.Now().Format("2006-01-02 15:04:05")
			response := fmt.Sprintf("‚è± –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: %s\n", currentTime)
			conn.Write([]byte(response))
			
		case "echo":
			conn.Write([]byte("üîä –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ö–æ-–æ—Ç–≤–µ—Ç–∞: "))
			scanner.Scan()
			echoText := scanner.Text()
			conn.Write([]byte(fmt.Sprintf("üîî –≠—Ö–æ: %s\n", echoText)))
			
		case "upper":
			conn.Write([]byte("üîº –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: "))
			scanner.Scan()
			upperText := strings.ToUpper(scanner.Text())
			conn.Write([]byte(fmt.Sprintf("üî† –†–µ–∑—É–ª—å—Ç–∞—Ç: %s\n", upperText)))
			
		case "":
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
			continue
			
		default:
			conn.Write([]byte("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"))
		}
		
		// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
		conn.Write([]byte("\n> "))
	}
	
	if err := scanner.Err(); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v\n", err)
	}
}