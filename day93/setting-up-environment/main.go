package main

import (
	"fmt"
	"os"
	"os/exec"
	"runtime"
	"strings"
	"time"
)

// EnvironmentChecker –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è Go
type EnvironmentChecker struct {
	Name     string
	Version  string
	IsReady  bool
	Problems []string
}

func main() {
	fmt.Println("üéÆ –î–µ–Ω—å 93: '–ì–æ—à–∞ –≤ —Å—Ç—Ä–∞–Ω–µ Go-—á—É–¥–µ—Å' üéÆ")
	fmt.Println("========================================")

	checker := &EnvironmentChecker{
		Name:    "–ì–æ—à–∞",
		Version: "1.21",
	}

	checker.WelcomeMessage()
	checker.CheckGoInstallation()
	checker.CheckEnvironmentVariables()
	checker.CheckProjectStructure()
	checker.CheckDevelopmentTools()
	checker.ShowResults()
	checker.MotivationalMessage()
}

func (e *EnvironmentChecker) WelcomeMessage() {
	fmt.Printf("\nüëã –ü—Ä–∏–≤–µ—Ç, —è %s!\n", e.Name)
	fmt.Println("–ü–æ—Å–ª–µ 10 –ª–µ—Ç –ø–æ–∏—Å–∫–æ–≤ —è –Ω–∞—à–µ–ª —Å–≤–æ–π —è–∑—ã–∫ - Go! üöÄ")
	fmt.Println("–°–µ–≥–æ–¥–Ω—è –º—ã –Ω–∞—Å—Ç—Ä–æ–∏–º –∏–¥–µ–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!")
	time.Sleep(2 * time.Second)
}

func (e *EnvironmentChecker) CheckGoInstallation() {
	fmt.Println("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Go...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Go
	cmd := exec.Command("go", "version")
	output, err := cmd.Output()

	if err != nil {
		e.Problems = append(e.Problems, "‚ùå Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω PATH")
		e.IsReady = false
		return
	}

	fmt.Printf("‚úÖ Go —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", string(output))
	e.IsReady = true

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
	if strings.Contains(string(output), "go1.21") {
		fmt.Println("‚úÖ –í–µ—Ä—Å–∏—è Go —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (1.21+)")
	} else {
		fmt.Println("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å Go –¥–æ –≤–µ—Ä—Å–∏–∏ 1.21 –∏–ª–∏ –≤—ã—à–µ")
	}
}

func (e *EnvironmentChecker) CheckEnvironmentVariables() {
	fmt.Println("\nüåç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º GOPATH
	gopath := os.Getenv("GOPATH")
	if gopath != "" {
		fmt.Printf("‚úÖ GOPATH: %s\n", gopath)
	} else {
		fmt.Println("‚úÖ GOPATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º GOROOT
	goroot := os.Getenv("GOROOT")
	if goroot != "" {
		fmt.Printf("‚úÖ GOROOT: %s\n", goroot)
	} else {
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º GOROOT
		cmd := exec.Command("go", "env", "GOROOT")
		output, err := cmd.Output()
		if err == nil {
			fmt.Printf("‚úÖ GOROOT: %s", string(output))
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	fmt.Println("\nüìä –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
	cmd := exec.Command("go", "env", "GOOS")
	osType, _ := cmd.Output()
	fmt.Printf("   GOOS: %s", osType)

	cmd = exec.Command("go", "env", "GOARCH")
	arch, _ := cmd.Output()
	fmt.Printf("   GOARCH: %s", arch)
}

func (e *EnvironmentChecker) CheckProjectStructure() {
	fmt.Println("\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")

	// –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
	wd, _ := os.Getwd()
	fmt.Printf("üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s\n", wd)

	// –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
	recommendedStructure := []string{
		"cmd/",
		"internal/",
		"pkg/",
		"api/",
		"web/",
		"configs/",
		"scripts/",
		"build/",
		"deployments/",
		"test/",
	}

	fmt.Println("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ Go:")
	for _, dir := range recommendedStructure {
		fmt.Printf("   üìÅ %s\n", dir)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º go.mod
	if _, err := os.Stat("go.mod"); err == nil {
		fmt.Println("‚úÖ go.mod –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
	} else {
		fmt.Println("‚ùå go.mod –Ω–µ –Ω–∞–π–¥–µ–Ω - –∑–∞–ø—É—Å—Ç–∏—Ç–µ: go mod init <module-name>")
		e.Problems = append(e.Problems, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç go.mod —Ñ–∞–π–ª")
	}
}

func (e *EnvironmentChecker) CheckDevelopmentTools() {
	fmt.Println("\nüõ†Ô∏è  –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...")

	tools := map[string]string{
		"gopls":    "Language Server Protocol –¥–ª—è Go",
		"staticcheck": "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞",
		"golangci-lint": "–ú—É–ª—å—Ç–∏-–ª–∏–Ω—Ç–µ—Ä –¥–ª—è Go",
		"dlv":      "–û—Ç–ª–∞–¥—á–∏–∫ Delve",
	}

	for tool, description := range tools {
		cmd := exec.Command("which", tool)
		if runtime.GOOS == "windows" {
			cmd = exec.Command("where", tool)
		}

		if err := cmd.Run(); err == nil {
			fmt.Printf("‚úÖ %s: %s\n", tool, description)
		} else {
			fmt.Printf("‚ö†Ô∏è  %s: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (%s)\n", tool, description)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º IDE/—Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
	fmt.Println("\nüíª –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã:")
	editors := []string{"VSCode", "GoLand", "Vim —Å vim-go", "Neovim"}
	for _, editor := range editors {
		fmt.Printf("   ‚ú® %s\n", editor)
	}
}

func (e *EnvironmentChecker) ShowResults() {
	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø")
	fmt.Println(strings.Repeat("=", 50))

	if e.IsReady && len(e.Problems) == 0 {
		fmt.Println("üéâ –í–ê–£! –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ò–î–ï–ê–õ–¨–ù–û! üéâ")
		fmt.Println("üöÄ –ì–æ—à–∞ –≥–æ—Ç–æ–≤ –ø–æ–∫–æ—Ä—è—Ç—å Go –∏ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã!")
	} else if e.IsReady {
		fmt.Printf("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –Ω–æ –µ—Å—Ç—å %d –ø—Ä–æ–±–ª–µ–º(—ã)\n", len(e.Problems))
		for _, problem := range e.Problems {
			fmt.Printf("   üîß %s\n", problem)
		}
	} else {
		fmt.Println("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}
}

func (e *EnvironmentChecker) MotivationalMessage() {
	messages := []string{
		"\nüí´ –ü–æ–º–Ω–∏, –ì–æ—à–∞: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–∞!",
		"üìö –ò–∑—É—á–∞–π –ø–æ —á—É—Ç—å-—á—É—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –ª—É—á—à–µ, —á–µ–º –Ω–∏—á–µ–≥–æ!",
		"üéØ –° —Ñ–æ–∫—É—Å–æ–º –Ω–∞ Go —Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å —É—Å–ø–µ—Ö–∞!",
		"ü§ù –¢–≤–æ–µ –°–î–í–ì - —ç—Ç–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞, –∞ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ!",
		"üöÄ –í—Å–µ–≥–æ 7 –¥–Ω–µ–π –¥–æ 100-–¥–Ω–µ–≤–Ω–æ–≥–æ —Ñ–∏–Ω–∏—à–∞ - —Ç—ã –º–æ–ª–æ–¥–µ—Ü!",
	}

	fmt.Println("\n" + strings.Repeat("‚ú®", 25))
	fmt.Println(messages[time.Now().Day()%len(messages)])
	fmt.Println(strings.Repeat("‚ú®", 25))

	fmt.Printf("\n‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: %s\n", time.Now().Format("2006-01-02 15:04:05"))
	fmt.Println("üéØ –°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å: Day94 - –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–∑—É—á–µ–Ω–∏–µ!")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
func CreateProjectStructure(projectName string) error {
	dirs := []string{
		"cmd/" + projectName,
		"internal/app",
		"pkg/utils",
		"api",
		"web/static",
		"web/templates",
		"configs",
		"scripts",
		"build",
		"deployments",
		"test",
	}

	for _, dir := range dirs {
		err := os.MkdirAll(dir, 0755)
		if err != nil {
			return err
		}
		fmt.Printf("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: %s\n", dir)
	}

	return nil
}
