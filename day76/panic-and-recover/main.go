package main

import (
	"fmt"
	"math/rand"
	"time"
)

// Cow –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–º–Ω—É—é –∫–æ—Ä–æ–≤—É —Å AI-–¥–∞—Ç—á–∏–∫–∞–º–∏
type Cow struct {
	Name     string
	Mood     string
	Milk     float64
	AIStatus string
}

// NewCow —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é AI-–∫–æ—Ä–æ–≤—É
func NewCow(name string) *Cow {
	return &Cow{
		Name:     name,
		Mood:     "—Å–ø–æ–∫–æ–π–Ω–∞—è",
		Milk:     5.0,
		AIStatus: "–∞–∫—Ç–∏–≤–µ–Ω",
	}
}

// MilkCow –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–æ–∏—Ç—å –∫–æ—Ä–æ–≤—É - –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø–∞–Ω–∏–∫—É!
func MilkCow(cow *Cow) {
	defer func() {
		if r := recover(); r != nil {
			fmt.Printf("üö® CRITICAL: AI-–¥–æ—è—Ä–∫–∞ –≤ –ø–∞–Ω–∏–∫–µ! –ü—Ä–∏—á–∏–Ω–∞: %v\n", r)
			fmt.Println("üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
			cow.AIStatus = "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
			time.Sleep(2 * time.Second)
			cow.AIStatus = "—Å—Ç–∞–±–∏–ª–µ–Ω"
			fmt.Println("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.")
		}
	}()

	fmt.Printf("ü§ñ AI-–¥–æ—è—Ä–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–∏—Ç—å %s...\n", cow.Name)
	time.Sleep(1 * time.Second)

	// –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
	switch rand.Intn(5) {
	case 0:
		panic("–ö–û–†–û–í–ê –£–î–ê–†–ò–õ–ê –ù–û–ì–û–ô! AI-—Å–µ–Ω—Å–æ—Ä—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã!")
	case 1:
		panic("–ü–ï–†–ï–ì–†–£–ó–ö–ê AI-–°–ò–°–¢–ï–ú–´: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–æ—Ä–æ–≤—ã!")
	case 2:
		panic("–°–ë–û–ô –ú–û–õ–û–ö–û–ü–†–û–í–û–î–ê: –¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ!")
	case 3:
		// –£—Å–ø–µ—à–Ω–∞—è –¥–æ–π–∫–∞
		milk := cow.Milk * (0.8 + rand.Float64()*0.4)
		fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–æ–µ–Ω–æ: %.1f –ª–∏—Ç—Ä–æ–≤ –º–æ–ª–æ–∫–∞\n", milk)
		cow.Mood = "–¥–æ–≤–æ–ª—å–Ω–∞—è"
	default:
		// –ï—â–µ –æ–¥–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –¥–æ–π–∫–∞
		milk := cow.Milk * (0.7 + rand.Float64()*0.3)
		fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–æ–µ–Ω–æ: %.1f –ª–∏—Ç—Ä–æ–≤ –º–æ–ª–æ–∫–∞\n", milk)
		cow.Mood = "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è"
	}
}

// SmartMilkingSystem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–æ–µ–Ω–∏—è
type SmartMilkingSystem struct {
	Cows         []*Cow
	PanicCount   int
	SuccessCount int
}

// NewSmartMilkingSystem —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
func NewSmartMilkingSystem() *SmartMilkingSystem {
	return &SmartMilkingSystem{
		Cows: []*Cow{
			NewCow("–ë—É—Ä—ë–Ω–∫–∞-3000"),
			NewCow("AI-–ó–æ—Ä—å–∫–∞"),
			NewCow("–ö–∏–±–µ—Ä-–†–æ–º–∞—à–∫–∞"),
			NewCow("–ù–∞–Ω–æ-–ú–∞–Ω—å–∫–∞"),
		},
	}
}

// StartMilkingSession –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–æ–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–∞–Ω–∏–∫–∏
func (sms *SmartMilkingSystem) StartMilkingSession() {
	fmt.Println("\nüêÑ –ó–ê–ü–£–°–ö AI-–°–ò–°–¢–ï–ú–´ –î–û–ï–ù–ò–Ø –ö–û–†–û–í")
	fmt.Println("==========================================")

	for _, cow := range sms.Cows {
		// –ó–∞—â–∏—â–∞–µ–º –∫–∞–∂–¥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–æ–µ–Ω–∏—è recover'–æ–º
		func() {
			defer func() {
				if r := recover(); r != nil {
					sms.PanicCount++
					fmt.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–∞–Ω–∏–∫ - %d, —É—Å–ø–µ—Ö–æ–≤ - %d\n\n",
						sms.PanicCount, sms.SuccessCount)
				}
			}()

			MilkCow(cow)
			sms.SuccessCount++
		}()
		time.Sleep(1 * time.Second)
	}
}

// TestVariousPanics –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–∞–Ω–∏–∫
func TestVariousPanics() {
	fmt.Println("\nüî¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í PANIC:")
	fmt.Println("==================================")

	// 1. –ü–∞–Ω–∏–∫–∞ —Å nil pointer
	fmt.Println("1. Nil pointer dereference:")
	func() {
		defer func() {
			if r := recover(); r != nil {
				fmt.Printf("   –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: %v\n", r)
			}
		}()
		var cow *Cow
		fmt.Println(cow.Name) // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞–Ω–∏–∫–∞!
	}()

	// 2. –ü–∞–Ω–∏–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –º–∞—Å—Å–∏–≤–∞
	fmt.Println("\n2. –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞:")
	func() {
		defer func() {
			if r := recover(); r != nil {
				fmt.Printf("   –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: %v\n", r)
			}
		}()
		cows := make([]*Cow, 2)
		fmt.Println(cows[10]) // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞–Ω–∏–∫–∞!
	}()

	// 3. –ü–∞–Ω–∏–∫–∞ —Å –¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –Ω–æ–ª—å
	fmt.Println("\n3. –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å:")
	func() {
		defer func() {
			if r := recover(); r != nil {
				fmt.Printf("   –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: %v\n", r)
			}
		}()
		x := 10
		y := 0
		fmt.Println(x / y) // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–∞–Ω–∏–∫–∞!
	}()

	// 4. –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ panic
	fmt.Println("\n4. –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ panic():")
	func() {
		defer func() {
			if r := recover(); r != nil {
				fmt.Printf("   –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ: %v\n", r)
			}
		}()
		panic("–≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –ü–ê–ù–ò–ö–ê: —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É!")
	}()
}

// AdvancedRecovery –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
func AdvancedRecovery() {
	fmt.Println("\nüéØ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:")
	fmt.Println("=====================================")

	processCow := func(name string) (result string, err error) {
		defer func() {
			if r := recover(); r != nil {
				err = fmt.Errorf("–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–∞–Ω–∏–∫–∏: %v", r)
			}
		}()

		// –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–∞–Ω–∏–∫–æ–π
		if rand.Intn(2) == 0 {
			panic("–≤–Ω–µ–∑–∞–ø–Ω—ã–π —Å–±–æ–π –≤ AI-–∞–Ω–∞–ª–∏–∑–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ—Ä–æ–≤—ã")
		}

		return fmt.Sprintf("–ö–æ—Ä–æ–≤–∞ %s —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ AI-—Å–∏—Å—Ç–µ–º–æ–π", name), nil
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ–≤
	cows := []string{"AI-–ë–µ–ª–∫–∞", "–ö–∏–±–µ—Ä-–°—Ç—Ä–µ–ª–∫–∞", "–ù–∞–Ω–æ-–ü—è—Ç–Ω–∞—à–∫–∞"}
	for _, cow := range cows {
		result, err := processCow(cow)
		if err != nil {
			fmt.Printf("‚ùå %s: %v\n", cow, err)
		} else {
			fmt.Printf("‚úÖ %s\n", result)
		}
	}
}

// ChineseStudentAI –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –∏—Ö AI
type ChineseStudentAI struct {
	Name string
}

func (cs *ChineseStudentAI) AnalyzeCowBehavior(cow *Cow) {
	defer func() {
		if r := recover(); r != nil {
			fmt.Printf("üá®üá≥ %s: ‰∏çÁî®ÊãÖÂøÉ! Êàë‰ª¨‰øÆÂ§ç‰∫ÜÈóÆÈ¢ò: %v\n", cs.Name, r)
		}
	}()

	fmt.Printf("\nüá®üá≥ %s –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ %s...\n", cs.Name, cow.Name)

	// –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä—É—é—Ç —Å–ª–æ–∂–Ω—ã–µ AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã
	complexCalculations := []func(){
		func() { panic("Á•ûÁªèÁΩëÁªúËøáËΩΩ: Â§™Â§öÁöÑÂ•∂Áâõ —ç–º–æ—Ü–∏–π!") },
		func() { panic("Êï∞ÊçÆÊ∫¢Âá∫: ÁâõÂ•∂ÊµÅÈáè –ø—Ä–µ–≤—ã—Å–∏–ª –æ–∂–∏–¥–∞–Ω–∏—è!") },
		func() { fmt.Println("ÂàÜÊûêÊàêÂäü: Â•∂Áâõ —Å—á–∞—Å—Ç–ª–∏–≤–∞!") },
	}

	complexCalculations[rand.Intn(len(complexCalculations))]()
}

func main() {
	rand.Seed(time.Now().UnixNano())

	fmt.Println("ü§ñ Day 76: Panic and Recover - AI-–¥–æ—è—Ä–∫–∞ –∏ –Ω–µ–ø–æ–∫–æ—Ä–Ω—ã–µ –∫–æ—Ä–æ–≤—ã!")
	fmt.Println("==========================================================")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∞–Ω–∏–∫
	TestVariousPanics()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ–µ–Ω–∏—è
	system := NewSmartMilkingSystem()

	// –ü—Ä–æ–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π –¥–æ–µ–Ω–∏—è
	fmt.Println("\nüèÅ –ó–ê–ü–£–°–ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´:")
	for i := 1; i <= 3; i++ {
		fmt.Printf("\n--- –°–µ—Å—Å–∏—è –¥–æ–µ–Ω–∏—è #%d ---\n", i)
		system.StartMilkingSession()
		time.Sleep(2 * time.Second)
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
	AdvancedRecovery()

	// –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä—É—é—Ç —Å–≤–æ–∏ AI-–∞–ª–≥–æ—Ä–∏—Ç–º—ã
	fmt.Println("\nüë®‚Äçüéì –ö–ò–¢–ê–ô–°–ö–ò–ï –°–¢–£–î–ï–ù–¢–´ –¢–ï–°–¢–ò–†–£–Æ–¢ AI:")
	fmt.Println("=================================")

	students := []*ChineseStudentAI{
		{Name: "Âº†‰ºü"},
		{Name: "ÊùéÂ®ú"},
		{Name: "ÁéãÈπè"},
	}

	cow := NewCow("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ—Ä–æ–≤–∞")
	for _, student := range students {
		student.AnalyzeCowBehavior(cow)
		time.Sleep(1 * time.Second)
	}

	// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	fmt.Println("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
	fmt.Printf("   –£—Å–ø–µ—à–Ω—ã—Ö –¥–æ–µ–∫: %d\n", system.SuccessCount)
	fmt.Printf("   –ü–∞–Ω–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %d\n", system.PanicCount)
	fmt.Printf("   –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %.1f%%\n",
		float64(system.SuccessCount)/float64(system.SuccessCount+system.PanicCount)*100)

	fmt.Println("\nüéØ –í–´–í–û–î–´ –û PANIC/RECOVER:")
	fmt.Println("   ‚Ä¢ Panic - –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π")
	fmt.Println("   ‚Ä¢ Recover - —Ç–æ–ª—å–∫–æ –≤ defer-—Ñ—É–Ω–∫—Ü–∏—è—Ö")
	fmt.Println("   ‚Ä¢ –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å - –æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ —á–µ—Ä–µ–∑ error")
	fmt.Println("   ‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è: –≥–æ—Ä—É—Ç–∏–Ω, middleware, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤")

	fmt.Println("\nüí™ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è AI-–¥–æ—è—Ä–∫–∞ –Ω–µ—É—è–∑–≤–∏–º–∞ –¥–ª—è –∫–æ—Ä–æ–≤—å–∏—Ö –∫–∞–ø—Ä–∏–∑–æ–≤!")
}
