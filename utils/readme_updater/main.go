package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strings"
	"sync"
	"text/template"
	"time"
	"unicode/utf8"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
const (
	TotalDays        = 100
	ProgressBarSize  = 40
	DataFilePath     = "utils/readme_updater/progress.json"
	TemplateFilePath = "utils/readme_updater/template.md"
	ReadmeFilePath   = "README.md"
	StartDate        = "2025-07-25T00:00:00Z"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type ProgressData struct {
	StartDate        string
	CurrentDay       int
	Streak           int
	ProgressTable    string
	ProgressPercent  int
	ProgressPadding  string
	ProgressBar      string
	DaysWithoutGames int
	CommitCount      string
	LinesOfCode      int
	NextMilestone    int
	LastUpdated      string
}

type DayRecord struct {
	Number     int    `json:"number"`
	Date       string `json:"date"`
	Title      string `json:"title"`
	KeyInsight string `json:"keyInsight"`
	LinesCode  int    `json:"linesCode"`
}

type ProjectData struct {
	StartDate string      `json:"startDate"`
	Days      []DayRecord `json:"days"`
}

func main() {
	startTime := time.Now()
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ README...")

	// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
	projectData := loadProjectData()
	currentDay := calculateCurrentDay(projectData.StartDate)

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
	addNewDayIfNeeded(&projectData)

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
	templateData := ProgressData{
		StartDate:        formatDate(projectData.StartDate),
		CurrentDay:       currentDay,
		Streak:           calculateStreak(projectData.Days),
		ProgressTable:    generateProgressTable(projectData.Days),
		ProgressPercent:  calculateProgressPercent(currentDay),
		ProgressPadding:  calculateProgressPadding(currentDay),
		ProgressBar:      generateProgressBar(currentDay),
		DaysWithoutGames: currentDay,
		CommitCount:      getCommitCount(),
		LinesOfCode:      countLinesOfCode(),
		NextMilestone:    calculateNextMilestone(currentDay),
		LastUpdated:      time.Now().Format("02.01.2006 15:04:05"),
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README
	if err := generateReadme(templateData); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ README: %v\n", err)
		os.Exit(1)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	saveProjectData(projectData)

	fmt.Printf("‚úÖ README —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∑–∞ %v\n", time.Since(startTime))
	fmt.Printf("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: %d%% | üöÄ –°—Ç—Ä–∏–∫: %d –¥–Ω–µ–π | üíæ –ö–æ–º–º–∏—Ç–æ–≤: %s | üìú –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: %d\n",
		templateData.ProgressPercent, templateData.Streak, templateData.CommitCount, templateData.LinesOfCode)
}

func loadProjectData() ProjectData {
	data, err := os.ReadFile(DataFilePath)
	if err != nil {
		fmt.Println("‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
		return ProjectData{
			StartDate: StartDate,
			Days:      []DayRecord{},
		}
	}

	var projectData ProjectData
	if err := json.Unmarshal(data, &projectData); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
		return ProjectData{
			StartDate: StartDate,
			Days:      []DayRecord{},
		}
	}
	return projectData
}

func saveProjectData(data ProjectData) {
	file, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
		return
	}

	if err := os.WriteFile(DataFilePath, file, 0644); err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: %v\n", err)
	}
}

func calculateCurrentDay(startDate string) int {
	start, err := time.Parse(time.RFC3339, startDate)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: %v\n", err)
		start, _ = time.Parse(time.RFC3339, StartDate)
	}

	days := int(time.Since(start).Hours() / 24)
	return days // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–µ–∑ +1
}

func calculateStreak(days []DayRecord) int {
	if len(days) == 0 {
		return 0
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–Ω–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
	dateMap := make(map[string]bool)
	for _, day := range days {
		dateMap[day.Date] = true
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–∫
	streak := 0
	currentDate := time.Now()

	for {
		dateStr := currentDate.Format("02.01.2006")
		if !dateMap[dateStr] {
			break
		}
		streak++
		currentDate = currentDate.AddDate(0, 0, -1)
	}
	return streak
}

func generateProgressTable(days []DayRecord) string {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –Ω–æ–º–µ—Ä—É –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –≤–≤–µ—Ä—Ö—É)
	sort.Slice(days, func(i, j int) bool {
		return days[i].Number > days[j].Number
	})

	var table strings.Builder
	table.WriteString("| –î–µ–Ω—å | –î–∞—Ç–∞ | –¢–µ–º–∞ | –ö–ª—é—á–µ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ |\n")
	table.WriteString("|------|------|------|---------------------|\n")

	for _, day := range days {
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
		title := truncate(day.Title, 20)
		insight := truncate(day.KeyInsight, 30)
		table.WriteString(fmt.Sprintf(
			"| Day%d | %s | %s | %s |\n",
			day.Number, day.Date, title, insight,
		))
	}
	return table.String()
}

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å —É—á–µ—Ç–æ–º UTF-8
func truncate(s string, max int) string {
	if utf8.RuneCountInString(s) <= max {
		return s
	}
	runes := []rune(s)
	return string(runes[:max-3]) + "..."
}

func calculateProgressPercent(currentDay int) int {
	return currentDay
}

func calculateProgressPadding(percent int) string {
	text := fmt.Sprintf("–ü–†–û–ì–†–ï–°–°: %d%%", percent)
	requiredLength := 30
	padding := requiredLength - utf8.RuneCountInString(text)
	if padding <= 0 {
		return ""
	}
	return strings.Repeat(" ", padding)
}

func generateProgressBar(percent int) string {
	filled := percent * ProgressBarSize / TotalDays
	if filled > ProgressBarSize {
		filled = ProgressBarSize
	}
	empty := ProgressBarSize - filled
	return strings.Repeat("‚ñà", filled) + strings.Repeat("‚ñë", empty)
}

func getCommitCount() string {
	cmd := exec.Command("git", "rev-list", "--count", "HEAD")
	output, err := cmd.Output()
	if err != nil {
		return "N/A"
	}
	return strings.TrimSpace(string(output))
}

func countLinesOfCode() int {
	totalLines := 0
	fileChan := make(chan string, 100)
	lineCounts := make(chan int, 100)
	done := make(chan struct{})

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
	go func() {
		var wg sync.WaitGroup
		for path := range fileChan {
			wg.Add(1)
			go func(p string) {
				defer wg.Done()
				content, err := os.ReadFile(p)
				if err != nil {
					return
				}
				lines := strings.Split(string(content), "\n")
				lineCounts <- len(lines)
			}(path)
		}
		wg.Wait()
		close(lineCounts)
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	go func() {
		for count := range lineCounts {
			totalLines += count
		}
		close(done)
	}()

	// –û–±—Ö–æ–¥ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
	err := filepath.Walk(".", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return nil
		}
		if info.IsDir() && shouldSkipDir(path) {
			return filepath.SkipDir
		}
		if !info.IsDir() && strings.HasSuffix(path, ".go") {
			fileChan <- path
		}
		return nil
	})

	close(fileChan)
	<-done

	if err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ —Ñ–∞–π–ª–æ–≤: %v\n", err)
	}
	return totalLines
}

func shouldSkipDir(path string) bool {
	skipDirs := []string{".git", "vendor", "node_modules", "dist", "bin", "tmp"}
	for _, dir := range skipDirs {
		if strings.Contains(path, dir) {
			return true
		}
	}
	return false
}

func calculateNextMilestone(currentDay int) int {
	if currentDay < 5 {
		return 5
	}
	return ((currentDay / 5) + 1) * 5
}

func formatDate(date string) string {
	t, err := time.Parse(time.RFC3339, date)
	if err != nil {
		return "25.07.2025"
	}
	return t.Format("02.01.2006")
}

func generateReadme(data ProgressData) error {
	absTemplatePath, _ := filepath.Abs(TemplateFilePath)
	fmt.Printf("‚è≥ –ß—Ç–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–∑: %s\n", absTemplatePath)

	templateContent, err := os.ReadFile(TemplateFilePath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: %w", err)
	}

	tmpl, err := template.New("readme").
		Funcs(template.FuncMap{
			"add": func(a, b int) int { return a + b },
		}).
		Parse(string(templateContent))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞: %w", err)
	}

	var output bytes.Buffer
	if err := tmpl.Execute(&output, data); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: %w", err)
	}

	if err := os.WriteFile(ReadmeFilePath, output.Bytes(), 0644); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ README: %w", err)
	}
	return nil
}

func addNewDayIfNeeded(projectData *ProjectData) {
	today := time.Now().Format("02.01.2006")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
	for _, day := range projectData.Days {
		if day.Date == today {
			return
		}
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
	newDay := DayRecord{
		Number:     len(projectData.Days),
		Date:       today,
		Title:      "–í –ø—Ä–æ—Ü–µ—Å—Å–µ...",
		KeyInsight: "–î–µ–Ω—å –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω",
		LinesCode:  0,
	}

	projectData.Days = append(projectData.Days, newDay)
	fmt.Printf("‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –¥–µ–Ω—å: Day%d (%s)\n", newDay.Number, today)
}
