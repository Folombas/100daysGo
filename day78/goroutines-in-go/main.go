package main

import (
	"fmt"
	"sync"
	"time"
)

// BrazilianDancer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–Ω—Ü–æ—Ä–∞ —Å–∞–º–±—ã
type BrazilianDancer struct {
	Name     string
	Style    string
	Energy   int
}

// NewDancer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Ç–∞–Ω—Ü–æ—Ä–∞
func NewDancer(name, style string) *BrazilianDancer {
	return &BrazilianDancer{
		Name:   name,
		Style:  style,
		Energy: 100,
	}
}

// Dance –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–Ω—Ü–æ—Ä–∞ —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ!
func (d *BrazilianDancer) Dance(wg *sync.WaitGroup, moves chan string) {
	defer wg.Done()

	for i := 1; i <= 5; i++ {
		d.Energy -= 10
		move := fmt.Sprintf("%s –∏—Å–ø–æ–ª–Ω—è–µ—Ç %s (–¥–≤–∏–∂–µ–Ω–∏–µ %d, —ç–Ω–µ—Ä–≥–∏—è: %d%%)",
			d.Name, d.Style, i, d.Energy)
		moves <- move
		time.Sleep(time.Millisecond * 500) // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
	}

	fmt.Printf("üíÉ %s –∑–∞–≤–µ—Ä—à–∏–ª —Ç–∞–Ω–µ—Ü!\n", d.Name)
}

// DanceGroup –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Ç–∞–Ω—Ü–æ—Ä–æ–≤
type DanceGroup struct {
	Name    string
	Dancers []*BrazilianDancer
}

// StartDance –Ω–∞—á–∏–Ω–∞–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç–∞–Ω–µ—Ü —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ä—É—Ç–∏–Ω
func (dg *DanceGroup) StartDance() {
	fmt.Printf("\nüé≠ –ì—Ä—É–ø–ø–∞ '%s' –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–∞–º–±—É!\n", dg.Name)

	var wg sync.WaitGroup
	moves := make(chan string, 10) // –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏–π

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö —Ç–∞–Ω—Ü–æ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω–∞—Ö
	for _, dancer := range dg.Dancers {
		wg.Add(1)
		go dancer.Dance(&wg, moves)
	}

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
	go func() {
		wg.Wait()
		close(moves)
	}()

	// –ß–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –¥–≤–∏–∂–µ–Ω–∏—è
	for move := range moves {
		fmt.Printf("   üéµ %s\n", move)
	}

	fmt.Printf("‚úÖ –ì—Ä—É–ø–ø–∞ '%s' –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ç–∞–Ω–µ—Ü!\n\n", dg.Name)
}

// SyncDance –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–Ω–µ—Ü
func SyncDance() {
	fmt.Println("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ê–ù–ï–¶:")
	fmt.Println("==========================")

	group := DanceGroup{
		Name: "–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã",
		Dancers: []*BrazilianDancer{
			NewDancer("–ö–∞—Ä–ª–æ—Å", "—Å–∞–º–±–∞-–¥–µ-–≥–∞—Ñ–∏–µ–π—Ä–∞"),
			NewDancer("–ú–∞—Ä–∏—è", "—Å–∞–º–±–∞-–∞–∫—Ä–æ–±–∞—Ç–∏–∫–∞"),
			NewDancer("–ñ—É–∞–Ω", "–ø–∞–≥–æ–¥–µ"),
		},
	}

	group.StartDance()
}

// AsyncDance –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–∞–Ω–µ—Ü
func AsyncDance() {
	fmt.Println("‚ö° –ê–°–ò–ù–•–†–û–ù–ù–´–ô –¢–ê–ù–ï–¶:")
	fmt.Println("====================")

	dancers := []*BrazilianDancer{
		NewDancer("–ê–Ω—Ç–æ–Ω–∏–æ", "—Ñ—Ä–µ–≤–æ"),
		NewDancer("–ò–∑–∞–±–µ–ª–ª–∞", "–º–∞—Ä–∞–∫–∞—Ç—É"),
		NewDancer("–ü–µ–¥—Ä–æ", "–∫–æ–∫—É"),
	}

	var wg sync.WaitGroup
	results := make(chan string, 3)

	for _, dancer := range dancers {
		wg.Add(1)
		go func(d *BrazilianDancer) {
			defer wg.Done()
			for i := 1; i <= 3; i++ {
				result := fmt.Sprintf("%s —Ç–∞–Ω—Ü—É–µ—Ç %s - –¥–≤–∏–∂–µ–Ω–∏–µ %d",
					d.Name, d.Style, i)
				results <- result
				time.Sleep(time.Millisecond * 300)
			}
		}(dancer)
	}

	go func() {
		wg.Wait()
		close(results)
	}()

	for result := range results {
		fmt.Printf("   üé≠ %s\n", result)
	}
	fmt.Println("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–∞–Ω–µ—Ü –∑–∞–≤–µ—Ä—à–µ–Ω!\n")
}

// ChannelDance –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
func ChannelDance() {
	fmt.Println("üì° –¢–ê–ù–ï–¶ –° –ö–ê–ù–ê–õ–ê–ú–ò:")
	fmt.Println("===================")

	danceMoves := make(chan string, 5)
	done := make(chan bool)

	// –ì–æ—Ä—É—Ç–∏–Ω–∞-—Ç–∞–Ω—Ü–æ—Ä
	go func() {
		moves := []string{"–∫—Ä—É–∂–µ–Ω–∏–µ", "—à–∞–≥ —Å–∞–º–±—ã", "–≤–æ–ª–Ω–∞", "–ø—Ä—ã–∂–æ–∫", "—Ñ–∏–Ω–∞–ª"}
		for _, move := range moves {
			danceMoves <- move
			time.Sleep(time.Millisecond * 400)
		}
		close(danceMoves)
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞-–∑—Ä–∏—Ç–µ–ª—å
	go func() {
		for move := range danceMoves {
			fmt.Printf("   üëÄ –ó—Ä–∏—Ç–µ–ª–∏ –≤–∏–¥—è—Ç: %s\n", move)
		}
		done <- true
	}()

	<-done
	fmt.Println("‚úÖ –¢–∞–Ω–µ—Ü —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n")
}

// SelectDance –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç select —Å –∫–∞–Ω–∞–ª–∞–º–∏
func SelectDance() {
	fmt.Println("üéØ SELECT –í –¢–ê–ù–¶–ï:")
	fmt.Println("=================")

	dance1 := make(chan string)
	dance2 := make(chan string)

	go func() {
		time.Sleep(300 * time.Millisecond)
		dance1 <- "–°–∞–º–±–∞"
	}()

	go func() {
		time.Sleep(200 * time.Millisecond)
		dance2 <- "–§–æ—Ä—Ä–æ"
	}()

	for i := 0; i < 2; i++ {
		select {
		case msg1 := <-dance1:
			fmt.Printf("   üíÉ –ü–æ–ª—É—á–µ–Ω–æ: %s\n", msg1)
		case msg2 := <-dance2:
			fmt.Printf("   üéµ –ü–æ–ª—É—á–µ–Ω–æ: %s\n", msg2)
		case <-time.After(500 * time.Millisecond):
			fmt.Println("   ‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
		}
	}

	fmt.Println("‚úÖ Select —Ç–∞–Ω–µ—Ü –∑–∞–≤–µ—Ä—à–µ–Ω!\n")
}

// WorkerPoolDance –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤
func WorkerPoolDance() {
	fmt.Println("üèä –ü–£–õ –¢–ê–ù–¶–û–†–û–í-–í–û–†–ö–ï–†–û–í:")
	fmt.Println("=======================")

	jobs := make(chan int, 10)
	results := make(chan string, 10)

	// –°–æ–∑–¥–∞–µ–º –ø—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤-—Ç–∞–Ω—Ü–æ—Ä–æ–≤
	for w := 1; w <= 3; w++ {
		go dancerWorker(w, jobs, results)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
	for j := 1; j <= 9; j++ {
		jobs <- j
	}
	close(jobs)

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	for a := 1; a <= 9; a++ {
		fmt.Printf("   %s\n", <-results)
	}

	fmt.Println("‚úÖ –ü—É–ª —Ç–∞–Ω—Ü–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!\n")
}

func dancerWorker(id int, jobs <-chan int, results chan<- string) {
	for j := range jobs {
		time.Sleep(500 * time.Millisecond)
		results <- fmt.Sprintf("–¢–∞–Ω—Ü–æ—Ä %d –∏—Å–ø–æ–ª–Ω–∏–ª –¥–≤–∏–∂–µ–Ω–∏–µ %d", id, j)
	}
}

func main() {
	fmt.Println("üíÉ Day 78: Goroutines - –ë—Ä–∞–∑–∏–ª—å—Å–∫–∞—è —Å–∞–º–±–∞ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞!")
	fmt.Println("======================================================")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
	SyncDance()      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ—Ä—É—Ç–∏–Ω—ã
	AsyncDance()     // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	ChannelDance()   // –†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏
	SelectDance()    // Select —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫–∞–Ω–∞–ª–æ–≤
	WorkerPoolDance() // –ü—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤

	// –§–∏–Ω–∞–ª—å–Ω–æ–µ —à–æ—É
	fmt.Println("üéâ –§–ò–ù–ê–õ–¨–ù–û–ï –®–û–£ –ì–û–†–£–¢–ò–ù:")
	fmt.Println("========================")

	finalGroup := DanceGroup{
		Name: "–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞—Ä–Ω–∞–≤–∞–ª",
		Dancers: []*BrazilianDancer{
			NewDancer("–†–∏–æ", "–∫–∞—Ä–Ω–∞–≤–∞–ª—å–Ω–∞—è —Å–∞–º–±–∞"),
			NewDancer("–°–∞–Ω-–ü–∞—É–ª—É", "–∞—à–∏-–∏-–∫—Å–∞"),
			NewDancer("–ë–∞–∏—è", "–∞—à–µ"),
			NewDancer("–†–µ—Å–∏—Ñ–∏", "—Ñ—Ä–µ–≤–æ"),
		},
	}

	finalGroup.StartDance()

	// –ò—Ç–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è
	fmt.Println("üéØ –ß–¢–û –ú–´ –ò–ó–£–ß–ò–õ–ò:")
	fmt.Println("   ‚Ä¢ –ì–æ—Ä—É—Ç–∏–Ω—ã - –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
	fmt.Println("   ‚Ä¢ sync.WaitGroup –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
	fmt.Println("   ‚Ä¢ –ö–∞–Ω–∞–ª—ã –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏")
	fmt.Println("   ‚Ä¢ Select –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∫–∞–Ω–∞–ª–æ–≤")
	fmt.Println("   ‚Ä¢ –ü—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞")
	fmt.Println("   ‚Ä¢ –ë—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã")

	fmt.Println("\nüí™ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –≥–æ—Ä—É—Ç–∏–Ω—ã —Ç–∞–Ω—Ü—É—é—Ç –∫–∞–∫ –±—Ä–∞–∑–∏–ª—å—Å–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã!")
}

