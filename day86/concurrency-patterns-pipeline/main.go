package main

import (
	"context"
	"fmt"
	"strings"
	"sync"
	"time"
)

// DairyPipeline –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω–≤–µ–π–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –º–æ–ª–æ—á–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
type DairyPipeline struct {
	mu sync.Mutex
}

type MilkProduct struct {
	base       string
	processed  string
	packaged   string
	delivered  string
	stageTimes []time.Duration
}

func main() {
	fmt.Println("üè° –°–ú–ï–®–ê–ù–ù–ê–Ø –í–°–ï–õ–ï–ù–ù–ê–Ø: –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ + –°–º–µ—à–∞—Ä–∏–∫–∏ + –ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã!")
	fmt.Println("==============================================================")

	pipeline := &DairyPipeline{}

	fmt.Println("ü•õ –ú–û–õ–û–ß–ù–´–ô –ö–û–ù–í–ï–ô–ï–†: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ª–∏–Ω–∏—é!")
	fmt.Println("üîÑ –ü–ê–¢–¢–ï–†–ù: Pipeline - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ —ç—Ç–∞–ø—ã!")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä
	fmt.Println("\nüéØ –ó–ê–ü–£–°–ö PIPELINE –ö–û–ù–í–ï–ô–ï–†–ê...")
	fmt.Println("üì¶ –≠–¢–ê–ü–´: –ú–æ–ª–æ–∫–æ ‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –£–ø–∞–∫–æ–≤–∫–∞ ‚Üí –î–æ—Å—Ç–∞–≤–∫–∞")

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–∞
	rawMilkCh := pipeline.generateRawMilk(ctx)
	processedCh := pipeline.processMilk(ctx, rawMilkCh)
	packagedCh := pipeline.packageProducts(ctx, processedCh)
	deliveredCh := pipeline.deliverProducts(ctx, packagedCh)

	// –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	pipeline.collectResults(deliveredCh)

	fmt.Println("\nüéâ –ö–û–ù–í–ï–ô–ï–† –ó–ê–í–ï–†–®–ï–ù! –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!")
	fmt.Println("üèÜ –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ, –°–º–µ—à–∞—Ä–∏–∫–∏ –∏ –ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã - –∏–¥–µ–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
}

// generateRawMilk - —ç—Ç–∞–ø 1: –î–æ–±—ã—á–∞ —Å—ã—Ä–æ–≥–æ –º–æ–ª–æ–∫–∞ (–ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ)
func (d *DairyPipeline) generateRawMilk(ctx context.Context) <-chan MilkProduct {
	out := make(chan MilkProduct)

	go func() {
		defer close(out)

		sources := []string{
			"–ú–æ–ª–æ–∫–æ –æ—Ç –∫–æ—Ä–æ–≤—ã –ú—É—Ä–∫–∏",
			"–ú–æ–ª–æ–∫–æ –æ—Ç –±—ã—á–∫–∞ –ë—É—Ä—ë–Ω–∫–∏",
			"–ú–æ–ª–æ–∫–æ –æ—Ç –∫–æ–∑—ã –†–æ–≥–∞—Ç–∫–∏",
			"–ú–æ–ª–æ–∫–æ –æ—Ç –æ–≤–µ—á–∫–∏ –ë–µ–ª—è–Ω–∫–∏",
		}

		for i, source := range sources {
			select {
			case <-ctx.Done():
				return
			default:
				// –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±—ã—á–∏
				time.Sleep(1 * time.Second)

				product := MilkProduct{
					base:       source,
					stageTimes: []time.Duration{1 * time.Second},
				}

				fmt.Printf("   üêÑ [–ü–†–û–°–¢–û–ö–í–ê–®–ò–ù–û] %s –¥–æ–±—ã—Ç–æ (%d/4)\n", source, i+1)
				out <- product
			}
		}
	}()

	return out
}

// processMilk - —ç—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–ª–æ–∫–∞ (–°–º–µ—à–∞—Ä–∏–∫–∏)
func (d *DairyPipeline) processMilk(ctx context.Context, in <-chan MilkProduct) <-chan MilkProduct {
	out := make(chan MilkProduct)

	go func() {
		defer close(out)

		processors := []string{"–ö—Ä–æ—à", "–Å–∂–∏–∫", "–ë–∞—Ä–∞—à", "–ù—é—à–∞"}
		processIndex := 0

		for product := range in {
			select {
			case <-ctx.Done():
				return
			default:
				// –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
				time.Sleep(2 * time.Second)

				processor := processors[processIndex%len(processors)]
				processIndex++

				product.processed = fmt.Sprintf("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %s", processor)
				product.stageTimes = append(product.stageTimes, 2*time.Second)

				fmt.Printf("   ü¶î [–°–ú–ï–®–ê–†–ò–ö–ò] %s: %s ‚Üí %s\n",
					processor, product.base, strings.Split(product.base, " ")[2])
				out <- product
			}
		}
	}()

	return out
}

// packageProducts - —ç—Ç–∞–ø 3: –£–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ë–∞—Ä–±–æ—Å–∫–∏–Ω—ã)
func (d *DairyPipeline) packageProducts(ctx context.Context, in <-chan MilkProduct) <-chan MilkProduct {
	out := make(chan MilkProduct)

	go func() {
		defer close(out)

		packagers := []string{"–ì–µ–Ω–∞", "–õ–∏–∑–∞", "–†–æ–∑–∞", "–î—Ä—É–∂–æ–∫"}
		packages := []string{"–≤ –±—É—Ç—ã–ª–∫–∏", "–≤ –ø–∞–∫–µ—Ç—ã", "–≤ –±–∞–Ω–∫–∏", "–≤ —Ç–µ—Ç—Ä–∞–ø–∞–∫–∏"}
		packageIndex := 0

		for product := range in {
			select {
			case <-ctx.Done():
				return
			default:
				// –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–ø–∞–∫–æ–≤–∫–∏
				time.Sleep(1 * time.Second)

				packager := packagers[packageIndex%len(packagers)]
				packageType := packages[packageIndex%len(packages)]
				packageIndex++

				product.packaged = fmt.Sprintf("–£–ø–∞–∫–æ–≤–∞–Ω–æ %s %s", packager, packageType)
				product.stageTimes = append(product.stageTimes, 1*time.Second)

				fmt.Printf("   üè† [–ë–ê–†–ë–û–°–ö–ò–ù–´] %s: %s\n", packager, packageType)
				out <- product
			}
		}
	}()

	return out
}

// deliverProducts - —ç—Ç–∞–ø 4: –î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —É—Å–∏–ª–∏—è)
func (d *DairyPipeline) deliverProducts(ctx context.Context, in <-chan MilkProduct) <-chan MilkProduct {
	out := make(chan MilkProduct)

	go func() {
		defer close(out)

		deliverers := []string{"–ü–æ—á—Ç–∞–ª—å–æ–Ω –ü–µ—á–∫–∏–Ω", "–ö–∞—Ä-–ö–∞—Ä—ã—á", "–°–æ–≤—É–Ω—å—è", "–ü–∏–Ω"}
		deliverIndex := 0

		for product := range in {
			select {
			case <-ctx.Done():
				return
			default:
				// –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
				time.Sleep(1 * time.Second)

				deliverer := deliverers[deliverIndex%len(deliverers)]
				deliverIndex++

				product.delivered = fmt.Sprintf("–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ %s", deliverer)
				product.stageTimes = append(product.stageTimes, 1*time.Second)

				fmt.Printf("   üöö [–î–û–°–¢–ê–í–ö–ê] %s: –ø—Ä–æ–¥—É–∫—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—é\n", deliverer)
				out <- product
			}
		}
	}()

	return out
}

// collectResults - —Å–±–æ—Ä –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func (d *DairyPipeline) collectResults(results <-chan MilkProduct) {
	fmt.Println("\nüìä –û–¢–ß–Å–¢ –û –†–ê–ë–û–¢–ï –ö–û–ù–í–ï–ô–ï–†–ê:")
	fmt.Println("============================")

	totalProducts := 0
	totalTime := time.Duration(0)

	for product := range results {
		totalProducts++

		productTime := time.Duration(0)
		for _, t := range product.stageTimes {
			productTime += t
		}
		totalTime += productTime

		fmt.Printf("\n   üì¶ –ü–†–û–î–£–ö–¢ #%d:\n", totalProducts)
		fmt.Printf("      ü•õ %s\n", product.base)
		fmt.Printf("      ü¶î %s\n", product.processed)
		fmt.Printf("      üè† %s\n", product.packaged)
		fmt.Printf("      üöö %s\n", product.delivered)
		fmt.Printf("      ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: %v\n", productTime)
	}

	fmt.Printf("\nüìà –ò–¢–û–ì–û: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ –æ–±—â–µ–µ –≤—Ä–µ–º—è %v\n",
		totalProducts, totalTime)
	fmt.Printf("üìä –°–†–ï–î–ù–ï–ï: %v –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç\n", totalTime/time.Duration(totalProducts))
}
