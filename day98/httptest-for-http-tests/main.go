package main

import (
	"fmt"
	"log"
	"net/http"
)

func main() {
	fmt.Println("üåê HTTPTEST –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
	fmt.Println("========================")
	fmt.Println()
	fmt.Println("üéØ –ì–æ—à–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP!")
	fmt.Println("üí° –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
	fmt.Println()

	handler := NewAPIHandler()

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.URL.Path != "/" {
			http.NotFound(w, r)
			return
		}

		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		fmt.Fprintf(w, `
<!DOCTYPE html>
<html>
<head>
    <title>HTTPTest –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .endpoint { background: #f5f5f5; padding: 10px; margin: 10px 0; }
        code { background: #eee; padding: 2px 5px; }
    </style>
</head>
<body>
    <h1>üåê HTTPTest –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è</h1>
    <p>üéØ –ì–æ—à–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTTP!</p>

    <h2>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoint:</h2>
    <div class="endpoint">
        <strong>GET /user?id=1</strong> - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID<br>
        <a href="/user?id=1" target="_blank">/user?id=1</a>
    </div>
    <div class="endpoint">
        <strong>GET /users</strong> - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π<br>
        <a href="/users" target="_blank">/users</a>
    </div>
    <div class="endpoint">
        <strong>POST /user</strong> - —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Postman –∏–ª–∏ curl)
    </div>

    <h2>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</h2>
    <p>–ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:</p>
    <code>go test -v</code> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã<br>
    <code>go test -bench=.</code> - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∏

    <h2>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h2>
    <p>httptest –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å HTTP –∫–æ–¥ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ - —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ!</p>
</body>
</html>
		`)
	})

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API
	http.HandleFunc("/user", func(w http.ResponseWriter, r *http.Request) {
		switch r.Method {
		case http.MethodGet:
			handler.GetUserHandler(w, r)
		case http.MethodPost:
			handler.CreateUserHandler(w, r)
		default:
			http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		}
	})
	http.HandleFunc("/users", handler.GetAllUsersHandler)

	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://localhost:8080")
	fmt.Println()
	fmt.Println("üìö –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã:")
	fmt.Println("   GET  /              - HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π")
	fmt.Println("   GET  /user?id=1     - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")
	fmt.Println("   POST /user          - —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	fmt.Println("   GET  /users         - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	fmt.Println()
	fmt.Println("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤:")
	fmt.Println("   go test -v          - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
	fmt.Println("   go test -bench=.    - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∏")
	fmt.Println()
	fmt.Println("üí° –ü–æ–º–Ω–∏: httptest –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å HTTP –∫–æ–¥")
	fmt.Println("   –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ - —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ!")
	fmt.Println()

	log.Fatal(http.ListenAndServe(":8080", nil))
}
