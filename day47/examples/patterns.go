package examples

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// DemoPatterns –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏
func DemoPatterns() {
	fmt.Println("\nüî∏ Worker Pool:")
	demoWorkerPool()

	fmt.Println("\nüî∏ Fan-out Fan-in:")
	demoFanOutFanIn()

	fmt.Println("\nüî∏ Rate Limiting:")
	demoRateLimiting()
}

// demoWorkerPool –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—É–ª —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
func demoWorkerPool() {
	jobs := make(chan int, 10)
	results := make(chan int, 10)
	var wg sync.WaitGroup

	// –°–æ–∑–¥–∞–µ–º –ø—É–ª –∏–∑ 3 —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
	for i := 1; i <= 3; i++ {
		wg.Add(1)
		go worker(i, jobs, results, &wg)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è
	for j := 1; j <= 5; j++ {
		jobs <- j
	}
	close(jobs)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	go func() {
		wg.Wait()
		close(results)
	}()

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	for result := range results {
		fmt.Printf("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞–Ω–∏—è: %d\n", result)
	}
}

func worker(id int, jobs <-chan int, results chan<- int, wg *sync.WaitGroup) {
	defer wg.Done()
	for job := range jobs {
		fmt.Printf("üë∑ –†–∞–±–æ—Ç–Ω–∏–∫ %d –Ω–∞—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ %d\n", id, job)
		time.Sleep(time.Duration(rand.Intn(500)) * time.Millisecond)
		results <- job * 2
		fmt.Printf("üë∑ –†–∞–±–æ—Ç–Ω–∏–∫ %d –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ %d\n", id, job)
	}
}

// demoFanOutFanIn –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω Fan-out Fan-in
func demoFanOutFanIn() {
	data := make(chan int)
	results := make(chan int)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (Fan-out)
	for i := 1; i <= 3; i++ {
		go processor(i, data, results)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	go func() {
		for i := 1; i <= 6; i++ {
			data <- i
		}
		close(data)
	}()

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (Fan-in)
	for i := 1; i <= 6; i++ {
		result := <-results
		fmt.Printf("üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %d\n", result)
	}
}

func processor(id int, data <-chan int, results chan<- int) {
	for item := range data {
		time.Sleep(time.Duration(rand.Intn(300)) * time.Millisecond)
		results <- item * 10
		fmt.Printf("‚öôÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä %d –æ–±—Ä–∞–±–æ—Ç–∞–ª: %d\n", id, item)
	}
}

// demoRateLimiting –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
func demoRateLimiting() {
	requests := make(chan int, 5)
	limiter := time.Tick(200 * time.Millisecond) // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
	for i := 1; i <= 5; i++ {
		requests <- i
	}
	close(requests)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
	for req := range requests {
		<-limiter
		fmt.Printf("‚è±Ô∏è  –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å %d (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏)\n", req)
	}
}