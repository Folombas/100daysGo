package examples

import (
	"fmt"
	"strings"
	"time"
)

// DemoPipeline –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ–π–µ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
func DemoPipeline() {
	// –°–æ–∑–¥–∞–µ–º —ç—Ç–∞–ø—ã –∫–æ–Ω–≤–µ–π–µ—Ä–∞
	rawProducts := make(chan string, 5)
	stage1 := make(chan string, 5)
	stage2 := make(chan string, 5)
	finished := make(chan string, 5)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
	go assembleStage(rawProducts, stage1)
	go paintStage(stage1, stage2)
	go packageStage(stage2, finished)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—ã—Ä—å–µ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä
	products := []string{"–î–µ—Ç–∞–ª—å A", "–î–µ—Ç–∞–ª—å B", "–î–µ—Ç–∞–ª—å C", "–î–µ—Ç–∞–ª—å D"}
	for _, product := range products {
		fmt.Printf("üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä: %s\n", product)
		rawProducts <- product
		time.Sleep(200 * time.Millisecond)
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
	close(rawProducts)

	// –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é
	for i := 0; i < len(products); i++ {
		result := <-finished
		fmt.Printf("üéÅ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è: %s\n", result)
	}
}

// assembleStage - —ç—Ç–∞–ø —Å–±–æ—Ä–∫–∏
func assembleStage(in <-chan string, out chan<- string) {
	for product := range in {
		processed := fmt.Sprintf("–°–æ–±—Ä–∞–Ω–Ω—ã–π %s", product)
		fmt.Printf("üîß –≠—Ç–∞–ø —Å–±–æ—Ä–∫–∏: %s ‚Üí %s\n", product, processed)
		out <- processed
	}
	close(out)
}

// paintStage - —ç—Ç–∞–ø –ø–æ–∫—Ä–∞—Å–∫–∏
func paintStage(in <-chan string, out chan<- string) {
	for product := range in {
		processed := fmt.Sprintf("–ü–æ–∫—Ä–∞—à–µ–Ω–Ω—ã–π %s", strings.ToLower(product))
		fmt.Printf("üé® –≠—Ç–∞–ø –ø–æ–∫—Ä–∞—Å–∫–∏: %s ‚Üí %s\n", product, processed)
		out <- processed
	}
	close(out)
}

// packageStage - —ç—Ç–∞–ø —É–ø–∞–∫–æ–≤–∫–∏
func packageStage(in <-chan string, out chan<- string) {
	for product := range in {
		processed := fmt.Sprintf("–£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π %s", strings.ToLower(product))
		fmt.Printf("üì¶ –≠—Ç–∞–ø —É–ø–∞–∫–æ–≤–∫–∏: %s ‚Üí %s\n", product, processed)
		out <- processed
	}
	close(out)
}