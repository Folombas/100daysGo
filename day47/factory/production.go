package factory

import (
	"fmt"
	"sync"
)

// Conveyor –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω–≤–µ–π–µ—Ä –Ω–∞ —Ñ–∞–±—Ä–∏–∫–µ
type Conveyor struct {
	products       chan string
	processed      chan string
}

// NewConveyor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä
func NewConveyor() *Conveyor {
	return &Conveyor{
		products:  make(chan string, 5),  // –ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
		processed: make(chan string, 10), // –ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
	}
}

// AddProduct –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä
func (c *Conveyor) AddProduct(product string) {
	c.products <- product
	fmt.Printf("üì¶ –ö–æ–Ω–≤–µ–π–µ—Ä: –ø—Ä–∏–Ω—è–ª %s\n", product)
}

// Products –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
func (c *Conveyor) Products() <-chan string {
	return c.products
}

// SendProcessed –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
func (c *Conveyor) SendProcessed(product string) {
	c.processed <- product
}

// Processed –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
func (c *Conveyor) Processed() <-chan string {
	return c.processed
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∫–æ–Ω–≤–µ–π–µ—Ä–∞
func (c *Conveyor) Close() {
	close(c.products)
	close(c.processed)
}

// DemoFactory –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Ñ–∞–±—Ä–∏–∫–∏
func DemoFactory() {
	var wg sync.WaitGroup
	wg.Add(1)

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
	manager := NewManager("–¢–µ–ª–µ—Ñ–æ–Ω", 3) // 3 —Ä–∞–±–æ—á–∏—Ö

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go manager.Monitor()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
	go manager.Start(10, &wg) // –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ 10 —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

	// –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	wg.Wait()
}