package factory

import (
	"fmt"
	"math/rand"
	"time"
)

// Worker –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ –Ω–∞ —Ñ–∞–±—Ä–∏–∫–µ
type Worker struct {
	id      int
	conveyor *Conveyor
}

// NewWorker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ
func NewWorker(id int, conveyor *Conveyor) *Worker {
	return &Worker{
		id:      id,
		conveyor: conveyor,
	}
}

// Work –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã
func (w *Worker) Work() {
	for product := range w.conveyor.Products() {
		w.processProduct(product)
	}
}

// processProduct –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç
func (w *Worker) processProduct(product string) {
	// –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	processingTime := time.Duration(rand.Intn(300)+100) * time.Millisecond
	time.Sleep(processingTime)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
	processedProduct := fmt.Sprintf("%s (–æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–±–æ—á–∏–º %d)", product, w.id)
	
	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
	w.conveyor.SendProcessed(processedProduct)
	
	fmt.Printf("üë∑ –†–∞–±–æ—á–∏–π %d: –æ–±—Ä–∞–±–æ—Ç–∞–ª %s –∑–∞ %v\n", 
		w.id, product, processingTime)
}