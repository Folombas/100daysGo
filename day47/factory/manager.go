package factory

import (
	"fmt"
	"sync"
	"time"
)

// Manager —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—Ç–æ–π —Ñ–∞–±—Ä–∏–∫–∏
type Manager struct {
	workers     []*Worker
	conveyor    *Conveyor
	productType string
}

// NewManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
func NewManager(productType string, numWorkers int) *Manager {
	conveyor := NewConveyor()
	workers := make([]*Worker, numWorkers)

	for i := range workers {
		workers[i] = NewWorker(i+1, conveyor)
	}

	return &Manager{
		workers:     workers,
		conveyor:    conveyor,
		productType: productType,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
func (m *Manager) Start(products int, wg *sync.WaitGroup) {
	defer wg.Done()

	fmt.Printf("üè≠ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ %d –µ–¥–∏–Ω–∏—Ü %s\n", 
		products, m.productType)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏—Ö
	for _, worker := range m.workers {
		go worker.Work()
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä
	for i := 1; i <= products; i++ {
		product := fmt.Sprintf("%s ‚Ññ%d", m.productType, i)
		m.conveyor.AddProduct(product)
		time.Sleep(100 * time.Millisecond) // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ–π–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	m.conveyor.Close()
	fmt.Println("üè≠ –ú–µ–Ω–µ–¥–∂–µ—Ä: –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä")
}

// Monitor –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
func (m *Manager) Monitor() {
	for {
		select {
		case product, ok := <-m.conveyor.Processed():
			if !ok {
				fmt.Println("üè≠ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ö–æ–Ω–≤–µ–π–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
				return
			}
			fmt.Printf("üè≠ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ü–æ–ª—É—á–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π %s\n", product)
		}
	}
}