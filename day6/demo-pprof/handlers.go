package main

import (
	"fmt"
	"math"
	"net/http"
	"sync"
	"time"
)

// setUTF8Header —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
func setUTF8Header(w http.ResponseWriter, contentType string) {
	w.Header().Set("Content-Type", contentType+"; charset=utf-8")
}

// homeHandler - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
func homeHandler(w http.ResponseWriter, r *http.Request) {
	html := `
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>pprof Demo - 100 Days of Go</title>
	<style>
		body { font-family: Arial, sans-serif; max-width: 800px; margin: 40px auto; line-height: 1.6; }
		.card { padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
		.cpu { background-color: #ffebee; }
		.mem { background-color: #e3f2fd; }
		.goroutines { background-color: #e8f5e9; }
		.profiling { background-color: #fff8e1; }
		a { color: #1a73e8; text-decoration: none; font-weight: bold; }
		button { padding: 12px 18px; background: #1a73e8; color: white; border: none; 
                border-radius: 4px; cursor: pointer; font-size: 16px; margin: 5px 0; 
                transition: background 0.3s; }
		button:hover { background: #0d62c9; }
		code { background: #f5f5f5; padding: 3px 6px; border-radius: 3px; font-family: monospace; }
		.container { display: flex; flex-wrap: wrap; justify-content: space-between; }
		.col { flex: 1; min-width: 300px; padding: 10px; }
		h1 { color: #1a237e; }
		h2 { color: #283593; border-bottom: 2px solid #5c6bc0; padding-bottom: 5px; }
		ul { padding-left: 20px; }
		li { margin: 8px 0; }
		.footer { text-align: center; margin-top: 30px; color: #666; }
	</style>
</head>
<body>
	<h1>üî• –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ Go-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å pprof</h1>
	
	<div class="container">
		<div class="col">
			<div class="card cpu">
				<h2>–¢–µ—Å—Ç CPU</h2>
				<p>–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–ª–æ–∂–Ω—ã–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏</p>
				<button onclick="load('cpu')">–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç CPU</button>
				<p><small>–í—ã–ø–æ–ª–Ω—è–µ—Ç 50 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∏—Ç–µ—Ä–∞—Ü–∏–π –≤—ã—á–∏—Å–ª–µ–Ω–∏–π</small></p>
			</div>
			
			<div class="card mem">
				<h2>–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏</h2>
				<p>–ê–ª–ª–æ—Ü–∏—Ä—É–µ—Ç 500MB –ø–∞–º—è—Ç–∏ –≤ –∫—É—á–µ</p>
				<button onclick="load('mem')">–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏</button>
				<p><small>–°–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤</small></p>
			</div>
		</div>
		
		<div class="col">
			<div class="card goroutines">
				<h2>–¢–µ—Å—Ç –≥–æ—Ä—É—Ç–∏–Ω</h2>
				<p>–°–æ–∑–¥–∞–µ—Ç 5000 —Å–ø—è—â–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω</p>
				<button onclick="load('goroutines')">–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –≥–æ—Ä—É—Ç–∏–Ω</button>
				<p><small>–ì–æ—Ä—É—Ç–∏–Ω—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 5 –º–∏–Ω—É—Ç</small></p>
			</div>
			
			<div class="card profiling">
				<h2>–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
				<p><a href="/debug/pprof" target="_blank">–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å pprof</a></p>
				<p>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</p>
				<ul>
					<li>CPU: <code>go tool pprof -http=:8081 http://localhost:8080/debug/pprof/profile</code></li>
					<li>–ü–∞–º—è—Ç—å: <code>go tool pprof -http=:8081 http://localhost:8080/debug/pprof/heap</code></li>
					<li>–ì–æ—Ä—É—Ç–∏–Ω—ã: <code>go tool pprof -http=:8081 http://localhost:8080/debug/pprof/goroutine</code></li>
					<li>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏: <code>go tool pprof -http=:8081 http://localhost:8080/debug/pprof/block</code></li>
				</ul>
				<p>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ <code>-http=:8081</code></p>
			</div>
		</div>
	</div>
	
	<div class="footer">
		<p>–î–µ–º–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–π—Ç–∏-–º–∞—Ä–∞—Ñ–æ–Ω–∞ "100 Days of Go" | –°–µ–≥–æ–¥–Ω—è: ` + time.Now().Format("2006-01-02") + `</p>
		<p><a href="https://github.com/Folombas/100daysGo" target="_blank">100 Days of Go</a></p>
	</div>
	
	<script>
		function load(endpoint) {
			const button = event.target;
			const originalText = button.textContent;
			
			button.textContent = "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...";
			button.disabled = true;
			
			fetch('/' + endpoint)
				.then(res => res.text())
				.then(data => {
					alert(data);
					button.textContent = originalText;
					button.disabled = false;
				})
				.catch(err => {
					alert("–û—à–∏–±–∫–∞: " + err);
					button.textContent = originalText;
					button.disabled = false;
				});
		}
	</script>
</body>
</html>
`
	setUTF8Header(w, "text/html")
	fmt.Fprint(w, html)
}

// cpuLoadHandler - —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU
func cpuLoadHandler(w http.ResponseWriter, r *http.Request) {
	total := 0.0
	const iterations = 50000000 // 50 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∏—Ç–µ—Ä–∞—Ü–∏–π

	start := time.Now()
	for i := 0; i < iterations; i++ {
		// –°–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
		val := math.Pow(math.Sin(float64(i)), math.Cos(float64(i)))
		total += val
	}
	duration := time.Since(start)

	setUTF8Header(w, "text/plain")
	fmt.Fprintf(w, "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ò—Ç–µ—Ä–∞—Ü–∏–π: %d\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %s", iterations, duration)
}

// memLoadHandler - —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø–∞–º—è—Ç—å
func memLoadHandler(w http.ResponseWriter, r *http.Request) {
	const megaBytes = 500
	const bytes = megaBytes * 1024 * 1024

	// –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤
	data := make([]byte, bytes)
	for i := range data {
		data[i] = byte(i % 256)
	}

	// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
	result := data[len(data)-1]

	setUTF8Header(w, "text/plain")
	fmt.Fprintf(w, "–í—ã–¥–µ–ª–µ–Ω–æ %dMB –ø–∞–º—è—Ç–∏!\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–π—Ç: %d", megaBytes, result)
}

// goroutineLoadHandler - —Å–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≥–æ—Ä—É—Ç–∏–Ω
func goroutineLoadHandler(w http.ResponseWriter, r *http.Request) {
	const numGoroutines = 5000
	var wg sync.WaitGroup

	for i := 0; i < numGoroutines; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()
			time.Sleep(5 * time.Minute)
		}(i)
	}

	setUTF8Header(w, "text/plain")
	fmt.Fprintf(w, "–°–æ–∑–¥–∞–Ω–æ %d –≥–æ—Ä—É—Ç–∏–Ω! –û–Ω–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.", numGoroutines)
}
