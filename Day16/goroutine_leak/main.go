package main

import (
	"html/template"
	"log"
	"net/http"
	_ "net/http/pprof"
	"runtime"
	"sync"
	"time"
)

var (
	leakCounter    int
	leakCounterMux sync.Mutex
	stopLeak       = make(chan struct{})
)

// –£—Ç–µ–∫–∞—é—â–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞
func leakingGoroutine(id int) {
	for {
		select {
		case <-stopLeak:
			return
		default:
			// –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
			time.Sleep(10 * time.Second)
			
			// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Ç–µ—á–µ–∫
			leakCounterMux.Lock()
			leakCounter++
			leakCounterMux.Unlock()
		}
	}
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Ç–µ—á–∫–∏
func startLeakHandler(w http.ResponseWriter, r *http.Request) {
	count := 50
	for i := 0; i < count; i++ {
		go leakingGoroutine(i)
	}
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ 50 —É—Ç–µ–∫–∞—é—â–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω!"))
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ç–µ—á–∫–∏
func stopLeakHandler(w http.ResponseWriter, r *http.Request) {
	close(stopLeak)
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("üõë –£—Ç–µ—á–∫–∞ –≥–æ—Ä—É—Ç–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"))
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
type PageData struct {
	Title        string
	GoVersion    string
	NumGoroutine int
	LeakCount    int
}

func main() {
	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
	http.HandleFunc("/start-leak", startLeakHandler)
	http.HandleFunc("/stop-leak", stopLeakHandler)
	
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		tmpl := template.Must(template.ParseFiles("templates/index.html"))
		
		// –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		data := PageData{
			Title:        "–î–µ–Ω—å 16: –ü–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –≥–æ—Ä—É—Ç–∏–Ω",
			GoVersion:    runtime.Version(),
			NumGoroutine: runtime.NumGoroutine(),
			LeakCount:    leakCounter,
		}

		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		if err := tmpl.Execute(w, data); err != nil {
			http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞: "+err.Error(), http.StatusInternalServerError)
		}
	})

	port := ":8080"
	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", port)
	log.Println("üîç –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–µ—á–µ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
	log.Println("   go tool pprof http://localhost:8080/debug/pprof/goroutine")
	log.Fatal(http.ListenAndServe(port, nil))
}