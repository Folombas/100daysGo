package main

import (
	"fmt"
	"log"
	"net/http"
	_ "net/http/pprof" // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è pprof
	"runtime"
	"sync"
	"time"
)

var (
	// –°—á–µ—Ç—á–∏–∫ —É—Ç–µ–∫—à–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω
	leakCounter int
	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—á–µ—Ç—á–∏–∫—É
	leakCounterMux sync.Mutex
	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ç–µ—á–∫–∏
	stopLeak = make(chan struct{})
)

// leakingGoroutine –∏–º–∏—Ç–∏—Ä—É–µ—Ç —É—Ç–µ—á–∫—É –≥–æ—Ä—É—Ç–∏–Ω
func leakingGoroutine(id int) {
	for {
		select {
		case <-stopLeak:
			// –í—ã—Ö–æ–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
			return
		default:
			// –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã (10 —Å–µ–∫—É–Ω–¥ —Å–Ω–∞)
			time.Sleep(10 * time.Second)

			// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
			leakCounterMux.Lock()
			leakCounter++
			leakCounterMux.Unlock()
		}
	}
}

// startLeakHandler –∑–∞–ø—É—Å–∫–∞–µ—Ç —É—Ç–µ—á–∫—É –≥–æ—Ä—É—Ç–∏–Ω
func startLeakHandler(w http.ResponseWriter, r *http.Request) {
	// –ó–∞–ø—É—Å–∫–∞–µ–º 50 —É—Ç–µ–∫–∞—é—â–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω
	for i := 0; i < 50; i++ {
		go leakingGoroutine(i)
	}
	w.Write([]byte("üü¢ –ó–∞–ø—É—â–µ–Ω–æ 50 —É—Ç–µ–∫–∞—é—â–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω!"))
}

// stopLeakHandler –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ç–µ—á–∫—É –≥–æ—Ä—É—Ç–∏–Ω
func stopLeakHandler(w http.ResponseWriter, r *http.Request) {
	close(stopLeak) // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã
	w.Write([]byte("üî¥ –£—Ç–µ—á–∫–∞ –≥–æ—Ä—É—Ç–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"))
}

// statusHandler –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
func statusHandler(w http.ResponseWriter, r *http.Request) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	html := fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–£—Ç–µ—á–∫–∞ –≥–æ—Ä—É—Ç–∏–Ω</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            background: #1a1a2e;
            color: #e6e6e6;
            padding: 20px;
            text-align: center;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #16213e;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
        }
        h1 { color: #4cc9f0; }
        .stats {
            display: flex;
            justify-content: space-around;
            margin: 30px 0;
        }
        .stat-box {
            background: #0f3460;
            padding: 20px;
            border-radius: 10px;
            width: 45%%;
        }
        .stat-value {
            font-size: 2.5rem;
            font-weight: bold;
            margin: 10px 0;
        }
        .leaking { color: #f05454; animation: pulse 1.5s infinite; }
        .normal { color: #16c79a; }
        .controls { margin: 30px 0; }
        button {
            padding: 15px 30px;
            margin: 0 10px;
            font-size: 1.1rem;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: bold;
        }
        .btn-start {
            background: linear-gradient(45deg, #ff416c, #ff4b2b);
            color: white;
        }
        .btn-stop {
            background: linear-gradient(45deg, #11998e, #38ef7d);
            color: white;
        }
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        .instructions {
            text-align: left;
            background: rgba(255,255,255,0.05);
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        @keyframes pulse {
            0%% { opacity: 1; }
            50%% { opacity: 0.7; }
            100%% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>–î–µ–Ω—å 16: –ü–æ–∏—Å–∫ —É—Ç–µ—á–µ–∫ –≥–æ—Ä—É—Ç–∏–Ω</h1>
        
        <div class="stats">
            <div class="stat-box">
                <h2>–í—Å–µ–≥–æ –≥–æ—Ä—É—Ç–∏–Ω</h2>
                <div class="stat-value leaking">%d</div>
                <p>runtime.NumGoroutine()</p>
            </div>
            <div class="stat-box">
                <h2>–£—Ç–µ–∫—à–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω</h2>
                <div class="stat-value leaking">%d</div>
                <p>–°—á–µ—Ç—á–∏–∫ —É—Ç–µ—á–µ–∫</p>
            </div>
        </div>
        
        <div class="controls">
            <button class="btn-start" onclick="startLeak()">–ó–∞–ø—É—Å—Ç–∏—Ç—å —É—Ç–µ—á–∫—É</button>
            <button class="btn-stop" onclick="stopLeak()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ç–µ—á–∫—É</button>
        </div>
        
        <div class="instructions">
            <h3>–ö–∞–∫ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —É—Ç–µ—á–∫—É:</h3>
            <ol>
                <li>–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —É—Ç–µ—á–∫—É"</li>
                <li>–ù–∞–±–ª—é–¥–∞–π—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–∞ –≥–æ—Ä—É—Ç–∏–Ω</li>
                <li>–°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: 
                    <code>go tool pprof http://localhost:8080/debug/pprof/goroutine</code>
                </li>
                <li>–í pprof –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
                    <ul>
                        <li><code>top</code> - —Ç–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ—Ä—É—Ç–∏–Ω</li>
                        <li><code>list leakingGoroutine</code> - –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥</li>
                        <li><code>web</code> - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è Graphviz)</li>
                    </ul>
                </li>
            </ol>
            <p><strong>–í–µ—Ä—Å–∏—è Go: %s</strong></p>
        </div>
        
        <p>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...</p>
    </div>
    
    <script>
        function startLeak() {
            fetch('/start-leak')
                .then(response => response.text())
                .then(data => alert(data))
                .catch(err => alert('–û—à–∏–±–∫–∞: ' + err));
        }
        
        function stopLeak() {
            fetch('/stop-leak')
                .then(response => response.text())
                .then(data => alert(data))
                .catch(err => alert('–û—à–∏–±–∫–∞: ' + err));
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            location.reload();
        }, 5000);
    </script>
</body>
</html>
`, runtime.NumGoroutine(), leakCounter, runtime.Version())

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Write([]byte(html))
}

func main() {
	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
	http.HandleFunc("/", statusHandler)
	http.HandleFunc("/start-leak", startLeakHandler)
	http.HandleFunc("/stop-leak", stopLeakHandler)

	port := ":8080"
	log.Printf("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s", port)
	log.Println("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ç–µ—á–µ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
	log.Println("  go tool pprof http://localhost:8080/debug/pprof/goroutine")

	// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
	log.Fatal(http.ListenAndServe(port, nil))
}
