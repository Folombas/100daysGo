package main

import (
	"fmt"
	"sync"
	"time"
)

// ProgrammingZoo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–æ–æ–ø–∞—Ä–∫ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
type ProgrammingZoo struct {
	foodBowl    int // –æ–±—â–∞—è –º–∏—Å–∫–∞ —Å –µ–¥–æ–π
	mu          sync.Mutex
	animals     []*Animal
}

type Animal struct {
	name     string
	species  string // –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è)
	speed    time.Duration
	foodEaten int
}

func main() {
	fmt.Println("üêæ –ó–û–û–ü–ê–†–ö –Ø–ó–´–ö–û–í –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≥–æ–Ω–æ–∫!")
	fmt.Println("=====================================================")

	zoo := &ProgrammingZoo{
		foodBowl: 100, // –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã
		animals: []*Animal{
			{name: "–ü–∏—Ç–æ—à–∞", species: "Python", speed: 300 * time.Millisecond},
			{name: "–ü–µ—Ä–ª—É—à–∞", species: "Perl", speed: 500 * time.Millisecond},
			{name: "–ì–æ—Ñ–µ—Ä", species: "Golang", speed: 100 * time.Millisecond},
			{name: "–°–ª–æ–Ω–∏–∫", species: "PHP", speed: 200 * time.Millisecond},
			{name: "–ö—Ä–∞–±–∏–∫", species: "Rust", speed: 150 * time.Millisecond},
		},
	}

	fmt.Println("üçé –°–ò–¢–£–ê–¶–ò–Ø: –í –∑–æ–æ–ø–∞—Ä–∫–µ –æ–¥–Ω–∞ –º–∏—Å–∫–∞ —Å –µ–¥–æ–π –Ω–∞ –≤—Å–µ—Ö!")
	fmt.Println("üéØ –ó–ê–î–ê–ß–ê: –ñ–∏–≤–æ—Ç–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –µ—Å—Ç—å –ë–ï–ó –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö!")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã: –≥–æ–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
	fmt.Println("\n‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´: –ì–æ–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö (Race Condition)")
	zoo.foodBowl = 100 // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∏—Å–∫—É
	zoo.demoRaceCondition()

	fmt.Printf("\nü•£ –ü–æ—Å–ª–µ –≥–æ–Ω–∫–∏ –≤ –º–∏—Å–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å: %d –µ–¥–∏–Ω–∏—Ü –µ–¥—ã\n", zoo.foodBowl)
	zoo.printAnimalStats()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è: —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
	fmt.Println("\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (Mutex)")
	zoo.foodBowl = 100 // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∏—Å–∫—É
	zoo.demoWithSync()

	fmt.Printf("\nü•£ –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –º–∏—Å–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å: %d –µ–¥–∏–Ω–∏—Ü –µ–¥—ã\n", zoo.foodBowl)
	zoo.printAnimalStats()

	fmt.Println("\nüîç –ö–ê–ö –û–ë–ù–ê–†–£–ñ–ò–¢–¨ –ì–û–ù–ö–£:")
	fmt.Println("   go run -race main.go")
	fmt.Println("   go build -race")
	fmt.Println("   go test -race")

	fmt.Println("\nüéâ –í–´–í–û–î: Go Race Detector - –Ω–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö –≥–æ–Ω–æ–∫!")
}

// demoRaceCondition –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–æ–Ω–∫—É –¥–∞–Ω–Ω—ã—Ö
func (z *ProgrammingZoo) demoRaceCondition() {
	var wg sync.WaitGroup

	fmt.Println("   üêçüê´üêπüêòü¶Ä –ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç –µ—Å—Ç—å –ë–ï–ó —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")

	for _, animal := range z.animals {
		wg.Add(1)
		go z.animalEatWithoutSync(&wg, animal)
	}

	wg.Wait()
}

// animalEatWithoutSync - –∂–∏–≤–æ—Ç–Ω–æ–µ –µ—Å—Ç –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ–ø–∞—Å–Ω–æ!)
func (z *ProgrammingZoo) animalEatWithoutSync(wg *sync.WaitGroup, animal *Animal) {
	defer wg.Done()

	for i := 0; i < 5; i++ {
		// ‚ùå –û–ü–ê–°–ù–û: –≥–æ–Ω–∫–∞ –¥–∞–Ω–Ω—ã—Ö! –ù–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä—É—Ç–∏–Ω —á–∏—Ç–∞—é—Ç –∏ –ø–∏—à—É—Ç foodBowl
		if z.foodBowl > 0 {
			time.Sleep(animal.speed)

			// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–∫—Ü–∏—è –±–µ–∑ –∑–∞—â–∏—Ç—ã
			currentFood := z.foodBowl
			time.Sleep(10 * time.Millisecond) // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
			z.foodBowl = currentFood - 1
			animal.foodEaten++

			fmt.Printf("   %s —Å—ä–µ–ª –∫—É—Å–æ—á–µ–∫! –û—Å—Ç–∞–ª–æ—Å—å: %d\n", animal.name, z.foodBowl)
		}
	}
}

// demoWithSync –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
func (z *ProgrammingZoo) demoWithSync() {
	var wg sync.WaitGroup

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–∏–≤–æ—Ç–Ω—ã—Ö
	for _, animal := range z.animals {
		animal.foodEaten = 0
	}

	fmt.Println("   üêçüê´üêπüêòü¶Ä –ñ–∏–≤–æ—Ç–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç –µ—Å—Ç—å –° —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π...")

	for _, animal := range z.animals {
		wg.Add(1)
		go z.animalEatWithSync(&wg, animal)
	}

	wg.Wait()
}

// animalEatWithSync - –∂–∏–≤–æ—Ç–Ω–æ–µ –µ—Å—Ç —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ!)
func (z *ProgrammingZoo) animalEatWithSync(wg *sync.WaitGroup, animal *Animal) {
	defer wg.Done()

	for i := 0; i < 5; i++ {
		// ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–∫—Ü–∏–∏
		z.mu.Lock()

		if z.foodBowl > 0 {
			// –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –µ–¥—É
			time.Sleep(animal.speed)

			z.foodBowl--
			animal.foodEaten++

			fmt.Printf("   %s —Å—ä–µ–ª –∫—É—Å–æ—á–µ–∫! –û—Å—Ç–∞–ª–æ—Å—å: %d\n", animal.name, z.foodBowl)
		}

		z.mu.Unlock()

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ –∫ –º–∏—Å–∫–µ
		time.Sleep(50 * time.Millisecond)
	}
}

// printAnimalStats –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∂–∏–≤–æ—Ç–Ω—ã–º
func (z *ProgrammingZoo) printAnimalStats() {
	fmt.Println("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ñ–ò–í–û–¢–ù–´–•:")
	for _, animal := range z.animals {
		fmt.Printf("   %s (%s): —Å—ä–µ–ª %d –∫—É—Å–æ—á–∫–æ–≤\n",
			animal.name, animal.species, animal.foodEaten)
	}
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–æ–π –≥–æ–Ω–∫–∏
func hiddenRaceDemo() {
	var counter int
	var wg sync.WaitGroup

	for i := 0; i < 10; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			// ‚ùå –°–∫—Ä—ã—Ç–∞—è –≥–æ–Ω–∫–∞: –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä—É—Ç–∏–Ω –ø–∏—à—É—Ç –≤ counter
			counter++
		}()
	}

	wg.Wait()
	fmt.Printf("\nüß™ –°–∫—Ä—ã—Ç–∞—è –≥–æ–Ω–∫–∞: counter = %d (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10!)\n", counter)
}
